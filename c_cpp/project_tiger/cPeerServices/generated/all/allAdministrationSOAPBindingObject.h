/* allAdministrationSOAPBindingObject.h
   Generated by gSOAP 2.7.9c from include/allServices.h
   Copyright(C) 2000-2006, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef allAdministrationSOAPBinding_H
#define allAdministrationSOAPBinding_H
#include "allH.h"

/******************************************************************************\
 *                                                                            *
 * Service Object                                                             *
 *                                                                            *
\******************************************************************************/

extern SOAP_NMAC struct Namespace all_namespaces[];
class AdministrationSOAPBinding : public soap
{    public:
	AdministrationSOAPBinding()
	{ soap_init(this); this->namespaces = all_namespaces; };
	virtual ~AdministrationSOAPBinding() { soap_destroy(this); soap_end(this); soap_done(this); };
	virtual	int bind(const char *host, int port, int backlog) { return soap_bind(this, host, port, backlog); };
	virtual	int accept() { return soap_accept(this); };
	virtual	int serve() { return all_serve(this); };
};

/******************************************************************************\
 *                                                                            *
 * Service Operations (you should define these)                               *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 adm__updateCmts(struct soap*, ns1__CmtsT *cmts, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__addCmts(struct soap*, ns1__CmtsT *cmts, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__deleteCmts(struct soap*, ns1__CmtsT *cmts, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__addCmtsAllSnmpV2CAttributes(struct soap*, ns1__TopoHierarchyKeyT *topologyKey, std::string cmtsResId, ArrayOfSnmpV2CAttributesT *attributes, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__updateCmtsAllSnmpV2CAttributes(struct soap*, ns1__TopoHierarchyKeyT *topologyKey, std::string cmtsResId, ArrayOfSnmpV2CAttributesT *attributes, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__updateCms(struct soap*, ns1__CmsT *cms, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__addCms(struct soap*, ns1__CmsT *cms, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__deleteCms(struct soap*, ns1__CmsT *cms, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__getPollingIntervals(struct soap*, struct adm__getPollingIntervalsResponse &_param_1);

SOAP_FMAC5 int SOAP_FMAC6 adm__updatePollingIntervals(struct soap*, ns1__PollingIntervalsT *pollintInterval, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__getMtaStatusThreshold(struct soap*, struct adm__getMtaStatusThresholdResponse &_param_2);

SOAP_FMAC5 int SOAP_FMAC6 adm__updateMtaStatusThreshold(struct soap*, ns1__MtaStatusThresholdT *pollintInterval, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__getHfcStatusThreshold(struct soap*, struct adm__getHfcStatusThresholdResponse &_param_3);

SOAP_FMAC5 int SOAP_FMAC6 adm__updateHfcStatusThreshold(struct soap*, ns1__HfcStatusThresholdT *pollintInterval, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__getChannelStatusThreshold(struct soap*, struct adm__getChannelStatusThresholdResponse &_param_4);

SOAP_FMAC5 int SOAP_FMAC6 adm__updateChannelStatusThreshold(struct soap*, ns1__ChannelStatusThresholdT *pollintInterval, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__getCmtsStatusThreshold(struct soap*, struct adm__getCmtsStatusThresholdResponse &_param_5);

SOAP_FMAC5 int SOAP_FMAC6 adm__updateCmtsStatusThreshold(struct soap*, ns1__CmtsStatusThresholdT *pollintInterval, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__getCmsStatusThreshold(struct soap*, struct adm__getCmsStatusThresholdResponse &_param_6);

SOAP_FMAC5 int SOAP_FMAC6 adm__updateCmsStatusThreshold(struct soap*, ns1__CmsStatusThresholdT *pollintInterval, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__getMtaAlarmConfig(struct soap*, struct adm__getMtaAlarmConfigResponse &_param_7);

SOAP_FMAC5 int SOAP_FMAC6 adm__updateMtaAlarmConfig(struct soap*, ns1__MtaAlarmConfigT *alarmConfig, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__getHfcAlarmConfig(struct soap*, struct adm__getHfcAlarmConfigResponse &_param_8);

SOAP_FMAC5 int SOAP_FMAC6 adm__updateHfcAlarmConfig(struct soap*, ns1__HfcAlarmConfigT *alarmConfig, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__getCmtsAlarmConfig(struct soap*, struct adm__getCmtsAlarmConfigResponse &_param_9);

SOAP_FMAC5 int SOAP_FMAC6 adm__updateCmtsAlarmConfig(struct soap*, ns1__CmtsAlarmConfigT *alarmConfig, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__getCmsAlarmConfig(struct soap*, struct adm__getCmsAlarmConfigResponse &_param_10);

SOAP_FMAC5 int SOAP_FMAC6 adm__updateCmsAlarmConfig(struct soap*, ns1__CmsAlarmConfigT *alarmConfig, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__updateLocalSystem(struct soap*, ns1__LocalSystemT *cmts, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__updateRegion(struct soap*, ns1__RegionT *cmts, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__addRegion(struct soap*, ns1__RegionT *cmts, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__updateMarket(struct soap*, ns1__MarketT *cmts, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__addMarket(struct soap*, ns1__MarketT *cmts, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__updateBlade(struct soap*, ns1__BladeT *cmts, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__addBlade(struct soap*, ns1__BladeT *cmts, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__deleteBlade(struct soap*, ns1__BladeT *cmts, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__getCmPerfConfig(struct soap*, struct adm__getCmPerfConfigResponse &_param_11);

SOAP_FMAC5 int SOAP_FMAC6 adm__updateCmPerfConfig(struct soap*, ns1__CmPerformanceConfigT *cmPerf, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__addUser(struct soap*, ns1__UserT *user, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__getUsers(struct soap*, struct adm__getUsersResponse &_param_12);

SOAP_FMAC5 int SOAP_FMAC6 adm__getUser(struct soap*, std::string loginName, struct adm__getUserResponse &_param_13);

SOAP_FMAC5 int SOAP_FMAC6 adm__updateUser(struct soap*, ns1__UserT *user, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__updateUserPassword(struct soap*, std::string loginName, std::string newPassword, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__getRoles(struct soap*, struct adm__getRolesResponse &_param_14);

SOAP_FMAC5 int SOAP_FMAC6 adm__getRole(struct soap*, std::string roleName, struct adm__getRoleResponse &_param_15);

SOAP_FMAC5 int SOAP_FMAC6 adm__updateRole(struct soap*, ns1__RoleT *role, short &result);

SOAP_FMAC5 int SOAP_FMAC6 adm__downloadConfigFromParent(struct soap*, short &rc);

SOAP_FMAC5 int SOAP_FMAC6 adm__getConfig(struct soap*, struct adm__getConfigResponse &_param_16);

SOAP_FMAC5 int SOAP_FMAC6 cms__getLineStatus(struct soap*, ArrayOfCMSLineT *input, struct cms__getLineStatusResponse &_param_17);

SOAP_FMAC5 int SOAP_FMAC6 cpeer__pingMta(struct soap*, ns1__TopoHierarchyKeyT *topologyKey, std::string mtaResId, std::string &result);

SOAP_FMAC5 int SOAP_FMAC6 cpeer__getMtaData(struct soap*, ns1__TopoHierarchyKeyT *topologyKey, std::string mtaResId, struct cpeer__getMtaDataResponse &_param_18);

SOAP_FMAC5 int SOAP_FMAC6 cpeer__getCmData(struct soap*, ns1__TopoHierarchyKeyT *topologyKey, std::string cmResId, struct cpeer__getCmDataResponse &_param_19);

SOAP_FMAC5 int SOAP_FMAC6 cpeer__getCmtsCmData(struct soap*, ns1__TopoHierarchyKeyT *topologyKey, std::string cmtsResId, std::string cmResId, struct cpeer__getCmtsCmDataResponse &_param_20);

SOAP_FMAC5 int SOAP_FMAC6 cpeer__sendEvent(struct soap*, ns1__EventMessageT *event, short &result);

SOAP_FMAC5 int SOAP_FMAC6 cte__getCteData(struct soap*, ArrayOfCTEQueryInputT *queryInput, struct cte__getCteDataResponse &_param_21);

#endif
