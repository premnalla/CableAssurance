/* cPeerServCPeerServiceSOAPBindingProxy.h
   Generated by gSOAP 2.7.9c from include/cPeerServices.h
   Copyright(C) 2000-2006, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef cPeerServCPeerServiceSOAPBinding_H
#define cPeerServCPeerServiceSOAPBinding_H
#include "cPeerServH.h"
extern SOAP_NMAC struct Namespace cPeerServ_namespaces[];
class CPeerServiceSOAPBinding
{   public:
	struct soap *soap;
	const char *endpoint;
	CPeerServiceSOAPBinding() { soap = soap_new(); if (soap) soap->namespaces = cPeerServ_namespaces; endpoint = "http://localhost:9091/CableAssurance/caservices/CPeerServiceEP"; };
	virtual ~CPeerServiceSOAPBinding() { if (soap) { soap_destroy(soap); soap_end(soap); soap_free(soap); } };
	virtual int cpeer__pingMta(ns1__TopoHierarchyKeyT *topologyKey, std::string mtaResId, std::string &result) { return soap ? soap_call_cpeer__pingMta(soap, endpoint, NULL, topologyKey, mtaResId, result) : SOAP_EOM; };
	virtual int cpeer__getMtaData(ns1__TopoHierarchyKeyT *topologyKey, std::string mtaResId, struct cpeer__getMtaDataResponse &_param_1) { return soap ? soap_call_cpeer__getMtaData(soap, endpoint, NULL, topologyKey, mtaResId, _param_1) : SOAP_EOM; };
	virtual int cpeer__getCmData(ns1__TopoHierarchyKeyT *topologyKey, std::string cmResId, struct cpeer__getCmDataResponse &_param_2) { return soap ? soap_call_cpeer__getCmData(soap, endpoint, NULL, topologyKey, cmResId, _param_2) : SOAP_EOM; };
	virtual int cpeer__getCmtsCmData(ns1__TopoHierarchyKeyT *topologyKey, std::string cmtsResId, std::string cmResId, struct cpeer__getCmtsCmDataResponse &_param_3) { return soap ? soap_call_cpeer__getCmtsCmData(soap, endpoint, NULL, topologyKey, cmtsResId, cmResId, _param_3) : SOAP_EOM; };
	virtual int cpeer__sendEvent(ns1__EventMessageT *event, short &result) { return soap ? soap_call_cpeer__sendEvent(soap, endpoint, NULL, event, result) : SOAP_EOM; };
};
#endif
