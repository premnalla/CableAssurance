/* cPeerServServer.cpp
   Generated by gSOAP 2.7.9c from include/cPeerServices.h
   Copyright(C) 2000-2006, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "cPeerServH.h"

SOAP_SOURCE_STAMP("@(#) cPeerServServer.cpp ver 2.7.9c 2007-07-14 19:32:06 GMT")


SOAP_FMAC5 int SOAP_FMAC6 cPeerServ_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	unsigned int k = soap->max_keep_alive;
#endif

	do
	{
#ifdef WITH_FASTCGI
		if (FCGI_Accept() < 0)
		{
			soap->error = SOAP_EOF;
			return soap_send_fault(soap);
		}
#endif

		soap_begin(soap);

#ifndef WITH_FASTCGI
		if (soap->max_keep_alive > 0 && !--k)
			soap->keep_alive = 0;
#endif

		if (soap_begin_recv(soap))
		{	if (soap->error < SOAP_STOP)
			{
#ifdef WITH_FASTCGI
				soap_send_fault(soap);
#else 
				return soap_send_fault(soap);
#endif
			}
			soap_closesock(soap);

			continue;
		}

		if (soap_envelope_begin_in(soap)
		 || soap_recv_header(soap)
		 || soap_body_begin_in(soap)
		 || cPeerServ_serve_request(soap)
		 || (soap->fserveloop && soap->fserveloop(soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}

#ifdef WITH_FASTCGI
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
SOAP_FMAC5 int SOAP_FMAC6 cPeerServ_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "cpeer:pingMta"))
		return soap_serve_cpeer__pingMta(soap);
	if (!soap_match_tag(soap, soap->tag, "cpeer:getMtaData"))
		return soap_serve_cpeer__getMtaData(soap);
	if (!soap_match_tag(soap, soap->tag, "cpeer:getCmData"))
		return soap_serve_cpeer__getCmData(soap);
	if (!soap_match_tag(soap, soap->tag, "cpeer:getCmtsCmData"))
		return soap_serve_cpeer__getCmtsCmData(soap);
	if (!soap_match_tag(soap, soap->tag, "cpeer:sendEvent"))
		return soap_serve_cpeer__sendEvent(soap);
	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_cpeer__pingMta(struct soap *soap)
{	struct cpeer__pingMta soap_tmp_cpeer__pingMta;
	struct cpeer__pingMtaResponse soap_tmp_cpeer__pingMtaResponse;
	soap_default_cpeer__pingMtaResponse(soap, &soap_tmp_cpeer__pingMtaResponse);
	soap_default_cpeer__pingMta(soap, &soap_tmp_cpeer__pingMta);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_cpeer__pingMta(soap, &soap_tmp_cpeer__pingMta, "cpeer:pingMta", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = cpeer__pingMta(soap, soap_tmp_cpeer__pingMta.topologyKey, soap_tmp_cpeer__pingMta.mtaResId, soap_tmp_cpeer__pingMtaResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_cpeer__pingMtaResponse(soap, &soap_tmp_cpeer__pingMtaResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_cpeer__pingMtaResponse(soap, &soap_tmp_cpeer__pingMtaResponse, "cpeer:pingMtaResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_cpeer__pingMtaResponse(soap, &soap_tmp_cpeer__pingMtaResponse, "cpeer:pingMtaResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_cpeer__getMtaData(struct soap *soap)
{	struct cpeer__getMtaData soap_tmp_cpeer__getMtaData;
	struct cpeer__getMtaDataResponse _param_1;
	soap_default_cpeer__getMtaDataResponse(soap, &_param_1);
	soap_default_cpeer__getMtaData(soap, &soap_tmp_cpeer__getMtaData);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_cpeer__getMtaData(soap, &soap_tmp_cpeer__getMtaData, "cpeer:getMtaData", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = cpeer__getMtaData(soap, soap_tmp_cpeer__getMtaData.topologyKey, soap_tmp_cpeer__getMtaData.mtaResId, _param_1);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_cpeer__getMtaDataResponse(soap, &_param_1);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_cpeer__getMtaDataResponse(soap, &_param_1, "cpeer:getMtaDataResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_cpeer__getMtaDataResponse(soap, &_param_1, "cpeer:getMtaDataResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_cpeer__getCmData(struct soap *soap)
{	struct cpeer__getCmData soap_tmp_cpeer__getCmData;
	struct cpeer__getCmDataResponse _param_2;
	soap_default_cpeer__getCmDataResponse(soap, &_param_2);
	soap_default_cpeer__getCmData(soap, &soap_tmp_cpeer__getCmData);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_cpeer__getCmData(soap, &soap_tmp_cpeer__getCmData, "cpeer:getCmData", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = cpeer__getCmData(soap, soap_tmp_cpeer__getCmData.topologyKey, soap_tmp_cpeer__getCmData.cmResId, _param_2);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_cpeer__getCmDataResponse(soap, &_param_2);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_cpeer__getCmDataResponse(soap, &_param_2, "cpeer:getCmDataResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_cpeer__getCmDataResponse(soap, &_param_2, "cpeer:getCmDataResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_cpeer__getCmtsCmData(struct soap *soap)
{	struct cpeer__getCmtsCmData soap_tmp_cpeer__getCmtsCmData;
	struct cpeer__getCmtsCmDataResponse _param_3;
	soap_default_cpeer__getCmtsCmDataResponse(soap, &_param_3);
	soap_default_cpeer__getCmtsCmData(soap, &soap_tmp_cpeer__getCmtsCmData);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_cpeer__getCmtsCmData(soap, &soap_tmp_cpeer__getCmtsCmData, "cpeer:getCmtsCmData", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = cpeer__getCmtsCmData(soap, soap_tmp_cpeer__getCmtsCmData.topologyKey, soap_tmp_cpeer__getCmtsCmData.cmtsResId, soap_tmp_cpeer__getCmtsCmData.cmResId, _param_3);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_cpeer__getCmtsCmDataResponse(soap, &_param_3);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_cpeer__getCmtsCmDataResponse(soap, &_param_3, "cpeer:getCmtsCmDataResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_cpeer__getCmtsCmDataResponse(soap, &_param_3, "cpeer:getCmtsCmDataResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_cpeer__sendEvent(struct soap *soap)
{	struct cpeer__sendEvent soap_tmp_cpeer__sendEvent;
	struct cpeer__sendEventResponse soap_tmp_cpeer__sendEventResponse;
	soap_default_cpeer__sendEventResponse(soap, &soap_tmp_cpeer__sendEventResponse);
	soap_default_cpeer__sendEvent(soap, &soap_tmp_cpeer__sendEvent);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	if (!soap_get_cpeer__sendEvent(soap, &soap_tmp_cpeer__sendEvent, "cpeer:sendEvent", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = cpeer__sendEvent(soap, soap_tmp_cpeer__sendEvent.event, soap_tmp_cpeer__sendEventResponse.result);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_cpeer__sendEventResponse(soap, &soap_tmp_cpeer__sendEventResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_cpeer__sendEventResponse(soap, &soap_tmp_cpeer__sendEventResponse, "cpeer:sendEventResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_cpeer__sendEventResponse(soap, &soap_tmp_cpeer__sendEventResponse, "cpeer:sendEventResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

/* End of cPeerServServer.cpp */
