// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* include/allServices.h
   Generated by wsdl2h 1.2.9c from wsdl/CA_CPeerServices.wsdl wsdl/CA_CTEservices.wsdl wsdl/CA_CMSservices.wsdl wsdl/CA_Administration.wsdl and typemap.dat
   2007-07-14 19:32:05 GMT
   Copyright (C) 2001-2006 Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/* NOTE:

 - Compile this file with soapcpp2 to complete the code generation process.
 - Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control schema namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) to browse this file.
 - Use wsdl2h option -l to view the software license terms.

   DO NOT include this file directly into your project.
   Include only the soapcpp2-generated headers and source code files.
*/

//gsoapopt w

/******************************************************************************\
 *                                                                            *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to disable)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://www.palmyrasys.com/webservices/CableAssurance"

*/

//gsoap ns1   schema namespace:	http://www.palmyrasys.com/webservices/CableAssurance
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Schema Types                                                               *
 *                                                                            *
\******************************************************************************/


/// Primitive built-in type "xs:integer"
typedef std::string xsd__integer;

/// Built-in attribute "SOAP-ENC:arrayType".
typedef std::string _SOAP_ENC__arrayType;


//  Forward declaration of class ns1__SnmpV2CAttributesT.
class ns1__SnmpV2CAttributesT;

//  Forward declaration of class ns1__GenericCountsT.
class ns1__GenericCountsT;

//  Forward declaration of class ns1__InputTimeT.
class ns1__InputTimeT;

//  Forward declaration of class ns1__ResultBatchT.
class ns1__ResultBatchT;

//  Forward declaration of class ns1__TopoHierarchyKeyT.
class ns1__TopoHierarchyKeyT;

//  Forward declaration of class ns1__LocalSystemT.
class ns1__LocalSystemT;

//  Forward declaration of class ns1__RegionT.
class ns1__RegionT;

//  Forward declaration of class ns1__MarketT.
class ns1__MarketT;

//  Forward declaration of class ns1__BladeT.
class ns1__BladeT;

//  Forward declaration of class ns1__CmsT.
class ns1__CmsT;

//  Forward declaration of class ns1__CmtsT.
class ns1__CmtsT;

//  Forward declaration of class ns1__ChannelT.
class ns1__ChannelT;

//  Forward declaration of class ns1__HfcT.
class ns1__HfcT;

//  Forward declaration of class ns1__CableModemT.
class ns1__CableModemT;

//  Forward declaration of class ns1__EmtaT.
class ns1__EmtaT;

//  Forward declaration of class ns1__EmtaSecondaryT.
class ns1__EmtaSecondaryT;

//  Forward declaration of class ns1__AbstractAlarmT.
class ns1__AbstractAlarmT;

//  Forward declaration of class ns1__CurrentAlarmT.
class ns1__CurrentAlarmT;

//  Forward declaration of class ns1__CurrentAlarmDetailsT.
class ns1__CurrentAlarmDetailsT;

//  Forward declaration of class ns1__HistoricalAlarmT.
class ns1__HistoricalAlarmT;

//  Forward declaration of class ns1__HistoricalAlarmDetailsT.
class ns1__HistoricalAlarmDetailsT;

//  Forward declaration of class ns1__AlarmHistoryT.
class ns1__AlarmHistoryT;

//  Forward declaration of class ArrayOfRegionsT.
class ArrayOfRegionsT;

//  Forward declaration of class ArrayOfMarketsT.
class ArrayOfMarketsT;

//  Forward declaration of class ArrayOfBladesT.
class ArrayOfBladesT;

//  Forward declaration of class ArrayOfCmsesT.
class ArrayOfCmsesT;

//  Forward declaration of class ArrayOfCmtsesT.
class ArrayOfCmtsesT;

//  Forward declaration of class ArrayOfSnmpV2CAttributesT.
class ArrayOfSnmpV2CAttributesT;

//  Forward declaration of class ArrayOfChannelsT.
class ArrayOfChannelsT;

//  Forward declaration of class ArrayOfHfcsT.
class ArrayOfHfcsT;

//  Forward declaration of class ArrayOfCableModemsT.
class ArrayOfCableModemsT;

//  Forward declaration of class ArrayOfEmtasT.
class ArrayOfEmtasT;

//  Forward declaration of class ArrayOfCurrentAlarmsT.
class ArrayOfCurrentAlarmsT;

//  Forward declaration of class ArrayOfHistoricalAlarmsT.
class ArrayOfHistoricalAlarmsT;

//  Forward declaration of class ArrayOfAlarmHistoriesT.
class ArrayOfAlarmHistoriesT;

//  Forward declaration of class ns1__MappedEuDevicesT.
class ns1__MappedEuDevicesT;

//  Forward declaration of class ns1__ScrollPageT.
class ns1__ScrollPageT;

//  Forward declaration of class ArrayOfScrollPageT.
class ArrayOfScrollPageT;

//  Forward declaration of class ns1__QueryStateT.
class ns1__QueryStateT;

//  Forward declaration of class ArrayOfQueryStateT.
class ArrayOfQueryStateT;

//  Forward declaration of class ns1__GenericCountsHistoryT.
class ns1__GenericCountsHistoryT;

//  Forward declaration of class ArrayOfGenericCountsHistoryT.
class ArrayOfGenericCountsHistoryT;

//  Forward declaration of class ns1__CmStatusT.
class ns1__CmStatusT;

//  Forward declaration of class ns1__CmStatusHistoryT.
class ns1__CmStatusHistoryT;

//  Forward declaration of class ArrayOfCmStatusHistoryT.
class ArrayOfCmStatusHistoryT;

//  Forward declaration of class ns1__MtaAvailabilityT.
class ns1__MtaAvailabilityT;

//  Forward declaration of class ns1__MtaAvailabilityHistoryT.
class ns1__MtaAvailabilityHistoryT;

//  Forward declaration of class ArrayOfMtaAvailabilityHistoryT.
class ArrayOfMtaAvailabilityHistoryT;

//  Forward declaration of class ns1__MtaProvStatusT.
class ns1__MtaProvStatusT;

//  Forward declaration of class ns1__MtaProvStatusHistoryT.
class ns1__MtaProvStatusHistoryT;

//  Forward declaration of class ArrayOfMtaProvStatusHistoryT.
class ArrayOfMtaProvStatusHistoryT;

//  Forward declaration of class ns1__MtaPingStatusT.
class ns1__MtaPingStatusT;

//  Forward declaration of class ns1__MtaPingStatusHistoryT.
class ns1__MtaPingStatusHistoryT;

//  Forward declaration of class ArrayOfMtaPingStatusHistoryT.
class ArrayOfMtaPingStatusHistoryT;

//  Forward declaration of class ns1__CmPerformanceT.
class ns1__CmPerformanceT;

//  Forward declaration of class ns1__CmPerformanceHistoryT.
class ns1__CmPerformanceHistoryT;

//  Forward declaration of class ns1__CmCurrentPerformanceT.
class ns1__CmCurrentPerformanceT;

//  Forward declaration of class ArrayOfCmPerformanceHistoryT.
class ArrayOfCmPerformanceHistoryT;

//  Forward declaration of class ns1__CTECustomerT.
class ns1__CTECustomerT;

//  Forward declaration of class ArrayOfCTECustomerT.
class ArrayOfCTECustomerT;

//  Forward declaration of class ns1__CTEAbstractMacT.
class ns1__CTEAbstractMacT;

//  Forward declaration of class ns1__CTEAbstractNameT.
class ns1__CTEAbstractNameT;

//  Forward declaration of class ns1__CTEDataT.
class ns1__CTEDataT;

//  Forward declaration of class ArrayOfCTEDataT.
class ArrayOfCTEDataT;

//  Forward declaration of class ns1__CTEQueryInputT.
class ns1__CTEQueryInputT;

//  Forward declaration of class ArrayOfCTEQueryInputT.
class ArrayOfCTEQueryInputT;

//  Forward declaration of class ns1__CMSLineT.
class ns1__CMSLineT;

//  Forward declaration of class ArrayOfCMSLineT.
class ArrayOfCMSLineT;

//  Forward declaration of class ns1__CMSResultT.
class ns1__CMSResultT;

//  Forward declaration of class ns1__UserAccessT.
class ns1__UserAccessT;

//  Forward declaration of class ArrayOfUserAccessT.
class ArrayOfUserAccessT;

//  Forward declaration of class ns1__ApplicationDomainT.
class ns1__ApplicationDomainT;

//  Forward declaration of class ArrayOfApplicationDomainT.
class ArrayOfApplicationDomainT;

//  Forward declaration of class ns1__RoleT.
class ns1__RoleT;

//  Forward declaration of class ArrayOfRoleT.
class ArrayOfRoleT;

//  Forward declaration of class ns1__UserT.
class ns1__UserT;

//  Forward declaration of class ArrayOfUserT.
class ArrayOfUserT;

//  Forward declaration of class ns1__PollingIntervalsT.
class ns1__PollingIntervalsT;

//  Forward declaration of class ns1__AlarmBasedStatusThresholdT.
class ns1__AlarmBasedStatusThresholdT;

//  Forward declaration of class ArrayOfAlarmStatusThresholdT.
class ArrayOfAlarmStatusThresholdT;

//  Forward declaration of class ns1__AggregateStatusThresholdT.
class ns1__AggregateStatusThresholdT;

//  Forward declaration of class ArrayOfAggregateStatusThresholdT.
class ArrayOfAggregateStatusThresholdT;

//  Forward declaration of class ns1__MtaStatusThresholdT.
class ns1__MtaStatusThresholdT;

//  Forward declaration of class ns1__HfcStatusThresholdT.
class ns1__HfcStatusThresholdT;

//  Forward declaration of class ns1__ChannelStatusThresholdT.
class ns1__ChannelStatusThresholdT;

//  Forward declaration of class ns1__CmtsStatusThresholdT.
class ns1__CmtsStatusThresholdT;

//  Forward declaration of class ns1__CmsStatusThresholdT.
class ns1__CmsStatusThresholdT;

//  Forward declaration of class ns1__SoakWindowT.
class ns1__SoakWindowT;

//  Forward declaration of class ns1__AggregateCmOfflineTresholdT.
class ns1__AggregateCmOfflineTresholdT;

//  Forward declaration of class ns1__AggregateMtaTresholdT.
class ns1__AggregateMtaTresholdT;

//  Forward declaration of class ns1__HfcPowerTresholdT.
class ns1__HfcPowerTresholdT;

//  Forward declaration of class ns1__HfcAlarmConfigT.
class ns1__HfcAlarmConfigT;

//  Forward declaration of class ns1__AlarmTypeConfigT.
class ns1__AlarmTypeConfigT;

//  Forward declaration of class ArrayOfAlarmTypeConfigT.
class ArrayOfAlarmTypeConfigT;

//  Forward declaration of class ns1__MtaAlarmConfigT.
class ns1__MtaAlarmConfigT;

//  Forward declaration of class ns1__CmtsAlarmConfigT.
class ns1__CmtsAlarmConfigT;

//  Forward declaration of class ns1__CmsAlarmConfigT.
class ns1__CmsAlarmConfigT;

//  Forward declaration of class ns1__CmPerformanceConfigT.
class ns1__CmPerformanceConfigT;

//  Forward declaration of class ns1__ConfigDownloadT.
class ns1__ConfigDownloadT;

//  Forward declaration of class ns1__CmtsCmDataT.
class ns1__CmtsCmDataT;

//  Forward declaration of class ns1__CmDataT.
class ns1__CmDataT;

//  Forward declaration of class ns1__MtaDataT.
class ns1__MtaDataT;

//  Forward declaration of class ns1__StatusSummaryT.
class ns1__StatusSummaryT;

//  Forward declaration of class ns1__HfcStatusSummaryT.
class ns1__HfcStatusSummaryT;

//  Forward declaration of class ArrayOfHfcStatusSummaryT.
class ArrayOfHfcStatusSummaryT;

//  Forward declaration of class ns1__MtaStatusSummaryT.
class ns1__MtaStatusSummaryT;

//  Forward declaration of class ArrayOfMtaStatusSummaryT.
class ArrayOfMtaStatusSummaryT;

//  Forward declaration of class ns1__CmStatusSummaryT.
class ns1__CmStatusSummaryT;

//  Forward declaration of class ArrayOfCmStatusSummaryT.
class ArrayOfCmStatusSummaryT;

//  Forward declaration of class ns1__MtaStatusSummaryRespT.
class ns1__MtaStatusSummaryRespT;

//  Forward declaration of class ns1__HfcStatusSummaryRespT.
class ns1__HfcStatusSummaryRespT;

//  Forward declaration of class ns1__CmStatusSummaryRespT.
class ns1__CmStatusSummaryRespT;

//  Forward declaration of class ns1__CurrentAlarmsRespT.
class ns1__CurrentAlarmsRespT;

//  Forward declaration of class ns1__HistoricalAlarmsRespT.
class ns1__HistoricalAlarmsRespT;

//  Forward declaration of class ns1__EventMessageT.
class ns1__EventMessageT;

/// "http://www.palmyrasys.com/webservices/CableAssurance":SystemTypeT is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns1__SystemTypeT' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns1__SystemTypeT
{
	ns1__SystemTypeT__EnterpriseServer,	///< xs:string value="EnterpriseServer"
	ns1__SystemTypeT__RegionServer,	///< xs:string value="RegionServer"
	ns1__SystemTypeT__MarketServer,	///< xs:string value="MarketServer"
	ns1__SystemTypeT__BladeServer,	///< xs:string value="BladeServer"
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ResourceTypeT is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns1__ResourceTypeT' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns1__ResourceTypeT
{
	ns1__ResourceTypeT__CMTS,	///< xs:string value="CMTS"
	ns1__ResourceTypeT__CMS,	///< xs:string value="CMS"
	ns1__ResourceTypeT__Channel,	///< xs:string value="Channel"
	ns1__ResourceTypeT__HFC,	///< xs:string value="HFC"
	ns1__ResourceTypeT__CM,	///< xs:string value="CM"
	ns1__ResourceTypeT__MTA,	///< xs:string value="MTA"
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":StatusColorT is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns1__StatusColorT' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns1__StatusColorT
{
	ns1__StatusColorT__Gray,	///< xs:string value="Gray"
	ns1__StatusColorT__Green,	///< xs:string value="Green"
	ns1__StatusColorT__Yellow,	///< xs:string value="Yellow"
	ns1__StatusColorT__Orange,	///< xs:string value="Orange"
	ns1__StatusColorT__Red,	///< xs:string value="Red"
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":SnmpVersionT is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns1__SnmpVersionT' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns1__SnmpVersionT
{
	ns1__SnmpVersionT__v1,	///< xs:string value="v1"
	ns1__SnmpVersionT__v2c,	///< xs:string value="v2c"
	ns1__SnmpVersionT__v3,	///< xs:string value="v3"
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ChannelTypeT is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns1__ChannelTypeT' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns1__ChannelTypeT
{
	ns1__ChannelTypeT__Upstream,	///< xs:string value="Upstream"
	ns1__ChannelTypeT__Downstream,	///< xs:string value="Downstream"
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":EndUserDeviceTypeT is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns1__EndUserDeviceTypeT' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns1__EndUserDeviceTypeT
{
	ns1__EndUserDeviceTypeT__CM,	///< xs:string value="CM"
	ns1__EndUserDeviceTypeT__eMTA,	///< xs:string value="eMTA"
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":UserAccessTypeT is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns1__UserAccessTypeT' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns1__UserAccessTypeT
{
	ns1__UserAccessTypeT__None,	///< xs:string value="None"
	ns1__UserAccessTypeT__Read,	///< xs:string value="Read"
	ns1__UserAccessTypeT__Write,	///< xs:string value="Write"
	ns1__UserAccessTypeT__Execute,	///< xs:string value="Execute"
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ApplicationDomainTypeT is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns1__ApplicationDomainTypeT' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns1__ApplicationDomainTypeT
{
	ns1__ApplicationDomainTypeT__Alarm,	///< xs:string value="Alarm"
	ns1__ApplicationDomainTypeT__CSR_x0020Portal,	///< xs:string value="CSR Portal"
	ns1__ApplicationDomainTypeT__System_x0020Administration,	///< xs:string value="System Administration"
	ns1__ApplicationDomainTypeT__User_x0020Administration,	///< xs:string value="User Administration"
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":EventTypeT is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns1__EventTypeT' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns1__EventTypeT
{
	ns1__EventTypeT__Add,	///< xs:string value="Add"
	ns1__EventTypeT__Delete,	///< xs:string value="Delete"
	ns1__EventTypeT__Update,	///< xs:string value="Update"
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":EventCategoryT is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'ns1__EventCategoryT' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum ns1__EventCategoryT
{
	ns1__EventCategoryT__Resource,	///< xs:string value="Resource"
	ns1__EventCategoryT__Configuration,	///< xs:string value="Configuration"
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":SnmpV2CAttributesT is a complexType.
class ns1__SnmpV2CAttributesT
{ public:
/// Element readCommnunity of type xs:string.
    std::string                          readCommnunity                 1;	///< Required element.
/// Element writeCommnunity of type xs:string.
    std::string*                         writeCommnunity               ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":GenericCountsT is a complexType.
class ns1__GenericCountsT
{ public:
/// Element totalCm of type xs:short.
    short                                totalCm                        1;	///< Required element.
/// Element onlineCm of type xs:short.
    short                                onlineCm                       1;	///< Required element.
/// Element totalMta of type xs:short.
    short                                totalMta                       1;	///< Required element.
/// Element availableMta of type xs:short.
    short                                availableMta                   1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":InputTimeT is a complexType.
class ns1__InputTimeT
{ public:
/// Element year of type xs:short.
    short                                year                           1;	///< Required element.
/// Element monthOfYear of type xs:short.
    short                                monthOfYear                    1;	///< Required element.
/// Element dayOfMonth of type xs:short.
    short                                dayOfMonth                     1;	///< Required element.
/// Element hourOfDay of type xs:short.
    short                                hourOfDay                      1;	///< Required element.
/// Element minuteOfHour of type xs:short.
    short                                minuteOfHour                   1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ResultBatchT is a complexType.
class ns1__ResultBatchT
{ public:
/// Element fromIndex of type xs:short.
    short                                fromIndex                      1;	///< Required element.
/// Element toIndex of type xs:short.
    short                                toIndex                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":TopoHierarchyKeyT is a complexType.
class ns1__TopoHierarchyKeyT
{ public:
/// Element regionId of type xs:integer.
    xsd__integer                         regionId                       1;	///< Required element.
/// Element marketId of type xs:integer.
    xsd__integer                         marketId                       1;	///< Required element.
/// Element bladeId of type xs:integer.
    xsd__integer                         bladeId                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":LocalSystemT is a complexType.
class ns1__LocalSystemT
{ public:
/// Element systemType of type "http://www.palmyrasys.com/webservices/CableAssurance":SystemTypeT.
    enum ns1__SystemTypeT                systemType                     1;	///< Required element.
/// Element systemName of type xs:string.
    std::string                          systemName                     1;	///< Required element.
/// Element parentHost of type xs:string.
    std::string                          parentHost                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":RegionT is a complexType.
class ns1__RegionT
{ public:
/// Element regionId of type xs:integer.
    xsd__integer                         regionId                       1;	///< Required element.
/// Element name of type xs:string.
    std::string                          name                           1;	///< Required element.
/// Element host of type xs:string.
    std::string                          host                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":MarketT is a complexType.
class ns1__MarketT
{ public:
/// Element regionId of type xs:integer.
    xsd__integer                         regionId                       1;	///< Required element.
/// Element marketId of type xs:integer.
    xsd__integer                         marketId                       1;	///< Required element.
/// Element name of type xs:string.
    std::string                          name                           1;	///< Required element.
/// Element host of type xs:string.
    std::string                          host                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":BladeT is a complexType.
class ns1__BladeT
{ public:
/// Element regionId of type xs:integer.
    xsd__integer                         regionId                       1;	///< Required element.
/// Element marketId of type xs:integer.
    xsd__integer                         marketId                       1;	///< Required element.
/// Element bladeId of type xs:integer.
    xsd__integer                         bladeId                        1;	///< Required element.
/// Element name of type xs:string.
    std::string                          name                           1;	///< Required element.
/// Element host of type xs:string.
    std::string                          host                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CmsT is a complexType.
class ns1__CmsT
{ public:
/// Element topologyKey of type "http://www.palmyrasys.com/webservices/CableAssurance":TopoHierarchyKeyT.
    ns1__TopoHierarchyKeyT*              topologyKey                    1;	///< Required element.
/// Element cmsResId of type xs:integer.
    xsd__integer                         cmsResId                       1;	///< Required element.
/// Element cmsName of type xs:string.
    std::string                          cmsName                        1;	///< Required element.
/// Element cmsType of type xs:string.
    std::string                          cmsType                        1;	///< Required element.
/// Element cmsSubType of type xs:string.
    std::string                          cmsSubType                     1;	///< Required element.
/// Element cmsHost of type xs:string.
    std::string                          cmsHost                        1;	///< Required element.
/// Element loginName of type xs:string.
    std::string                          loginName                      1;	///< Required element.
/// Element loginPassword of type xs:string.
    std::string                          loginPassword                  1;	///< Required element.
/// Element statusColor of type "http://www.palmyrasys.com/webservices/CableAssurance":StatusColorT.
    enum ns1__StatusColorT               statusColor                    1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CmtsT is a complexType.
class ns1__CmtsT
{ public:
/// Element topologyKey of type "http://www.palmyrasys.com/webservices/CableAssurance":TopoHierarchyKeyT.
    ns1__TopoHierarchyKeyT*              topologyKey                    1;	///< Required element.
/// Element cmtsResId of type xs:integer.
    xsd__integer                         cmtsResId                      1;	///< Required element.
/// Element cmtsName of type xs:string.
    std::string                          cmtsName                       1;	///< Required element.
/// Element cmtsHost of type xs:string.
    std::string                          cmtsHost                       1;	///< Required element.
/// Element cmtsSnmpVersion of type "http://www.palmyrasys.com/webservices/CableAssurance":SnmpVersionT.
    enum ns1__SnmpVersionT               cmtsSnmpVersion                1;	///< Required element.
/// Element cmSnmpVersion of type "http://www.palmyrasys.com/webservices/CableAssurance":SnmpVersionT.
    enum ns1__SnmpVersionT               cmSnmpVersion                  1;	///< Required element.
/// Element mtaSnmpVersion of type "http://www.palmyrasys.com/webservices/CableAssurance":SnmpVersionT.
    enum ns1__SnmpVersionT               mtaSnmpVersion                 1;	///< Required element.
/// Element statusColor of type "http://www.palmyrasys.com/webservices/CableAssurance":StatusColorT.
    enum ns1__StatusColorT               statusColor                    1;	///< Required element.
/// Element counts of type "http://www.palmyrasys.com/webservices/CableAssurance":GenericCountsT.
    ns1__GenericCountsT*                 counts                        ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ChannelT is a complexType.
class ns1__ChannelT
{ public:
/// Element topologyKey of type "http://www.palmyrasys.com/webservices/CableAssurance":TopoHierarchyKeyT.
    ns1__TopoHierarchyKeyT*              topologyKey                    1;	///< Required element.
/// Element channelResId of type xs:integer.
    xsd__integer                         channelResId                   1;	///< Required element.
/// Element cmtsResId of type xs:integer.
    xsd__integer                         cmtsResId                      1;	///< Required element.
/// Element channelName of type xs:string.
    std::string                          channelName                    1;	///< Required element.
/// Element channelType of type "http://www.palmyrasys.com/webservices/CableAssurance":ChannelTypeT.
    enum ns1__ChannelTypeT               channelType                    1;	///< Required element.
/// Element statusColor of type "http://www.palmyrasys.com/webservices/CableAssurance":StatusColorT.
    enum ns1__StatusColorT               statusColor                    1;	///< Required element.
/// Element counts of type "http://www.palmyrasys.com/webservices/CableAssurance":GenericCountsT.
    ns1__GenericCountsT*                 counts                        ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":HfcT is a complexType.
class ns1__HfcT
{ public:
/// Element topologyKey of type "http://www.palmyrasys.com/webservices/CableAssurance":TopoHierarchyKeyT.
    ns1__TopoHierarchyKeyT*              topologyKey                    1;	///< Required element.
/// Element hfcResId of type xs:integer.
    xsd__integer                         hfcResId                       1;	///< Required element.
/// Element cmtsResId of type xs:integer.
    xsd__integer                         cmtsResId                      1;	///< Required element.
/// Element hfcName of type xs:string.
    std::string                          hfcName                        1;	///< Required element.
/// Element statusColor of type "http://www.palmyrasys.com/webservices/CableAssurance":StatusColorT.
    enum ns1__StatusColorT               statusColor                    1;	///< Required element.
/// Element counts of type "http://www.palmyrasys.com/webservices/CableAssurance":GenericCountsT.
    ns1__GenericCountsT*                 counts                        ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CableModemT is a complexType.
class ns1__CableModemT
{ public:
/// Element topologyKey of type "http://www.palmyrasys.com/webservices/CableAssurance":TopoHierarchyKeyT.
    ns1__TopoHierarchyKeyT*              topologyKey                    1;	///< Required element.
/// Element cmResId of type xs:integer.
    xsd__integer                         cmResId                        1;	///< Required element.
/// Element cmtsResId of type xs:integer.
    xsd__integer                         cmtsResId                      1;	///< Required element.
/// Element upChannelResId of type xs:integer.
    xsd__integer                         upChannelResId                 1;	///< Required element.
/// Element downChannelResId of type xs:integer.
    xsd__integer                         downChannelResId               1;	///< Required element.
/// Element hfcResId of type xs:integer.
    xsd__integer                         hfcResId                       1;	///< Required element.
/// Element macAddress of type xs:string.
    std::string                          macAddress                     1;	///< Required element.
/// Element statusColor of type "http://www.palmyrasys.com/webservices/CableAssurance":StatusColorT.
    enum ns1__StatusColorT               statusColor                    1;	///< Required element.
/// Element cmStatus of type xs:string.
    std::string                          cmStatus                       1;	///< Required element.
/// Element host of type xs:string.
    std::string                          host                           1;	///< Required element.
/// Element fqdn of type xs:string.
    std::string                          fqdn                           1;	///< Required element.
/// Element cmIndex of type xs:integer.
    xsd__integer                         cmIndex                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":EmtaT is a complexType.
class ns1__EmtaT
{ public:
/// Element topologyKey of type "http://www.palmyrasys.com/webservices/CableAssurance":TopoHierarchyKeyT.
    ns1__TopoHierarchyKeyT*              topologyKey                    1;	///< Required element.
/// Element emtaResId of type xs:integer.
    xsd__integer                         emtaResId                      1;	///< Required element.
/// Element cmResId of type xs:integer.
    xsd__integer*                        cmResId                       ;	///< Nullable pointer.
/// Element macAddress of type xs:string.
    std::string                          macAddress                     1;	///< Required element.
/// Element statusColor of type "http://www.palmyrasys.com/webservices/CableAssurance":StatusColorT.
    enum ns1__StatusColorT               statusColor                    1;	///< Required element.
/// Element host of type xs:string.
    std::string                          host                           1;	///< Required element.
/// Element fqdn of type xs:string.
    std::string                          fqdn                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":EmtaSecondaryT is a complexType.
class ns1__EmtaSecondaryT
{ public:
/// Element phone1 of type xs:string.
    std::string                          phone1                         1;	///< Required element.
/// Element phone2 of type xs:string.
    std::string                          phone2                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":AbstractAlarmT is a complexType.
class ns1__AbstractAlarmT
{ public:
/// Element topologyKey of type "http://www.palmyrasys.com/webservices/CableAssurance":TopoHierarchyKeyT.
    ns1__TopoHierarchyKeyT*              topologyKey                    1;	///< Required element.
/// Element alarmId of type xs:integer.
    xsd__integer                         alarmId                        1;	///< Required element.
/// Element resourceId of type xs:integer.
    xsd__integer                         resourceId                     1;	///< Required element.
/// Element resourceName of type xs:string.
    std::string                          resourceName                   1;	///< Required element.
/// Element alarmTime of type xs:integer.
    xsd__integer                         alarmTime                      1;	///< Required element.
/// Element alarmTimeUSec of type xs:integer.
    xsd__integer                         alarmTimeUSec                  1;	///< Required element.
/// Element soakDuration of type xs:short.
    short                                soakDuration                   1;	///< Required element.
/// Element alarmState of type xs:string.
    std::string                          alarmState                     1;	///< Required element.
/// Element alarmType of type xs:string.
    std::string                          alarmType                      1;	///< Required element.
/// Element alarmSubType of type xs:string.
    std::string                          alarmSubType                   1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CurrentAlarmT is a complexType.
class ns1__CurrentAlarmT
{ public:
/// Element abstractAlarm of type "http://www.palmyrasys.com/webservices/CableAssurance":AbstractAlarmT.
    ns1__AbstractAlarmT*                 abstractAlarm                  1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CurrentAlarmDetailsT is a complexType.
class ns1__CurrentAlarmDetailsT
{ public:
/// Element currentAlarm of type "http://www.palmyrasys.com/webservices/CableAssurance":CurrentAlarmT.
    ns1__CurrentAlarmT*                  currentAlarm                   1;	///< Required element.
/// Element alarmDetails of type xs:string.
    std::string                          alarmDetails                   1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":HistoricalAlarmT is a complexType.
class ns1__HistoricalAlarmT
{ public:
/// Element abstractAlarm of type "http://www.palmyrasys.com/webservices/CableAssurance":AbstractAlarmT.
    ns1__AbstractAlarmT*                 abstractAlarm                  1;	///< Required element.
/// Element clearedUser of type xs:string.
    std::string                          clearedUser                    1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":HistoricalAlarmDetailsT is a complexType.
class ns1__HistoricalAlarmDetailsT
{ public:
/// Element historicalAlarm of type "http://www.palmyrasys.com/webservices/CableAssurance":HistoricalAlarmT.
    ns1__HistoricalAlarmT*               historicalAlarm                1;	///< Required element.
/// Element alarmDetails of type xs:string.
    std::string                          alarmDetails                   1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":AlarmHistoryT is a complexType.
class ns1__AlarmHistoryT
{ public:
/// Element topologyKey of type "http://www.palmyrasys.com/webservices/CableAssurance":TopoHierarchyKeyT.
    ns1__TopoHierarchyKeyT*              topologyKey                    1;	///< Required element.
/// Element alarmId of type xs:integer.
    xsd__integer                         alarmId                        1;	///< Required element.
/// Element timeStamp of type xs:string.
    std::string                          timeStamp                      1;	///< Required element.
/// Element alarmState of type xs:string.
    std::string                          alarmState                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":MappedEuDevicesT is a complexType.
class ns1__MappedEuDevicesT
{ public:
/// Element cm of type "http://www.palmyrasys.com/webservices/CableAssurance":CableModemT.
    ns1__CableModemT*                    cm                            ;	///< Nullable pointer.
/// Element mta of type "http://www.palmyrasys.com/webservices/CableAssurance":EmtaT.
    ns1__EmtaT*                          mta                           ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ScrollPageT is a complexType.
class ns1__ScrollPageT
{ public:
/// Element batch of type "http://www.palmyrasys.com/webservices/CableAssurance":ResultBatchT.
    ns1__ResultBatchT*                   batch                          1;	///< Required element.
/// Element start of type xs:string.
    std::string                          start                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":QueryStateT is a complexType.
class ns1__QueryStateT
{ public:
/// Element topologyKey of type "http://www.palmyrasys.com/webservices/CableAssurance":TopoHierarchyKeyT.
    ns1__TopoHierarchyKeyT*              topologyKey                   ;	///< Nullable pointer.
/// Element pages of type "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfScrollPageT.
    ArrayOfScrollPageT*                  pages                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":GenericCountsHistoryT is a complexType.
class ns1__GenericCountsHistoryT
{ public:
/// Element counts of type "http://www.palmyrasys.com/webservices/CableAssurance":GenericCountsT.
    ns1__GenericCountsT*                 counts                         1;	///< Required element.
/// Element timeSec of type xs:integer.
    xsd__integer                         timeSec                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CmStatusT is a complexType.
class ns1__CmStatusT
{ public:
/// Element docsisState of type xs:short.
    short                                docsisState                    1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CmStatusHistoryT is a complexType.
class ns1__CmStatusHistoryT
{ public:
/// Element cmStatus of type "http://www.palmyrasys.com/webservices/CableAssurance":CmStatusT.
    ns1__CmStatusT*                      cmStatus                       1;	///< Required element.
/// Element timeSec of type xs:integer.
    xsd__integer                         timeSec                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":MtaAvailabilityT is a complexType.
class ns1__MtaAvailabilityT
{ public:
/// Element available of type xs:short.
    short                                available                      1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":MtaAvailabilityHistoryT is a complexType.
class ns1__MtaAvailabilityHistoryT
{ public:
/// Element available of type "http://www.palmyrasys.com/webservices/CableAssurance":MtaAvailabilityT.
    ns1__MtaAvailabilityT*               available                      1;	///< Required element.
/// Element timeSec of type xs:integer.
    xsd__integer                         timeSec                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":MtaProvStatusT is a complexType.
class ns1__MtaProvStatusT
{ public:
/// Element provState of type xs:short.
    short                                provState                      1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":MtaProvStatusHistoryT is a complexType.
class ns1__MtaProvStatusHistoryT
{ public:
/// Element provStatus of type "http://www.palmyrasys.com/webservices/CableAssurance":MtaProvStatusT.
    ns1__MtaProvStatusT*                 provStatus                     1;	///< Required element.
/// Element timeSec of type xs:integer.
    xsd__integer                         timeSec                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":MtaPingStatusT is a complexType.
class ns1__MtaPingStatusT
{ public:
/// Element pingState of type xs:short.
    short                                pingState                      1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":MtaPingStatusHistoryT is a complexType.
class ns1__MtaPingStatusHistoryT
{ public:
/// Element pingStatus of type "http://www.palmyrasys.com/webservices/CableAssurance":MtaPingStatusT.
    ns1__MtaPingStatusT*                 pingStatus                     1;	///< Required element.
/// Element timeSec of type xs:integer.
    xsd__integer                         timeSec                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CmPerformanceT is a complexType.
class ns1__CmPerformanceT
{ public:
/// Element downstreamSNR of type xs:short.
    short                                downstreamSNR                  1;	///< Required element.
/// Element downstreamPower of type xs:short.
    short                                downstreamPower                1;	///< Required element.
/// Element upstreamPower of type xs:short.
    short                                upstreamPower                  1;	///< Required element.
/// Element t1Timeouts of type xs:short.
    short                                t1Timeouts                     1;	///< Required element.
/// Element t2Timeouts of type xs:short.
    short                                t2Timeouts                     1;	///< Required element.
/// Element t3Timeouts of type xs:short.
    short                                t3Timeouts                     1;	///< Required element.
/// Element t4Timeouts of type xs:short.
    short                                t4Timeouts                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CmPerformanceHistoryT is a complexType.
class ns1__CmPerformanceHistoryT
{ public:
/// Element cmPerformance of type "http://www.palmyrasys.com/webservices/CableAssurance":CmPerformanceT.
    ns1__CmPerformanceT*                 cmPerformance                  1;	///< Required element.
/// Element timeSec of type xs:integer.
    xsd__integer                         timeSec                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CmCurrentPerformanceT is a complexType.
class ns1__CmCurrentPerformanceT
{ public:
/// Element cmPerformance of type "http://www.palmyrasys.com/webservices/CableAssurance":CmPerformanceT.
    ns1__CmPerformanceT*                 cmPerformance                  1;	///< Required element.
/// Element recordedTime of type xs:string.
    std::string                          recordedTime                   1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CTECustomerT is a complexType.
class ns1__CTECustomerT
{ public:
/// Element accountNumber of type xs:string.
    std::string*                         accountNumber                 ;	///< Nullable pointer.
/// Element accountActive of type xs:short.
    short*                               accountActive                 ;	///< Nullable pointer.
/// Element firstName of type xs:string.
    std::string                          firstName                      1;	///< Required element.
/// Element lastName of type xs:string.
    std::string                          lastName                       1;	///< Required element.
/// Element street1 of type xs:string.
    std::string                          street1                        1;	///< Required element.
/// Element street2 of type xs:string.
    std::string*                         street2                       ;	///< Nullable pointer.
/// Element city of type xs:string.
    std::string                          city                           1;	///< Required element.
/// Element state of type xs:string.
    std::string                          state                          1;	///< Required element.
/// Element zip of type xs:string.
    std::string                          zip                            1;	///< Required element.
/// Element phone1 of type xs:string.
    std::string                          phone1                         1;	///< Required element.
/// Element phone2 of type xs:string.
    std::string*                         phone2                        ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CTEAbstractMacT is a complexType.
class ns1__CTEAbstractMacT
{ public:
/// Element mac of type xs:string.
    std::string                          mac                            1;	///< Required element.
/// Element fqdn of type xs:string.
    std::string*                         fqdn                          ;	///< Nullable pointer.
/// Element host of type xs:string.
    std::string*                         host                          ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CTEAbstractNameT is a complexType.
class ns1__CTEAbstractNameT
{ public:
/// Element name of type xs:string.
    std::string                          name                           1;	///< Required element.
/// Element fqdn of type xs:string.
    std::string*                         fqdn                          ;	///< Nullable pointer.
/// Element host of type xs:string.
    std::string*                         host                          ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CTEDataT is a complexType.
class ns1__CTEDataT
{ public:
/// Element customer of type "http://www.palmyrasys.com/webservices/CableAssurance":CTECustomerT.
    ns1__CTECustomerT*                   customer                       1;	///< Required element.
/// Element cm of type "http://www.palmyrasys.com/webservices/CableAssurance":CTEAbstractMacT.
    ns1__CTEAbstractMacT*                cm                            ;	///< Nullable pointer.
/// Element mta of type "http://www.palmyrasys.com/webservices/CableAssurance":CTEAbstractMacT.
    ns1__CTEAbstractMacT*                mta                           ;	///< Nullable pointer.
/// Element cmts of type "http://www.palmyrasys.com/webservices/CableAssurance":CTEAbstractNameT.
    ns1__CTEAbstractNameT*               cmts                          ;	///< Nullable pointer.
/// Element cms of type "http://www.palmyrasys.com/webservices/CableAssurance":CTEAbstractNameT.
    ns1__CTEAbstractNameT*               cms                           ;	///< Nullable pointer.
/// Element hfcName of type xs:string.
    std::string*                         hfcName                       ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CTEQueryInputT is a complexType.
class ns1__CTEQueryInputT
{ public:
/// Element accountNumber of type xs:string.
    std::string*                         accountNumber                 ;	///< Nullable pointer.
/// Element firstName of type xs:string.
    std::string*                         firstName                     ;	///< Nullable pointer.
/// Element lastName of type xs:string.
    std::string*                         lastName                      ;	///< Nullable pointer.
/// Element primaryPhone of type xs:string.
    std::string*                         primaryPhone                  ;	///< Nullable pointer.
/// Element cmMac of type xs:string.
    std::string*                         cmMac                         ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CMSLineT is a complexType.
class ns1__CMSLineT
{ public:
/// Element number of type xs:string.
    std::string                          number                         1;	///< Required element.
/// Element status of type xs:string.
    std::string                          status                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CMSResultT is a complexType.
class ns1__CMSResultT
{ public:
/// Element line1 of type "http://www.palmyrasys.com/webservices/CableAssurance":CMSLineT.
    ns1__CMSLineT*                       line1                          1;	///< Required element.
/// Element line2 of type "http://www.palmyrasys.com/webservices/CableAssurance":CMSLineT.
    ns1__CMSLineT*                       line2                         ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":UserAccessT is a complexType.
class ns1__UserAccessT
{ public:
/// Element type of type "http://www.palmyrasys.com/webservices/CableAssurance":UserAccessTypeT.
    enum ns1__UserAccessTypeT            type                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ApplicationDomainT is a complexType.
class ns1__ApplicationDomainT
{ public:
/// Element type of type "http://www.palmyrasys.com/webservices/CableAssurance":ApplicationDomainTypeT.
    enum ns1__ApplicationDomainTypeT     type                           1;	///< Required element.
/// Element accessRights of type "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfUserAccessT.
    ArrayOfUserAccessT*                  accessRights                  ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":RoleT is a complexType.
class ns1__RoleT
{ public:
/// Element roleName of type xs:string.
    std::string                          roleName                       1;	///< Required element.
/// Element domains of type "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfApplicationDomainT.
    ArrayOfApplicationDomainT*           domains                       ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":UserT is a complexType.
class ns1__UserT
{ public:
/// Element userId of type xs:string.
    std::string                          userId                         1;	///< Required element.
/// Element firstName of type xs:string.
    std::string                          firstName                      1;	///< Required element.
/// Element lastName of type xs:string.
    std::string                          lastName                       1;	///< Required element.
/// Element middleInitial of type xs:string.
    std::string*                         middleInitial                 ;	///< Nullable pointer.
/// Element location of type xs:string.
    std::string                          location                       1;	///< Required element.
/// Element loginName of type xs:string.
    std::string                          loginName                      1;	///< Required element.
/// Element loginPassword of type xs:string.
    std::string*                         loginPassword                 ;	///< Nullable pointer.
/// Element isActive of type xs:short.
    short*                               isActive                      ;	///< Nullable pointer.
/// Element roleName of type xs:string.
    std::string*                         roleName                      ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":PollingIntervalsT is a complexType.
class ns1__PollingIntervalsT
{ public:
/// Element cmtsPollInterval of type xs:string.
    std::string                          cmtsPollInterval               1;	///< Required element.
/// Element cmPollInterval of type xs:string.
    std::string                          cmPollInterval                 1;	///< Required element.
/// Element mtaPollInterval of type xs:string.
    std::string                          mtaPollInterval                1;	///< Required element.
/// Element mtaPingInterval of type xs:string.
    std::string                          mtaPingInterval                1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":AlarmBasedStatusThresholdT is a complexType.
class ns1__AlarmBasedStatusThresholdT
{ public:
/// Element color of type "http://www.palmyrasys.com/webservices/CableAssurance":StatusColorT.
    enum ns1__StatusColorT               color                          1;	///< Required element.
/// Element alarmType of type xs:string.
    std::string                          alarmType                      1;	///< Required element.
/// Element alarmState of type xs:string.
    std::string                          alarmState                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":AggregateStatusThresholdT is a complexType.
class ns1__AggregateStatusThresholdT
{ public:
/// Element color of type "http://www.palmyrasys.com/webservices/CableAssurance":StatusColorT.
    enum ns1__StatusColorT               color                          1;	///< Required element.
/// Element childColor of type "http://www.palmyrasys.com/webservices/CableAssurance":StatusColorT.
    enum ns1__StatusColorT               childColor                     1;	///< Required element.
/// Element thresholdPercent of type xs:string.
    std::string                          thresholdPercent               1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":MtaStatusThresholdT is a complexType.
class ns1__MtaStatusThresholdT
{ public:
/// Element alarmThreshArray of type "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfAlarmStatusThresholdT.
    ArrayOfAlarmStatusThresholdT*        alarmThreshArray               1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":HfcStatusThresholdT is a complexType.
class ns1__HfcStatusThresholdT
{ public:
/// Element alarmThreshArray of type "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfAlarmStatusThresholdT.
    ArrayOfAlarmStatusThresholdT*        alarmThreshArray               1;	///< Required element.
/// Element aggThreshArray of type "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfAggregateStatusThresholdT.
    ArrayOfAggregateStatusThresholdT*    aggThreshArray                 1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ChannelStatusThresholdT is a complexType.
class ns1__ChannelStatusThresholdT
{ public:
/// Element alarmThreshArray of type "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfAlarmStatusThresholdT.
    ArrayOfAlarmStatusThresholdT*        alarmThreshArray               1;	///< Required element.
/// Element aggThreshArray of type "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfAggregateStatusThresholdT.
    ArrayOfAggregateStatusThresholdT*    aggThreshArray                 1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CmtsStatusThresholdT is a complexType.
class ns1__CmtsStatusThresholdT
{ public:
/// Element alarmThreshArray of type "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfAlarmStatusThresholdT.
    ArrayOfAlarmStatusThresholdT*        alarmThreshArray               1;	///< Required element.
/// Element aggThreshArray of type "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfAggregateStatusThresholdT.
    ArrayOfAggregateStatusThresholdT*    aggThreshArray                 1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CmsStatusThresholdT is a complexType.
class ns1__CmsStatusThresholdT
{ public:
/// Element alarmThreshArray of type "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfAlarmStatusThresholdT.
    ArrayOfAlarmStatusThresholdT*        alarmThreshArray               1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":SoakWindowT is a complexType.
class ns1__SoakWindowT
{ public:
/// Element soakWindow_1_StartTime of type xs:string.
    std::string                          soakWindow_USCORE1_USCOREStartTime 1;	///< Required element.
/// Element soakWindow_1_Duration of type xs:string.
    std::string                          soakWindow_USCORE1_USCOREDuration 1;	///< Required element.
/// Element soakWindow_2_StartTime of type xs:string.
    std::string                          soakWindow_USCORE2_USCOREStartTime 1;	///< Required element.
/// Element soakWindow_2_Duration of type xs:string.
    std::string                          soakWindow_USCORE2_USCOREDuration 1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":AggregateCmOfflineTresholdT is a complexType.
class ns1__AggregateCmOfflineTresholdT
{ public:
/// Element percentCmOffline_1 of type xs:string.
    std::string                          percentCmOffline_USCORE1       1;	///< Required element.
/// Element maxCm_1 of type xs:string.
    std::string                          maxCm_USCORE1                  1;	///< Required element.
/// Element percentCmOffline_2 of type xs:string.
    std::string                          percentCmOffline_USCORE2       1;	///< Required element.
/// Element maxCm_2 of type xs:string.
    std::string                          maxCm_USCORE2                  1;	///< Required element.
/// Element detectionWindow of type xs:string.
    std::string                          detectionWindow                1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":AggregateMtaTresholdT is a complexType.
class ns1__AggregateMtaTresholdT
{ public:
/// Element mtaThresholdCount of type xs:string.
    std::string                          mtaThresholdCount              1;	///< Required element.
/// Element detectionWindow of type xs:string.
    std::string                          detectionWindow                1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":HfcPowerTresholdT is a complexType.
class ns1__HfcPowerTresholdT
{ public:
/// Element thresholdCount of type xs:string.
    std::string                          thresholdCount                 1;	///< Required element.
/// Element detectionWindow of type xs:string.
    std::string                          detectionWindow                1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":HfcAlarmConfigT is a complexType.
class ns1__HfcAlarmConfigT
{ public:
/// Element cmThresold of type "http://www.palmyrasys.com/webservices/CableAssurance":AggregateCmOfflineTresholdT.
    ns1__AggregateCmOfflineTresholdT*    cmThresold                     1;	///< Required element.
/// Element cmSoakWindow of type "http://www.palmyrasys.com/webservices/CableAssurance":SoakWindowT.
    ns1__SoakWindowT*                    cmSoakWindow                   1;	///< Required element.
/// Element mtaThresold of type "http://www.palmyrasys.com/webservices/CableAssurance":AggregateMtaTresholdT.
    ns1__AggregateMtaTresholdT*          mtaThresold                    1;	///< Required element.
/// Element mtaSoakWindow of type "http://www.palmyrasys.com/webservices/CableAssurance":SoakWindowT.
    ns1__SoakWindowT*                    mtaSoakWindow                  1;	///< Required element.
/// Element powerThresold of type "http://www.palmyrasys.com/webservices/CableAssurance":HfcPowerTresholdT.
    ns1__HfcPowerTresholdT*              powerThresold                  1;	///< Required element.
/// Element powerSoakWindow of type "http://www.palmyrasys.com/webservices/CableAssurance":SoakWindowT.
    ns1__SoakWindowT*                    powerSoakWindow                1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":AlarmTypeConfigT is a complexType.
class ns1__AlarmTypeConfigT
{ public:
/// Element alarmType of type xs:string.
    std::string                          alarmType                      1;	///< Required element.
/// Element soakWindow of type "http://www.palmyrasys.com/webservices/CableAssurance":SoakWindowT.
    ns1__SoakWindowT*                    soakWindow                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":MtaAlarmConfigT is a complexType.
class ns1__MtaAlarmConfigT
{ public:
/// Element alarmTypes of type "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfAlarmTypeConfigT.
    ArrayOfAlarmTypeConfigT*             alarmTypes                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CmtsAlarmConfigT is a complexType.
class ns1__CmtsAlarmConfigT
{ public:
/// Element cmtsDown of type "http://www.palmyrasys.com/webservices/CableAssurance":AlarmTypeConfigT.
    ns1__AlarmTypeConfigT*               cmtsDown                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CmsAlarmConfigT is a complexType.
class ns1__CmsAlarmConfigT
{ public:
/// Element cmsLossOfComm of type "http://www.palmyrasys.com/webservices/CableAssurance":AlarmTypeConfigT.
    ns1__AlarmTypeConfigT*               cmsLossOfComm                  1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CmPerformanceConfigT is a complexType.
class ns1__CmPerformanceConfigT
{ public:
/// Element downstreamSnrLower of type xs:string.
    std::string                          downstreamSnrLower             1;	///< Required element.
/// Element downstreamPowerLower of type xs:string.
    std::string                          downstreamPowerLower           1;	///< Required element.
/// Element downstreamPowerUpper of type xs:string.
    std::string                          downstreamPowerUpper           1;	///< Required element.
/// Element upstreamPowerLower of type xs:string.
    std::string                          upstreamPowerLower             1;	///< Required element.
/// Element upstreamPowerUpper of type xs:string.
    std::string                          upstreamPowerUpper             1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ConfigDownloadT is a complexType.
class ns1__ConfigDownloadT
{ public:
/// Element cmPerfCfg of type "http://www.palmyrasys.com/webservices/CableAssurance":CmPerformanceConfigT.
    ns1__CmPerformanceConfigT*           cmPerfCfg                     ;	///< Nullable pointer.
/// Element cmsAlarmCfg of type "http://www.palmyrasys.com/webservices/CableAssurance":CmsAlarmConfigT.
    ns1__CmsAlarmConfigT*                cmsAlarmCfg                   ;	///< Nullable pointer.
/// Element cmtsAlarmCfg of type "http://www.palmyrasys.com/webservices/CableAssurance":CmtsAlarmConfigT.
    ns1__CmtsAlarmConfigT*               cmtsAlarmCfg                  ;	///< Nullable pointer.
/// Element mtaAlarmCfg of type "http://www.palmyrasys.com/webservices/CableAssurance":MtaAlarmConfigT.
    ns1__MtaAlarmConfigT*                mtaAlarmCfg                   ;	///< Nullable pointer.
/// Element hfcAlarmCfg of type "http://www.palmyrasys.com/webservices/CableAssurance":HfcAlarmConfigT.
    ns1__HfcAlarmConfigT*                hfcAlarmCfg                   ;	///< Nullable pointer.
/// Element pollingIntervals of type "http://www.palmyrasys.com/webservices/CableAssurance":PollingIntervalsT.
    ns1__PollingIntervalsT*              pollingIntervals              ;	///< Nullable pointer.
/// Element userAccessRights of type "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfUserAccessT.
    ArrayOfUserAccessT*                  userAccessRights              ;	///< Nullable pointer.
/// Element applicationDomains of type "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfApplicationDomainT.
    ArrayOfApplicationDomainT*           applicationDomains            ;	///< Nullable pointer.
/// Element roles of type "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfRoleT.
    ArrayOfRoleT*                        roles                         ;	///< Nullable pointer.
/// Element users of type "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfUserT.
    ArrayOfUserT*                        users                         ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CmtsCmDataT is a complexType.
class ns1__CmtsCmDataT
{ public:
/// Element cmIpAddress of type xs:string.
    std::string                          cmIpAddress                    1;	///< Required element.
/// Element cmMac of type xs:string.
    std::string                          cmMac                          1;	///< Required element.
/// Element upstreamChannelIndex of type xs:string.
    std::string                          upstreamChannelIndex           1;	///< Required element.
/// Element downstreamChannelIndex of type xs:string.
    std::string                          downstreamChannelIndex         1;	///< Required element.
/// Element cmIndex of type xs:string.
    std::string                          cmIndex                        1;	///< Required element.
/// Element cmStatus of type xs:string.
    std::string                          cmStatus                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CmDataT is a complexType.
class ns1__CmDataT
{ public:
/// Element mac of type xs:string.
    std::string                          mac                            1;	///< Required element.
/// Element host of type xs:string.
    std::string                          host                           1;	///< Required element.
/// Element cmIndex of type xs:string.
    std::string                          cmIndex                        1;	///< Required element.
/// Element downstreamSNR of type xs:string.
    std::string                          downstreamSNR                  1;	///< Required element.
/// Element downstreamPower of type xs:string.
    std::string                          downstreamPower                1;	///< Required element.
/// Element upstreamPower of type xs:string.
    std::string                          upstreamPower                  1;	///< Required element.
/// Element t1Count of type xs:string.
    std::string                          t1Count                        1;	///< Required element.
/// Element t2Count of type xs:string.
    std::string                          t2Count                        1;	///< Required element.
/// Element t3Count of type xs:string.
    std::string                          t3Count                        1;	///< Required element.
/// Element t4Count of type xs:string.
    std::string                          t4Count                        1;	///< Required element.
/// Element field1 of type xs:string.
    std::string*                         field1                        ;	///< Nullable pointer.
/// Element field2 of type xs:string.
    std::string*                         field2                        ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":MtaDataT is a complexType.
class ns1__MtaDataT
{ public:
/// Element provStatus of type xs:string.
    std::string                          provStatus                     1;	///< Required element.
/// Element provCounter of type xs:string.
    std::string                          provCounter                    1;	///< Required element.
/// Element pingStatus of type xs:string.
    std::string*                         pingStatus                    ;	///< Nullable pointer.
/// Element batteryStatus1 of type xs:string.
    std::string*                         batteryStatus1                ;	///< Nullable pointer.
/// Element batteryStatus2 of type xs:string.
    std::string*                         batteryStatus2                ;	///< Nullable pointer.
/// Element field1 of type xs:string.
    std::string*                         field1                        ;	///< Nullable pointer.
/// Element field2 of type xs:string.
    std::string*                         field2                        ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":StatusSummaryT is a complexType.
class ns1__StatusSummaryT
{ public:
/// Element topologyKey of type "http://www.palmyrasys.com/webservices/CableAssurance":TopoHierarchyKeyT.
    ns1__TopoHierarchyKeyT*              topologyKey                   ;	///< Nullable pointer.
/// Element resId of type xs:integer.
    xsd__integer                         resId                          1;	///< Required element.
/// Element name of type xs:string.
    std::string                          name                           1;	///< Required element.
/// Element sumRedStatusTime of type xs:integer.
    xsd__integer                         sumRedStatusTime               1;	///< Required element.
/// Element sumGreenStatusTime of type xs:integer.
    xsd__integer                         sumGreenStatusTime             1;	///< Required element.
/// Element sumStateChanges of type xs:short.
    short                                sumStateChanges                1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":HfcStatusSummaryT is a complexType.
class ns1__HfcStatusSummaryT
{ public:
/// Element statusSummary of type "http://www.palmyrasys.com/webservices/CableAssurance":StatusSummaryT.
    ns1__StatusSummaryT*                 statusSummary                  1;	///< Required element.
/// Element cmtsResId of type xs:integer.
    xsd__integer                         cmtsResId                      1;	///< Required element.
/// Element cmtsName of type xs:string.
    std::string                          cmtsName                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":MtaStatusSummaryT is a complexType.
class ns1__MtaStatusSummaryT
{ public:
/// Element statusSummary of type "http://www.palmyrasys.com/webservices/CableAssurance":StatusSummaryT.
    ns1__StatusSummaryT*                 statusSummary                  1;	///< Required element.
/// Element cmtsResId of type xs:integer.
    xsd__integer                         cmtsResId                      1;	///< Required element.
/// Element cmtsName of type xs:string.
    std::string                          cmtsName                       1;	///< Required element.
/// Element hfcResId of type xs:integer.
    xsd__integer                         hfcResId                       1;	///< Required element.
/// Element hfcName of type xs:string.
    std::string                          hfcName                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CmStatusSummaryT is a complexType.
class ns1__CmStatusSummaryT
{ public:
/// Element statusSummary of type "http://www.palmyrasys.com/webservices/CableAssurance":StatusSummaryT.
    ns1__StatusSummaryT*                 statusSummary                  1;	///< Required element.
/// Element cmtsResId of type xs:integer.
    xsd__integer                         cmtsResId                      1;	///< Required element.
/// Element cmtsName of type xs:string.
    std::string                          cmtsName                       1;	///< Required element.
/// Element hfcResId of type xs:integer.
    xsd__integer                         hfcResId                       1;	///< Required element.
/// Element hfcName of type xs:string.
    std::string                          hfcName                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":MtaStatusSummaryRespT is a complexType.
class ns1__MtaStatusSummaryRespT
{ public:
/// Element mtaData of type "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfMtaStatusSummaryT.
    ArrayOfMtaStatusSummaryT*            mtaData                        1;	///< Required element.
/// Element queryState of type "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfQueryStateT.
    ArrayOfQueryStateT*                  queryState                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":HfcStatusSummaryRespT is a complexType.
class ns1__HfcStatusSummaryRespT
{ public:
/// Element hfcData of type "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfHfcStatusSummaryT.
    ArrayOfHfcStatusSummaryT*            hfcData                        1;	///< Required element.
/// Element queryState of type "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfQueryStateT.
    ArrayOfQueryStateT*                  queryState                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CmStatusSummaryRespT is a complexType.
class ns1__CmStatusSummaryRespT
{ public:
/// Element cmData of type "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfCmStatusSummaryT.
    ArrayOfCmStatusSummaryT*             cmData                         1;	///< Required element.
/// Element queryState of type "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfQueryStateT.
    ArrayOfQueryStateT*                  queryState                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":CurrentAlarmsRespT is a complexType.
class ns1__CurrentAlarmsRespT
{ public:
/// Element alarms of type "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfCurrentAlarmsT.
    ArrayOfCurrentAlarmsT*               alarms                         1;	///< Required element.
/// Element queryState of type "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfQueryStateT.
    ArrayOfQueryStateT*                  queryState                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":HistoricalAlarmsRespT is a complexType.
class ns1__HistoricalAlarmsRespT
{ public:
/// Element alarms of type "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfHistoricalAlarmsT.
    ArrayOfHistoricalAlarmsT*            alarms                         1;	///< Required element.
/// Element queryState of type "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfQueryStateT.
    ArrayOfQueryStateT*                  queryState                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":EventMessageT is a complexType.
class ns1__EventMessageT
{ public:
/// Element eventType of type "http://www.palmyrasys.com/webservices/CableAssurance":EventTypeT.
    enum ns1__EventTypeT                 eventType                      1;	///< Required element.
/// Element eventCategory of type "http://www.palmyrasys.com/webservices/CableAssurance":EventCategoryT.
    enum ns1__EventCategoryT             eventCategory                  1;	///< Required element.
/// Element eventSubCategory of type xs:string.
    std::string                          eventSubCategory               1;	///< Required element.
/// Element objectId of type xs:string.
    std::string*                         objectId                      ;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfRegionsT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":RegionT
class ArrayOfRegionsT
{ public:
/// Pointer to array of ns1__RegionT*.
    ns1__RegionT*                       *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfMarketsT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":MarketT
class ArrayOfMarketsT
{ public:
/// Pointer to array of ns1__MarketT*.
    ns1__MarketT*                       *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfBladesT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":BladeT
class ArrayOfBladesT
{ public:
/// Pointer to array of ns1__BladeT*.
    ns1__BladeT*                        *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfCmsesT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":CmsT
class ArrayOfCmsesT
{ public:
/// Pointer to array of ns1__CmsT*.
    ns1__CmsT*                          *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfCmtsesT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":CmtsT
class ArrayOfCmtsesT
{ public:
/// Pointer to array of ns1__CmtsT*.
    ns1__CmtsT*                         *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfSnmpV2CAttributesT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":SnmpV2CAttributesT
class ArrayOfSnmpV2CAttributesT
{ public:
/// Pointer to array of ns1__SnmpV2CAttributesT*.
    ns1__SnmpV2CAttributesT*            *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfChannelsT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":ChannelT
class ArrayOfChannelsT
{ public:
/// Pointer to array of ns1__ChannelT*.
    ns1__ChannelT*                      *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfHfcsT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":HfcT
class ArrayOfHfcsT
{ public:
/// Pointer to array of ns1__HfcT*.
    ns1__HfcT*                          *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfCableModemsT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":CableModemT
class ArrayOfCableModemsT
{ public:
/// Pointer to array of ns1__CableModemT*.
    ns1__CableModemT*                   *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfEmtasT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":EmtaT
class ArrayOfEmtasT
{ public:
/// Pointer to array of ns1__EmtaT*.
    ns1__EmtaT*                         *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfCurrentAlarmsT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":CurrentAlarmT
class ArrayOfCurrentAlarmsT
{ public:
/// Pointer to array of ns1__CurrentAlarmT*.
    ns1__CurrentAlarmT*                 *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfHistoricalAlarmsT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":HistoricalAlarmT
class ArrayOfHistoricalAlarmsT
{ public:
/// Pointer to array of ns1__HistoricalAlarmT*.
    ns1__HistoricalAlarmT*              *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfAlarmHistoriesT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":AlarmHistoryT
class ArrayOfAlarmHistoriesT
{ public:
/// Pointer to array of ns1__AlarmHistoryT*.
    ns1__AlarmHistoryT*                 *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfScrollPageT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":ScrollPageT
class ArrayOfScrollPageT
{ public:
/// Pointer to array of ns1__ScrollPageT*.
    ns1__ScrollPageT*                   *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfQueryStateT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":QueryStateT
class ArrayOfQueryStateT
{ public:
/// Pointer to array of ns1__QueryStateT*.
    ns1__QueryStateT*                   *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfGenericCountsHistoryT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":GenericCountsHistoryT
class ArrayOfGenericCountsHistoryT
{ public:
/// Pointer to array of ns1__GenericCountsHistoryT*.
    ns1__GenericCountsHistoryT*         *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfCmStatusHistoryT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":CmStatusHistoryT
class ArrayOfCmStatusHistoryT
{ public:
/// Pointer to array of ns1__CmStatusHistoryT*.
    ns1__CmStatusHistoryT*              *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfMtaAvailabilityHistoryT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":MtaAvailabilityHistoryT
class ArrayOfMtaAvailabilityHistoryT
{ public:
/// Pointer to array of ns1__MtaAvailabilityHistoryT*.
    ns1__MtaAvailabilityHistoryT*       *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfMtaProvStatusHistoryT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":MtaProvStatusHistoryT
class ArrayOfMtaProvStatusHistoryT
{ public:
/// Pointer to array of ns1__MtaProvStatusHistoryT*.
    ns1__MtaProvStatusHistoryT*         *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfMtaPingStatusHistoryT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":MtaPingStatusHistoryT
class ArrayOfMtaPingStatusHistoryT
{ public:
/// Pointer to array of ns1__MtaPingStatusHistoryT*.
    ns1__MtaPingStatusHistoryT*         *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfCmPerformanceHistoryT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":CmPerformanceHistoryT
class ArrayOfCmPerformanceHistoryT
{ public:
/// Pointer to array of ns1__CmPerformanceHistoryT*.
    ns1__CmPerformanceHistoryT*         *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfCTECustomerT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":CTECustomerT
class ArrayOfCTECustomerT
{ public:
/// Pointer to array of ns1__CTECustomerT*.
    ns1__CTECustomerT*                  *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfCTEDataT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":CTEDataT
class ArrayOfCTEDataT
{ public:
/// Pointer to array of ns1__CTEDataT*.
    ns1__CTEDataT*                      *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfCTEQueryInputT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":CTEQueryInputT
class ArrayOfCTEQueryInputT
{ public:
/// Pointer to array of ns1__CTEQueryInputT*.
    ns1__CTEQueryInputT*                *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfCMSLineT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":CMSLineT
class ArrayOfCMSLineT
{ public:
/// Pointer to array of ns1__CMSLineT*.
    ns1__CMSLineT*                      *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfUserAccessT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":UserAccessT
class ArrayOfUserAccessT
{ public:
/// Pointer to array of ns1__UserAccessT*.
    ns1__UserAccessT*                   *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfApplicationDomainT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":ApplicationDomainT
class ArrayOfApplicationDomainT
{ public:
/// Pointer to array of ns1__ApplicationDomainT*.
    ns1__ApplicationDomainT*            *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfRoleT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":RoleT
class ArrayOfRoleT
{ public:
/// Pointer to array of ns1__RoleT*.
    ns1__RoleT*                         *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfUserT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":UserT
class ArrayOfUserT
{ public:
/// Pointer to array of ns1__UserT*.
    ns1__UserT*                         *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfAlarmStatusThresholdT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":AlarmBasedStatusThresholdT
class ArrayOfAlarmStatusThresholdT
{ public:
/// Pointer to array of ns1__AlarmBasedStatusThresholdT*.
    ns1__AlarmBasedStatusThresholdT*    *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfAggregateStatusThresholdT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":AggregateStatusThresholdT
class ArrayOfAggregateStatusThresholdT
{ public:
/// Pointer to array of ns1__AggregateStatusThresholdT*.
    ns1__AggregateStatusThresholdT*     *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfAlarmTypeConfigT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":AlarmTypeConfigT
class ArrayOfAlarmTypeConfigT
{ public:
/// Pointer to array of ns1__AlarmTypeConfigT*.
    ns1__AlarmTypeConfigT*              *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfHfcStatusSummaryT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":HfcStatusSummaryT
class ArrayOfHfcStatusSummaryT
{ public:
/// Pointer to array of ns1__HfcStatusSummaryT*.
    ns1__HfcStatusSummaryT*             *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfMtaStatusSummaryT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":MtaStatusSummaryT
class ArrayOfMtaStatusSummaryT
{ public:
/// Pointer to array of ns1__MtaStatusSummaryT*.
    ns1__MtaStatusSummaryT*             *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.palmyrasys.com/webservices/CableAssurance":ArrayOfCmStatusSummaryT is a complexType with complexContent restriction of SOAP-ENC:Array.
/// SOAP encoded array of "http://www.palmyrasys.com/webservices/CableAssurance":CmStatusSummaryT
class ArrayOfCmStatusSummaryT
{ public:
/// Pointer to array of ns1__CmStatusSummaryT*.
    ns1__CmStatusSummaryT*              *__ptr                         ;
/// Size of the dynamic array.
    int                                  __size                        ;
/// Offset for partially transmitted arrays (uncomment only when required).
//  int                                  __offset                      ;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap adm  service name:	AdministrationSOAPBinding 
//gsoap adm  service type:	AdministrationEP 
//gsoap adm  service port:	http://localhost:8080/CableAssurance/caservices/AdministrationEP 
//gsoap adm  service namespace:	http://www.palmyrasys.com/webservices/CableAssurance/Administration 
//gsoap adm  service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap cms  service name:	CmsSOAPBinding 
//gsoap cms  service type:	CmsEP 
//gsoap cms  service port:	http://localhost:8080/CableAssurance/caservices/CmsEP 
//gsoap cms  service namespace:	http://www.palmyrasys.com/webservices/CableAssurance/Cms 
//gsoap cms  service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap cpeer service name:	CPeerServiceSOAPBinding 
//gsoap cpeer service type:	CPeerServiceEP 
//gsoap cpeer service port:	http://localhost:9091/CableAssurance/caservices/CPeerServiceEP 
//gsoap cpeer service namespace:	http://www.palmyrasys.com/webservices/CableAssurance/CPeerService 
//gsoap cpeer service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap cte  service name:	CteSOAPBinding 
//gsoap cte  service type:	CteEP 
//gsoap cte  service port:	http://localhost:8080/CableAssurance/caservices/CteEP 
//gsoap cte  service namespace:	http://www.palmyrasys.com/webservices/CableAssurance/Cte 
//gsoap cte  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Bindings
  - @ref AdministrationSOAPBinding
  - @ref CmsSOAPBinding
  - @ref CPeerServiceSOAPBinding
  - @ref CteSOAPBinding

*/

/**

@page AdministrationSOAPBinding Binding "AdministrationSOAPBinding"

@section AdministrationSOAPBinding_operations Operations of Binding  "AdministrationSOAPBinding"
  - @ref adm__updateCmts
  - @ref adm__addCmts
  - @ref adm__deleteCmts
  - @ref adm__addCmtsAllSnmpV2CAttributes
  - @ref adm__updateCmtsAllSnmpV2CAttributes
  - @ref adm__updateCms
  - @ref adm__addCms
  - @ref adm__deleteCms
  - @ref adm__getPollingIntervals
  - @ref adm__updatePollingIntervals
  - @ref adm__getMtaStatusThreshold
  - @ref adm__updateMtaStatusThreshold
  - @ref adm__getHfcStatusThreshold
  - @ref adm__updateHfcStatusThreshold
  - @ref adm__getChannelStatusThreshold
  - @ref adm__updateChannelStatusThreshold
  - @ref adm__getCmtsStatusThreshold
  - @ref adm__updateCmtsStatusThreshold
  - @ref adm__getCmsStatusThreshold
  - @ref adm__updateCmsStatusThreshold
  - @ref adm__getMtaAlarmConfig
  - @ref adm__updateMtaAlarmConfig
  - @ref adm__getHfcAlarmConfig
  - @ref adm__updateHfcAlarmConfig
  - @ref adm__getCmtsAlarmConfig
  - @ref adm__updateCmtsAlarmConfig
  - @ref adm__getCmsAlarmConfig
  - @ref adm__updateCmsAlarmConfig
  - @ref adm__updateLocalSystem
  - @ref adm__updateRegion
  - @ref adm__addRegion
  - @ref adm__updateMarket
  - @ref adm__addMarket
  - @ref adm__updateBlade
  - @ref adm__addBlade
  - @ref adm__deleteBlade
  - @ref adm__getCmPerfConfig
  - @ref adm__updateCmPerfConfig
  - @ref adm__addUser
  - @ref adm__getUsers
  - @ref adm__getUser
  - @ref adm__updateUser
  - @ref adm__updateUserPassword
  - @ref adm__getRoles
  - @ref adm__getRole
  - @ref adm__updateRole
  - @ref adm__downloadConfigFromParent
  - @ref adm__getConfig

@section AdministrationSOAPBinding_ports Endpoints of Binding  "AdministrationSOAPBinding"
  - http://localhost:8080/CableAssurance/caservices/AdministrationEP

*/

/**

@page CmsSOAPBinding Binding "CmsSOAPBinding"

@section CmsSOAPBinding_operations Operations of Binding  "CmsSOAPBinding"
  - @ref cms__getLineStatus

@section CmsSOAPBinding_ports Endpoints of Binding  "CmsSOAPBinding"
  - http://localhost:8080/CableAssurance/caservices/CmsEP

*/

/**

@page CPeerServiceSOAPBinding Binding "CPeerServiceSOAPBinding"

@section CPeerServiceSOAPBinding_operations Operations of Binding  "CPeerServiceSOAPBinding"
  - @ref cpeer__pingMta
  - @ref cpeer__getMtaData
  - @ref cpeer__getCmData
  - @ref cpeer__getCmtsCmData
  - @ref cpeer__sendEvent

@section CPeerServiceSOAPBinding_ports Endpoints of Binding  "CPeerServiceSOAPBinding"
  - http://localhost:9091/CableAssurance/caservices/CPeerServiceEP

*/

/**

@page CteSOAPBinding Binding "CteSOAPBinding"

@section CteSOAPBinding_operations Operations of Binding  "CteSOAPBinding"
  - @ref cte__getCteData

@section CteSOAPBinding_ports Endpoints of Binding  "CteSOAPBinding"
  - http://localhost:8080/CableAssurance/caservices/CteEP

*/

/******************************************************************************\
 *                                                                            *
 * AdministrationSOAPBinding                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * adm__updateCmts                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__updateCmts" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__updateCmts(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__CmtsT*                         cmts,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__updateCmts(
    struct soap *soap,
    // request parameters:
    ns1__CmtsT*                         cmts,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	updateCmts rpc
//gsoap adm  service method-encoding:	updateCmts http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	updateCmts ""
int adm__updateCmts(
    ns1__CmtsT*                         cmts,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__addCmts                                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__addCmts" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__addCmts(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__CmtsT*                         cmts,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__addCmts(
    struct soap *soap,
    // request parameters:
    ns1__CmtsT*                         cmts,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	addCmts rpc
//gsoap adm  service method-encoding:	addCmts http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	addCmts ""
int adm__addCmts(
    ns1__CmtsT*                         cmts,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__deleteCmts                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__deleteCmts" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__deleteCmts(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__CmtsT*                         cmts,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__deleteCmts(
    struct soap *soap,
    // request parameters:
    ns1__CmtsT*                         cmts,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	deleteCmts rpc
//gsoap adm  service method-encoding:	deleteCmts http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	deleteCmts ""
int adm__deleteCmts(
    ns1__CmtsT*                         cmts,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__addCmtsAllSnmpV2CAttributes                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__addCmtsAllSnmpV2CAttributes" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__addCmtsAllSnmpV2CAttributes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__TopoHierarchyKeyT*             topologyKey,
    xsd__integer                        cmtsResId,
    ArrayOfSnmpV2CAttributesT*          attributes,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__addCmtsAllSnmpV2CAttributes(
    struct soap *soap,
    // request parameters:
    ns1__TopoHierarchyKeyT*             topologyKey,
    xsd__integer                        cmtsResId,
    ArrayOfSnmpV2CAttributesT*          attributes,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	addCmtsAllSnmpV2CAttributes rpc
//gsoap adm  service method-encoding:	addCmtsAllSnmpV2CAttributes http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	addCmtsAllSnmpV2CAttributes ""
int adm__addCmtsAllSnmpV2CAttributes(
    ns1__TopoHierarchyKeyT*             topologyKey,	///< Request parameter
    xsd__integer                        cmtsResId,	///< Request parameter
    ArrayOfSnmpV2CAttributesT*          attributes,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__updateCmtsAllSnmpV2CAttributes                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__updateCmtsAllSnmpV2CAttributes" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__updateCmtsAllSnmpV2CAttributes(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__TopoHierarchyKeyT*             topologyKey,
    xsd__integer                        cmtsResId,
    ArrayOfSnmpV2CAttributesT*          attributes,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__updateCmtsAllSnmpV2CAttributes(
    struct soap *soap,
    // request parameters:
    ns1__TopoHierarchyKeyT*             topologyKey,
    xsd__integer                        cmtsResId,
    ArrayOfSnmpV2CAttributesT*          attributes,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	updateCmtsAllSnmpV2CAttributes rpc
//gsoap adm  service method-encoding:	updateCmtsAllSnmpV2CAttributes http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	updateCmtsAllSnmpV2CAttributes ""
int adm__updateCmtsAllSnmpV2CAttributes(
    ns1__TopoHierarchyKeyT*             topologyKey,	///< Request parameter
    xsd__integer                        cmtsResId,	///< Request parameter
    ArrayOfSnmpV2CAttributesT*          attributes,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__updateCms                                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__updateCms" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__updateCms(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__CmsT*                          cms,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__updateCms(
    struct soap *soap,
    // request parameters:
    ns1__CmsT*                          cms,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	updateCms rpc
//gsoap adm  service method-encoding:	updateCms http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	updateCms ""
int adm__updateCms(
    ns1__CmsT*                          cms,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__addCms                                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__addCms" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__addCms(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__CmsT*                          cms,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__addCms(
    struct soap *soap,
    // request parameters:
    ns1__CmsT*                          cms,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	addCms rpc
//gsoap adm  service method-encoding:	addCms http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	addCms ""
int adm__addCms(
    ns1__CmsT*                          cms,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__deleteCms                                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__deleteCms" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__deleteCms(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__CmsT*                          cms,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__deleteCms(
    struct soap *soap,
    // request parameters:
    ns1__CmsT*                          cms,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	deleteCms rpc
//gsoap adm  service method-encoding:	deleteCms http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	deleteCms ""
int adm__deleteCms(
    ns1__CmsT*                          cms,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__getPollingIntervals                                                   *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "adm__getPollingIntervalsResponse" of service binding "AdministrationSOAPBinding" operation "adm__getPollingIntervals"
struct adm__getPollingIntervalsResponse
{
    ns1__PollingIntervalsT*             pollingInterval;
};

/// Operation "adm__getPollingIntervals" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__getPollingIntervals(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct adm__getPollingIntervalsResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__getPollingIntervals(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct adm__getPollingIntervalsResponse&
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	getPollingIntervals rpc
//gsoap adm  service method-encoding:	getPollingIntervals http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	getPollingIntervals ""
int adm__getPollingIntervals(
    struct adm__getPollingIntervalsResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__updatePollingIntervals                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__updatePollingIntervals" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__updatePollingIntervals(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__PollingIntervalsT*             pollintInterval,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__updatePollingIntervals(
    struct soap *soap,
    // request parameters:
    ns1__PollingIntervalsT*             pollintInterval,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	updatePollingIntervals rpc
//gsoap adm  service method-encoding:	updatePollingIntervals http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	updatePollingIntervals ""
int adm__updatePollingIntervals(
    ns1__PollingIntervalsT*             pollintInterval,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__getMtaStatusThreshold                                                 *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "adm__getMtaStatusThresholdResponse" of service binding "AdministrationSOAPBinding" operation "adm__getMtaStatusThreshold"
struct adm__getMtaStatusThresholdResponse
{
    ns1__MtaStatusThresholdT*           threshold;
};

/// Operation "adm__getMtaStatusThreshold" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__getMtaStatusThreshold(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct adm__getMtaStatusThresholdResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__getMtaStatusThreshold(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct adm__getMtaStatusThresholdResponse&
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	getMtaStatusThreshold rpc
//gsoap adm  service method-encoding:	getMtaStatusThreshold http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	getMtaStatusThreshold ""
int adm__getMtaStatusThreshold(
    struct adm__getMtaStatusThresholdResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__updateMtaStatusThreshold                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__updateMtaStatusThreshold" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__updateMtaStatusThreshold(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__MtaStatusThresholdT*           pollintInterval,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__updateMtaStatusThreshold(
    struct soap *soap,
    // request parameters:
    ns1__MtaStatusThresholdT*           pollintInterval,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	updateMtaStatusThreshold rpc
//gsoap adm  service method-encoding:	updateMtaStatusThreshold http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	updateMtaStatusThreshold ""
int adm__updateMtaStatusThreshold(
    ns1__MtaStatusThresholdT*           pollintInterval,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__getHfcStatusThreshold                                                 *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "adm__getHfcStatusThresholdResponse" of service binding "AdministrationSOAPBinding" operation "adm__getHfcStatusThreshold"
struct adm__getHfcStatusThresholdResponse
{
    ns1__HfcStatusThresholdT*           threshold;
};

/// Operation "adm__getHfcStatusThreshold" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__getHfcStatusThreshold(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct adm__getHfcStatusThresholdResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__getHfcStatusThreshold(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct adm__getHfcStatusThresholdResponse&
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	getHfcStatusThreshold rpc
//gsoap adm  service method-encoding:	getHfcStatusThreshold http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	getHfcStatusThreshold ""
int adm__getHfcStatusThreshold(
    struct adm__getHfcStatusThresholdResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__updateHfcStatusThreshold                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__updateHfcStatusThreshold" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__updateHfcStatusThreshold(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__HfcStatusThresholdT*           pollintInterval,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__updateHfcStatusThreshold(
    struct soap *soap,
    // request parameters:
    ns1__HfcStatusThresholdT*           pollintInterval,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	updateHfcStatusThreshold rpc
//gsoap adm  service method-encoding:	updateHfcStatusThreshold http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	updateHfcStatusThreshold ""
int adm__updateHfcStatusThreshold(
    ns1__HfcStatusThresholdT*           pollintInterval,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__getChannelStatusThreshold                                             *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "adm__getChannelStatusThresholdResponse" of service binding "AdministrationSOAPBinding" operation "adm__getChannelStatusThreshold"
struct adm__getChannelStatusThresholdResponse
{
    ns1__ChannelStatusThresholdT*       threshold;
};

/// Operation "adm__getChannelStatusThreshold" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__getChannelStatusThreshold(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct adm__getChannelStatusThresholdResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__getChannelStatusThreshold(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct adm__getChannelStatusThresholdResponse&
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	getChannelStatusThreshold rpc
//gsoap adm  service method-encoding:	getChannelStatusThreshold http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	getChannelStatusThreshold ""
int adm__getChannelStatusThreshold(
    struct adm__getChannelStatusThresholdResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__updateChannelStatusThreshold                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__updateChannelStatusThreshold" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__updateChannelStatusThreshold(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__ChannelStatusThresholdT*       pollintInterval,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__updateChannelStatusThreshold(
    struct soap *soap,
    // request parameters:
    ns1__ChannelStatusThresholdT*       pollintInterval,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	updateChannelStatusThreshold rpc
//gsoap adm  service method-encoding:	updateChannelStatusThreshold http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	updateChannelStatusThreshold ""
int adm__updateChannelStatusThreshold(
    ns1__ChannelStatusThresholdT*       pollintInterval,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__getCmtsStatusThreshold                                                *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "adm__getCmtsStatusThresholdResponse" of service binding "AdministrationSOAPBinding" operation "adm__getCmtsStatusThreshold"
struct adm__getCmtsStatusThresholdResponse
{
    ns1__CmtsStatusThresholdT*          threshold;
};

/// Operation "adm__getCmtsStatusThreshold" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__getCmtsStatusThreshold(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct adm__getCmtsStatusThresholdResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__getCmtsStatusThreshold(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct adm__getCmtsStatusThresholdResponse&
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	getCmtsStatusThreshold rpc
//gsoap adm  service method-encoding:	getCmtsStatusThreshold http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	getCmtsStatusThreshold ""
int adm__getCmtsStatusThreshold(
    struct adm__getCmtsStatusThresholdResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__updateCmtsStatusThreshold                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__updateCmtsStatusThreshold" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__updateCmtsStatusThreshold(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__CmtsStatusThresholdT*          pollintInterval,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__updateCmtsStatusThreshold(
    struct soap *soap,
    // request parameters:
    ns1__CmtsStatusThresholdT*          pollintInterval,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	updateCmtsStatusThreshold rpc
//gsoap adm  service method-encoding:	updateCmtsStatusThreshold http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	updateCmtsStatusThreshold ""
int adm__updateCmtsStatusThreshold(
    ns1__CmtsStatusThresholdT*          pollintInterval,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__getCmsStatusThreshold                                                 *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "adm__getCmsStatusThresholdResponse" of service binding "AdministrationSOAPBinding" operation "adm__getCmsStatusThreshold"
struct adm__getCmsStatusThresholdResponse
{
    ns1__CmsStatusThresholdT*           threshold;
};

/// Operation "adm__getCmsStatusThreshold" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__getCmsStatusThreshold(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct adm__getCmsStatusThresholdResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__getCmsStatusThreshold(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct adm__getCmsStatusThresholdResponse&
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	getCmsStatusThreshold rpc
//gsoap adm  service method-encoding:	getCmsStatusThreshold http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	getCmsStatusThreshold ""
int adm__getCmsStatusThreshold(
    struct adm__getCmsStatusThresholdResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__updateCmsStatusThreshold                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__updateCmsStatusThreshold" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__updateCmsStatusThreshold(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__CmsStatusThresholdT*           pollintInterval,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__updateCmsStatusThreshold(
    struct soap *soap,
    // request parameters:
    ns1__CmsStatusThresholdT*           pollintInterval,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	updateCmsStatusThreshold rpc
//gsoap adm  service method-encoding:	updateCmsStatusThreshold http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	updateCmsStatusThreshold ""
int adm__updateCmsStatusThreshold(
    ns1__CmsStatusThresholdT*           pollintInterval,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__getMtaAlarmConfig                                                     *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "adm__getMtaAlarmConfigResponse" of service binding "AdministrationSOAPBinding" operation "adm__getMtaAlarmConfig"
struct adm__getMtaAlarmConfigResponse
{
    ns1__MtaAlarmConfigT*               alarmConfig;
};

/// Operation "adm__getMtaAlarmConfig" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__getMtaAlarmConfig(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct adm__getMtaAlarmConfigResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__getMtaAlarmConfig(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct adm__getMtaAlarmConfigResponse&
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	getMtaAlarmConfig rpc
//gsoap adm  service method-encoding:	getMtaAlarmConfig http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	getMtaAlarmConfig ""
int adm__getMtaAlarmConfig(
    struct adm__getMtaAlarmConfigResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__updateMtaAlarmConfig                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__updateMtaAlarmConfig" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__updateMtaAlarmConfig(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__MtaAlarmConfigT*               alarmConfig,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__updateMtaAlarmConfig(
    struct soap *soap,
    // request parameters:
    ns1__MtaAlarmConfigT*               alarmConfig,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	updateMtaAlarmConfig rpc
//gsoap adm  service method-encoding:	updateMtaAlarmConfig http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	updateMtaAlarmConfig ""
int adm__updateMtaAlarmConfig(
    ns1__MtaAlarmConfigT*               alarmConfig,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__getHfcAlarmConfig                                                     *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "adm__getHfcAlarmConfigResponse" of service binding "AdministrationSOAPBinding" operation "adm__getHfcAlarmConfig"
struct adm__getHfcAlarmConfigResponse
{
    ns1__HfcAlarmConfigT*               alarmConfig;
};

/// Operation "adm__getHfcAlarmConfig" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__getHfcAlarmConfig(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct adm__getHfcAlarmConfigResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__getHfcAlarmConfig(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct adm__getHfcAlarmConfigResponse&
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	getHfcAlarmConfig rpc
//gsoap adm  service method-encoding:	getHfcAlarmConfig http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	getHfcAlarmConfig ""
int adm__getHfcAlarmConfig(
    struct adm__getHfcAlarmConfigResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__updateHfcAlarmConfig                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__updateHfcAlarmConfig" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__updateHfcAlarmConfig(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__HfcAlarmConfigT*               alarmConfig,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__updateHfcAlarmConfig(
    struct soap *soap,
    // request parameters:
    ns1__HfcAlarmConfigT*               alarmConfig,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	updateHfcAlarmConfig rpc
//gsoap adm  service method-encoding:	updateHfcAlarmConfig http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	updateHfcAlarmConfig ""
int adm__updateHfcAlarmConfig(
    ns1__HfcAlarmConfigT*               alarmConfig,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__getCmtsAlarmConfig                                                    *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "adm__getCmtsAlarmConfigResponse" of service binding "AdministrationSOAPBinding" operation "adm__getCmtsAlarmConfig"
struct adm__getCmtsAlarmConfigResponse
{
    ns1__CmtsAlarmConfigT*              alarmConfig;
};

/// Operation "adm__getCmtsAlarmConfig" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__getCmtsAlarmConfig(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct adm__getCmtsAlarmConfigResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__getCmtsAlarmConfig(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct adm__getCmtsAlarmConfigResponse&
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	getCmtsAlarmConfig rpc
//gsoap adm  service method-encoding:	getCmtsAlarmConfig http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	getCmtsAlarmConfig ""
int adm__getCmtsAlarmConfig(
    struct adm__getCmtsAlarmConfigResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__updateCmtsAlarmConfig                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__updateCmtsAlarmConfig" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__updateCmtsAlarmConfig(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__CmtsAlarmConfigT*              alarmConfig,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__updateCmtsAlarmConfig(
    struct soap *soap,
    // request parameters:
    ns1__CmtsAlarmConfigT*              alarmConfig,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	updateCmtsAlarmConfig rpc
//gsoap adm  service method-encoding:	updateCmtsAlarmConfig http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	updateCmtsAlarmConfig ""
int adm__updateCmtsAlarmConfig(
    ns1__CmtsAlarmConfigT*              alarmConfig,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__getCmsAlarmConfig                                                     *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "adm__getCmsAlarmConfigResponse" of service binding "AdministrationSOAPBinding" operation "adm__getCmsAlarmConfig"
struct adm__getCmsAlarmConfigResponse
{
    ns1__CmsAlarmConfigT*               alarmConfig;
};

/// Operation "adm__getCmsAlarmConfig" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__getCmsAlarmConfig(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct adm__getCmsAlarmConfigResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__getCmsAlarmConfig(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct adm__getCmsAlarmConfigResponse&
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	getCmsAlarmConfig rpc
//gsoap adm  service method-encoding:	getCmsAlarmConfig http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	getCmsAlarmConfig ""
int adm__getCmsAlarmConfig(
    struct adm__getCmsAlarmConfigResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__updateCmsAlarmConfig                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__updateCmsAlarmConfig" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__updateCmsAlarmConfig(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__CmsAlarmConfigT*               alarmConfig,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__updateCmsAlarmConfig(
    struct soap *soap,
    // request parameters:
    ns1__CmsAlarmConfigT*               alarmConfig,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	updateCmsAlarmConfig rpc
//gsoap adm  service method-encoding:	updateCmsAlarmConfig http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	updateCmsAlarmConfig ""
int adm__updateCmsAlarmConfig(
    ns1__CmsAlarmConfigT*               alarmConfig,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__updateLocalSystem                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__updateLocalSystem" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__updateLocalSystem(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__LocalSystemT*                  cmts,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__updateLocalSystem(
    struct soap *soap,
    // request parameters:
    ns1__LocalSystemT*                  cmts,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	updateLocalSystem rpc
//gsoap adm  service method-encoding:	updateLocalSystem http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	updateLocalSystem ""
int adm__updateLocalSystem(
    ns1__LocalSystemT*                  cmts,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__updateRegion                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__updateRegion" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__updateRegion(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__RegionT*                       cmts,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__updateRegion(
    struct soap *soap,
    // request parameters:
    ns1__RegionT*                       cmts,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	updateRegion rpc
//gsoap adm  service method-encoding:	updateRegion http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	updateRegion ""
int adm__updateRegion(
    ns1__RegionT*                       cmts,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__addRegion                                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__addRegion" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__addRegion(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__RegionT*                       cmts,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__addRegion(
    struct soap *soap,
    // request parameters:
    ns1__RegionT*                       cmts,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	addRegion rpc
//gsoap adm  service method-encoding:	addRegion http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	addRegion ""
int adm__addRegion(
    ns1__RegionT*                       cmts,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__updateMarket                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__updateMarket" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__updateMarket(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__MarketT*                       cmts,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__updateMarket(
    struct soap *soap,
    // request parameters:
    ns1__MarketT*                       cmts,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	updateMarket rpc
//gsoap adm  service method-encoding:	updateMarket http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	updateMarket ""
int adm__updateMarket(
    ns1__MarketT*                       cmts,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__addMarket                                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__addMarket" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__addMarket(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__MarketT*                       cmts,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__addMarket(
    struct soap *soap,
    // request parameters:
    ns1__MarketT*                       cmts,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	addMarket rpc
//gsoap adm  service method-encoding:	addMarket http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	addMarket ""
int adm__addMarket(
    ns1__MarketT*                       cmts,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__updateBlade                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__updateBlade" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__updateBlade(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__BladeT*                        cmts,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__updateBlade(
    struct soap *soap,
    // request parameters:
    ns1__BladeT*                        cmts,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	updateBlade rpc
//gsoap adm  service method-encoding:	updateBlade http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	updateBlade ""
int adm__updateBlade(
    ns1__BladeT*                        cmts,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__addBlade                                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__addBlade" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__addBlade(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__BladeT*                        cmts,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__addBlade(
    struct soap *soap,
    // request parameters:
    ns1__BladeT*                        cmts,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	addBlade rpc
//gsoap adm  service method-encoding:	addBlade http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	addBlade ""
int adm__addBlade(
    ns1__BladeT*                        cmts,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__deleteBlade                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__deleteBlade" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__deleteBlade(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__BladeT*                        cmts,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__deleteBlade(
    struct soap *soap,
    // request parameters:
    ns1__BladeT*                        cmts,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	deleteBlade rpc
//gsoap adm  service method-encoding:	deleteBlade http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	deleteBlade ""
int adm__deleteBlade(
    ns1__BladeT*                        cmts,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__getCmPerfConfig                                                       *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "adm__getCmPerfConfigResponse" of service binding "AdministrationSOAPBinding" operation "adm__getCmPerfConfig"
struct adm__getCmPerfConfigResponse
{
    ns1__CmPerformanceConfigT*          cmPerf;
};

/// Operation "adm__getCmPerfConfig" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__getCmPerfConfig(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct adm__getCmPerfConfigResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__getCmPerfConfig(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct adm__getCmPerfConfigResponse&
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	getCmPerfConfig rpc
//gsoap adm  service method-encoding:	getCmPerfConfig http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	getCmPerfConfig ""
int adm__getCmPerfConfig(
    struct adm__getCmPerfConfigResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__updateCmPerfConfig                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__updateCmPerfConfig" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__updateCmPerfConfig(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__CmPerformanceConfigT*          cmPerf,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__updateCmPerfConfig(
    struct soap *soap,
    // request parameters:
    ns1__CmPerformanceConfigT*          cmPerf,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	updateCmPerfConfig rpc
//gsoap adm  service method-encoding:	updateCmPerfConfig http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	updateCmPerfConfig ""
int adm__updateCmPerfConfig(
    ns1__CmPerformanceConfigT*          cmPerf,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__addUser                                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__addUser" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__addUser(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__UserT*                         user,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__addUser(
    struct soap *soap,
    // request parameters:
    ns1__UserT*                         user,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	addUser rpc
//gsoap adm  service method-encoding:	addUser http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	addUser ""
int adm__addUser(
    ns1__UserT*                         user,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__getUsers                                                              *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "adm__getUsersResponse" of service binding "AdministrationSOAPBinding" operation "adm__getUsers"
struct adm__getUsersResponse
{
    ArrayOfUserT*                       name;
};

/// Operation "adm__getUsers" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__getUsers(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct adm__getUsersResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__getUsers(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct adm__getUsersResponse&
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	getUsers rpc
//gsoap adm  service method-encoding:	getUsers http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	getUsers ""
int adm__getUsers(
    struct adm__getUsersResponse       &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__getUser                                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "adm__getUserResponse" of service binding "AdministrationSOAPBinding" operation "adm__getUser"
struct adm__getUserResponse
{
    ns1__UserT*                         name;
};

/// Operation "adm__getUser" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__getUser(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         loginName,
    // response parameters:
    struct adm__getUserResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__getUser(
    struct soap *soap,
    // request parameters:
    std::string                         loginName,
    // response parameters:
    struct adm__getUserResponse&
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	getUser rpc
//gsoap adm  service method-encoding:	getUser http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	getUser ""
int adm__getUser(
    std::string                         loginName,	///< Request parameter
    struct adm__getUserResponse        &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__updateUser                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__updateUser" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__updateUser(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__UserT*                         user,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__updateUser(
    struct soap *soap,
    // request parameters:
    ns1__UserT*                         user,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	updateUser rpc
//gsoap adm  service method-encoding:	updateUser http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	updateUser ""
int adm__updateUser(
    ns1__UserT*                         user,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__updateUserPassword                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__updateUserPassword" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__updateUserPassword(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         loginName,
    std::string                         newPassword,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__updateUserPassword(
    struct soap *soap,
    // request parameters:
    std::string                         loginName,
    std::string                         newPassword,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	updateUserPassword rpc
//gsoap adm  service method-encoding:	updateUserPassword http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	updateUserPassword ""
int adm__updateUserPassword(
    std::string                         loginName,	///< Request parameter
    std::string                         newPassword,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__getRoles                                                              *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "adm__getRolesResponse" of service binding "AdministrationSOAPBinding" operation "adm__getRoles"
struct adm__getRolesResponse
{
    ArrayOfRoleT*                       result;
};

/// Operation "adm__getRoles" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__getRoles(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct adm__getRolesResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__getRoles(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct adm__getRolesResponse&
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	getRoles rpc
//gsoap adm  service method-encoding:	getRoles http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	getRoles ""
int adm__getRoles(
    struct adm__getRolesResponse       &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__getRole                                                               *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "adm__getRoleResponse" of service binding "AdministrationSOAPBinding" operation "adm__getRole"
struct adm__getRoleResponse
{
    ns1__RoleT*                         result;
};

/// Operation "adm__getRole" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__getRole(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         roleName,
    // response parameters:
    struct adm__getRoleResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__getRole(
    struct soap *soap,
    // request parameters:
    std::string                         roleName,
    // response parameters:
    struct adm__getRoleResponse&
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	getRole rpc
//gsoap adm  service method-encoding:	getRole http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	getRole ""
int adm__getRole(
    std::string                         roleName,	///< Request parameter
    struct adm__getRoleResponse        &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__updateRole                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__updateRole" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__updateRole(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__RoleT*                         role,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__updateRole(
    struct soap *soap,
    // request parameters:
    ns1__RoleT*                         role,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	updateRole rpc
//gsoap adm  service method-encoding:	updateRole http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	updateRole ""
int adm__updateRole(
    ns1__RoleT*                         role,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__downloadConfigFromParent                                              *
 *                                                                            *
\******************************************************************************/


/// Operation "adm__downloadConfigFromParent" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__downloadConfigFromParent(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    short                              &rc
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__downloadConfigFromParent(
    struct soap *soap,
    // request parameters:
    // response parameters:
    short                              &rc
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	downloadConfigFromParent rpc
//gsoap adm  service method-encoding:	downloadConfigFromParent http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	downloadConfigFromParent ""
int adm__downloadConfigFromParent(
    short                              &rc	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * adm__getConfig                                                             *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "adm__getConfigResponse" of service binding "AdministrationSOAPBinding" operation "adm__getConfig"
struct adm__getConfigResponse
{
    ns1__ConfigDownloadT*               configData;
};

/// Operation "adm__getConfig" of service binding "AdministrationSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_adm__getConfig(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct adm__getConfigResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int adm__getConfig(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct adm__getConfigResponse&
  );
@endcode

C++ proxy class (defined in soapAdministrationSOAPBindingProxy.h):
  class AdministrationSOAPBinding;

*/

//gsoap adm  service method-style:	getConfig rpc
//gsoap adm  service method-encoding:	getConfig http://schemas.xmlsoap.org/soap/encoding/
//gsoap adm  service method-action:	getConfig ""
int adm__getConfig(
    struct adm__getConfigResponse      &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * CmsSOAPBinding                                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * cms__getLineStatus                                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "cms__getLineStatusResponse" of service binding "CmsSOAPBinding" operation "cms__getLineStatus"
struct cms__getLineStatusResponse
{
    ArrayOfCMSLineT*                    output;
};

/// Operation "cms__getLineStatus" of service binding "CmsSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_cms__getLineStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ArrayOfCMSLineT*                    input,
    // response parameters:
    struct cms__getLineStatusResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int cms__getLineStatus(
    struct soap *soap,
    // request parameters:
    ArrayOfCMSLineT*                    input,
    // response parameters:
    struct cms__getLineStatusResponse&
  );
@endcode

C++ proxy class (defined in soapCmsSOAPBindingProxy.h):
  class CmsSOAPBinding;

*/

//gsoap cms  service method-style:	getLineStatus rpc
//gsoap cms  service method-encoding:	getLineStatus http://schemas.xmlsoap.org/soap/encoding/
//gsoap cms  service method-action:	getLineStatus ""
int cms__getLineStatus(
    ArrayOfCMSLineT*                    input,	///< Request parameter
    struct cms__getLineStatusResponse  &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * CPeerServiceSOAPBinding                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * cpeer__pingMta                                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "cpeer__pingMta" of service binding "CPeerServiceSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_cpeer__pingMta(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__TopoHierarchyKeyT*             topologyKey,
    xsd__integer                        mtaResId,
    // response parameters:
    std::string                        &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int cpeer__pingMta(
    struct soap *soap,
    // request parameters:
    ns1__TopoHierarchyKeyT*             topologyKey,
    xsd__integer                        mtaResId,
    // response parameters:
    std::string                        &result
  );
@endcode

C++ proxy class (defined in soapCPeerServiceSOAPBindingProxy.h):
  class CPeerServiceSOAPBinding;

*/

//gsoap cpeer service method-style:	pingMta rpc
//gsoap cpeer service method-encoding:	pingMta http://schemas.xmlsoap.org/soap/encoding/
//gsoap cpeer service method-action:	pingMta ""
int cpeer__pingMta(
    ns1__TopoHierarchyKeyT*             topologyKey,	///< Request parameter
    xsd__integer                        mtaResId,	///< Request parameter
    std::string                        &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * cpeer__getMtaData                                                          *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "cpeer__getMtaDataResponse" of service binding "CPeerServiceSOAPBinding" operation "cpeer__getMtaData"
struct cpeer__getMtaDataResponse
{
    ns1__MtaDataT*                      result;
};

/// Operation "cpeer__getMtaData" of service binding "CPeerServiceSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_cpeer__getMtaData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__TopoHierarchyKeyT*             topologyKey,
    xsd__integer                        mtaResId,
    // response parameters:
    struct cpeer__getMtaDataResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int cpeer__getMtaData(
    struct soap *soap,
    // request parameters:
    ns1__TopoHierarchyKeyT*             topologyKey,
    xsd__integer                        mtaResId,
    // response parameters:
    struct cpeer__getMtaDataResponse&
  );
@endcode

C++ proxy class (defined in soapCPeerServiceSOAPBindingProxy.h):
  class CPeerServiceSOAPBinding;

*/

//gsoap cpeer service method-style:	getMtaData rpc
//gsoap cpeer service method-encoding:	getMtaData http://schemas.xmlsoap.org/soap/encoding/
//gsoap cpeer service method-action:	getMtaData ""
int cpeer__getMtaData(
    ns1__TopoHierarchyKeyT*             topologyKey,	///< Request parameter
    xsd__integer                        mtaResId,	///< Request parameter
    struct cpeer__getMtaDataResponse   &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * cpeer__getCmData                                                           *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "cpeer__getCmDataResponse" of service binding "CPeerServiceSOAPBinding" operation "cpeer__getCmData"
struct cpeer__getCmDataResponse
{
    ns1__CmDataT*                       result;
};

/// Operation "cpeer__getCmData" of service binding "CPeerServiceSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_cpeer__getCmData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__TopoHierarchyKeyT*             topologyKey,
    xsd__integer                        cmResId,
    // response parameters:
    struct cpeer__getCmDataResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int cpeer__getCmData(
    struct soap *soap,
    // request parameters:
    ns1__TopoHierarchyKeyT*             topologyKey,
    xsd__integer                        cmResId,
    // response parameters:
    struct cpeer__getCmDataResponse&
  );
@endcode

C++ proxy class (defined in soapCPeerServiceSOAPBindingProxy.h):
  class CPeerServiceSOAPBinding;

*/

//gsoap cpeer service method-style:	getCmData rpc
//gsoap cpeer service method-encoding:	getCmData http://schemas.xmlsoap.org/soap/encoding/
//gsoap cpeer service method-action:	getCmData ""
int cpeer__getCmData(
    ns1__TopoHierarchyKeyT*             topologyKey,	///< Request parameter
    xsd__integer                        cmResId,	///< Request parameter
    struct cpeer__getCmDataResponse    &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * cpeer__getCmtsCmData                                                       *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "cpeer__getCmtsCmDataResponse" of service binding "CPeerServiceSOAPBinding" operation "cpeer__getCmtsCmData"
struct cpeer__getCmtsCmDataResponse
{
    ns1__CmtsCmDataT*                   result;
};

/// Operation "cpeer__getCmtsCmData" of service binding "CPeerServiceSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_cpeer__getCmtsCmData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__TopoHierarchyKeyT*             topologyKey,
    xsd__integer                        cmtsResId,
    xsd__integer                        cmResId,
    // response parameters:
    struct cpeer__getCmtsCmDataResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int cpeer__getCmtsCmData(
    struct soap *soap,
    // request parameters:
    ns1__TopoHierarchyKeyT*             topologyKey,
    xsd__integer                        cmtsResId,
    xsd__integer                        cmResId,
    // response parameters:
    struct cpeer__getCmtsCmDataResponse&
  );
@endcode

C++ proxy class (defined in soapCPeerServiceSOAPBindingProxy.h):
  class CPeerServiceSOAPBinding;

*/

//gsoap cpeer service method-style:	getCmtsCmData rpc
//gsoap cpeer service method-encoding:	getCmtsCmData http://schemas.xmlsoap.org/soap/encoding/
//gsoap cpeer service method-action:	getCmtsCmData ""
int cpeer__getCmtsCmData(
    ns1__TopoHierarchyKeyT*             topologyKey,	///< Request parameter
    xsd__integer                        cmtsResId,	///< Request parameter
    xsd__integer                        cmResId,	///< Request parameter
    struct cpeer__getCmtsCmDataResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * cpeer__sendEvent                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "cpeer__sendEvent" of service binding "CPeerServiceSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_cpeer__sendEvent(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__EventMessageT*                 event,
    // response parameters:
    short                              &result
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int cpeer__sendEvent(
    struct soap *soap,
    // request parameters:
    ns1__EventMessageT*                 event,
    // response parameters:
    short                              &result
  );
@endcode

C++ proxy class (defined in soapCPeerServiceSOAPBindingProxy.h):
  class CPeerServiceSOAPBinding;

*/

//gsoap cpeer service method-style:	sendEvent rpc
//gsoap cpeer service method-encoding:	sendEvent http://schemas.xmlsoap.org/soap/encoding/
//gsoap cpeer service method-action:	sendEvent ""
int cpeer__sendEvent(
    ns1__EventMessageT*                 event,	///< Request parameter
    short                              &result	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * CteSOAPBinding                                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * cte__getCteData                                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "cte__getCteDataResponse" of service binding "CteSOAPBinding" operation "cte__getCteData"
struct cte__getCteDataResponse
{
    ArrayOfCTEDataT*                    name;
};

/// Operation "cte__getCteData" of service binding "CteSOAPBinding"

/**

Operation details:

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_cte__getCteData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ArrayOfCTEQueryInputT*              queryInput,
    // response parameters:
    struct cte__getCteDataResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int cte__getCteData(
    struct soap *soap,
    // request parameters:
    ArrayOfCTEQueryInputT*              queryInput,
    // response parameters:
    struct cte__getCteDataResponse&
  );
@endcode

C++ proxy class (defined in soapCteSOAPBindingProxy.h):
  class CteSOAPBinding;

*/

//gsoap cte  service method-style:	getCteData rpc
//gsoap cte  service method-encoding:	getCteData http://schemas.xmlsoap.org/soap/encoding/
//gsoap cte  service method-action:	getCteData ""
int cte__getCteData(
    ArrayOfCTEQueryInputT*              queryInput,	///< Request parameter
    struct cte__getCteDataResponse     &	///< Response struct parameter
);

/* End of include/allServices.h */
