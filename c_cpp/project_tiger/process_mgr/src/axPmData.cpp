
//********************************************************************
// Copyright (c) 2006 Premraj Nallasivmapillai. All rights reserved.
//********************************************************************

//********************************************************************
// include files
//********************************************************************
#include <stdio.h>
#include "axPmData.hpp"

//********************************************************************
// definitions/macros
//********************************************************************

//********************************************************************
// constants
//********************************************************************

//********************************************************************
// static member initialization
//********************************************************************
axPmData * axPmData::m_instance = NULL;

//********************************************************************
// forward declerations
//********************************************************************


//********************************************************************
// default constructor:
//********************************************************************
axPmData::axPmData()
{
}


//********************************************************************
// destructor:
//********************************************************************
axPmData::~axPmData()
{
}


//********************************************************************
// data constructor:
//********************************************************************
// axPmData::axPmData()
// {
// }


//********************************************************************
// method:
//********************************************************************
axPmData *
axPmData::getInstance(void)
{
  if (!m_instance) {
    m_instance = new axPmData();
  }
  return (m_instance);
}


//********************************************************************
// method:
//********************************************************************
axPmInittabEntries_s *
axPmData::getInittabEntries(void)
{
  return (&m_entries);
}


//********************************************************************
// method:
//********************************************************************
void
axPmData::dumpInittabEntries(void)
{
  for (int i=0; m_entries.entries[i].id[0]!='\0' ; i++) {
    printf("%s:%s:%s:%s\n",
            m_entries.entries[i].id,
            m_entries.entries[i].runLevel,
            m_entries.entries[i].action,
            m_entries.entries[i].path);
  }
}


//********************************************************************
// method:
//********************************************************************
void
axPmData::setChildDied(pid_t childPid)
{
  bool foundE = false;
  for (int i=0; m_entries.entries[i].id[0]!='\0' && !foundE; i++) {
    if (m_entries.entries[i].pid == childPid) {
      foundE = true;
      m_entries.entries[i].pid = 0;
    }
  }
}


