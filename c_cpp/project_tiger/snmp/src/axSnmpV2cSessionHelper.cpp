
//********************************************************************
// OBSOLETED
//********************************************************************

//********************************************************************
// Copyright (c) 2006 Premraj Nallasivmapillai. All rights reserved.
//********************************************************************

//********************************************************************
// include files
//********************************************************************
#include <unistd.h> // sleep()
#include "axSnmpV2cSessionHelper.hpp"

//********************************************************************
// definitions/macros
//********************************************************************

//********************************************************************
// constants
//********************************************************************

//********************************************************************
// static member initialization
//********************************************************************

//********************************************************************
// forward declerations
//********************************************************************


//********************************************************************
// default constructor:
//********************************************************************
axSnmpV2cSessionHelper::axSnmpV2cSessionHelper()
{
}


//********************************************************************
// destructor:
//********************************************************************
axSnmpV2cSessionHelper::~axSnmpV2cSessionHelper()
{
  axSnmpSessionFactory * cf = getSessionFactory();
  axSnmpSession * s = getSession();
  if (s->isOpen()) {
    s->close();
  }
  cf->releaseV2cSession(s);
}


//********************************************************************
// data constructor:
//********************************************************************
axSnmpV2cSessionHelper::axSnmpV2cSessionHelper(axSnmpSessionFactory * cf)
{
  axSnmpSession * c = cf->getV2cSession();

  while (c == NULL) {
    sleep(1);
    c = cf->getV2cSession();
  }

  setSession(c);
  setSessionFactory(cf);
}


