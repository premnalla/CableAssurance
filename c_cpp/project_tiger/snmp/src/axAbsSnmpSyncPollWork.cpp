
//********************************************************************
// OBSOLETED
//********************************************************************

//********************************************************************
// Copyright (c) 2006 Premraj Nallasivmapillai. All rights reserved.
//********************************************************************

//********************************************************************
// include files
//********************************************************************
#include "axAbsSnmpSyncPollWork.hpp"

//********************************************************************
// definitions/macros
//********************************************************************

//********************************************************************
// constants
//********************************************************************

//********************************************************************
// static member initialization
//********************************************************************

//********************************************************************
// forward declerations
//********************************************************************


//********************************************************************
// default constructor:
//********************************************************************
axAbsSnmpSyncPollWork::axAbsSnmpSyncPollWork() :
  m_snmpSession(NULL)
{
}


//********************************************************************
// destructor:
//********************************************************************
axAbsSnmpSyncPollWork::~axAbsSnmpSyncPollWork()
{
}


//********************************************************************
// data constructor:
//********************************************************************
axAbsSnmpSyncPollWork::axAbsSnmpSyncPollWork(axSnmpSession * s) :
  m_snmpSession(s)
{
}


//********************************************************************
// method:
//********************************************************************
void
axAbsSnmpSyncPollWork::startWork(void)
{
}


//********************************************************************
// method:
//********************************************************************
void
axAbsSnmpSyncPollWork::endWork(void)
{
}


//********************************************************************
// method:
//********************************************************************
axSnmpSession *
axAbsSnmpSyncPollWork::getSnmpSession(void)
{
  return (m_snmpSession);
}


//********************************************************************
// method:
//********************************************************************
bool
axAbsSnmpSyncPollWork::sendRequestAndGetResponse(netsnmp_session * sesn,
  netsnmp_pdu * req, netsnmp_pdu ** resp)
{
  bool ret = false;

  int status = snmp_synch_response(sesn, req, resp);

  if (status == STAT_TIMEOUT) {
    // process timeout

    goto EXIT_LABEL;
  } else if (status != STAT_SUCCESS) {
    goto EXIT_LABEL;
  }

  if ((*resp)->errstat != SNMP_ERR_NOERROR) {
    goto EXIT_LABEL;
  }

  ret = true;

EXIT_LABEL:

  return (ret);
}


//********************************************************************
// method:
//********************************************************************
void
axAbsSnmpSyncPollWork::setSnmpSession(axSnmpSession * in)
{
  m_snmpSession = in;
}


