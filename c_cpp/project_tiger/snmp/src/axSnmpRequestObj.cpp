
//********************************************************************
// OBSOLETED
//********************************************************************

//********************************************************************
// Copyright (c) 2006 Premraj Nallasivmapillai. All rights reserved.
//********************************************************************

//********************************************************************
// include files
//********************************************************************
#include "axCALog.hpp"
#include "axSnmpRequestObj.hpp"

//********************************************************************
// definitions/macros
//********************************************************************

//********************************************************************
// constants
//********************************************************************

//********************************************************************
// static member initialization
//********************************************************************

//********************************************************************
// forward declerations
//********************************************************************


//********************************************************************
// default constructor:
//********************************************************************
axSnmpRequestObj::axSnmpRequestObj() :
  m_state(UNKNOWN),
  m_intObj(NULL),
  m_session(NULL)
{
}


//********************************************************************
// destructor:
//********************************************************************
axSnmpRequestObj::~axSnmpRequestObj()
{
  if (m_session) {
    delete m_session;
  }
}


//********************************************************************
// data constructor:
//********************************************************************
axSnmpRequestObj::axSnmpRequestObj(axAbstractInternalObject * o, 
                                                  axSnmpSession * s) :
  m_state(INIT),
  m_intObj(o),
  m_session(s)
{
}


//********************************************************************
// data constructor:
//********************************************************************
axSnmpRequestObj::axSnmpRequestObj(axAbstractInternalObject * o) :
  m_state(INIT),
  m_intObj(o),
  m_session(NULL)
{
}


//********************************************************************
// method:
//********************************************************************
bool
axSnmpRequestObj::isKeyEqual(axObject * o)
{
  bool ret;

  axSnmpRequestObj * oO = dynamic_cast<axSnmpRequestObj *> (o);

  ret = m_intObj->isKeyEqual(oO->getObject());

  return (ret);
}


//********************************************************************
// method:
//********************************************************************
axObject *
axSnmpRequestObj::getObject(void)
{
  return (m_intObj);
}


//********************************************************************
// method:
//********************************************************************
axSnmpSession *
axSnmpRequestObj::getSession(void)
{
  return (m_session);
}


//********************************************************************
// method:
//********************************************************************
void
axSnmpRequestObj::setStateInit(void)
{
  m_state = INIT;
}


//********************************************************************
// method:
//********************************************************************
void
axSnmpRequestObj::setStateReqSent(void)
{
  m_state = REQ_SENT;
}


//********************************************************************
// method:
//********************************************************************
void
axSnmpRequestObj::setStateReplyReceived(void)
{
  m_state = REPLY_RCV;
}


//********************************************************************
// method:
//********************************************************************
void
axSnmpRequestObj::setStateTimeout(void)
{
  m_state = TIMEOUT;
}


//********************************************************************
// method:
//********************************************************************
bool
axSnmpRequestObj::isReplyReceived(void)
{
  return ((m_state == REPLY_RCV ? true : false));
}


//********************************************************************
// method:
//********************************************************************
bool
axSnmpRequestObj::isReqSent(void)
{
  return ((m_state == REQ_SENT ? true : false));
}


//********************************************************************
// method:
//********************************************************************
bool
axSnmpRequestObj::isTimeout(void)
{
  return ((m_state == TIMEOUT ? true : false));
}



