
//********************************************************************
// Copyright (c) 2006 Premraj Nallasivmapillai. All rights reserved.
//********************************************************************

//********************************************************************
// include files
//********************************************************************
#include "axCAMessageQueue.hpp"

//********************************************************************
// definitions/macros
//********************************************************************

//********************************************************************
// constants
//********************************************************************

//********************************************************************
// static member initialization
//********************************************************************

//********************************************************************
// forward declerations
//********************************************************************


//********************************************************************
// default constructor:
//********************************************************************
axCAMessageQueue::axCAMessageQueue() :
  m_topic(0), m_subscriberSubSystem(0)
{
}


//********************************************************************
// destructor:
//********************************************************************
axCAMessageQueue::~axCAMessageQueue()
{
}


//********************************************************************
// data constructor:
//********************************************************************
axCAMessageQueue::axCAMessageQueue(AX_UINT8 topic, AX_UINT8 subcriberId) :
  m_topic(topic), m_subscriberSubSystem(subcriberId)
{
}


//********************************************************************
// method:
//********************************************************************
AX_UINT8
axCAMessageQueue::getTopic(void)
{
  return (m_topic);
}


//********************************************************************
// method:
//********************************************************************
AX_UINT8
axCAMessageQueue::getSubscriberSubSystem(void)
{
  return (m_subscriberSubSystem);
}


//********************************************************************
// method:
//********************************************************************
bool
axCAMessageQueue::isKeyEqual(axObject * o)
{
  bool ret;

  axCAMessageQueue * otherQ = dynamic_cast<axCAMessageQueue *> (o);

  if (otherQ->getTopic() == m_topic &&
      otherQ->getSubscriberSubSystem() == m_subscriberSubSystem) {
    ret = true;
  } else {
    ret = false;
  }

  return (ret);
}




