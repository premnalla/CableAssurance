
//********************************************************************
// Copyright (c) 2006 Premraj Nallasivmapillai. All rights reserved.
//********************************************************************

//********************************************************************
// include files
//********************************************************************
#include <stdio.h>
#include "axCALog.hpp"
#include "axPoppedTimerProcessor.hpp"
#include "axPoppedTimerQ.hpp"
#include "axAbstractTimerObject.hpp"

//********************************************************************
// definitions/macros
//********************************************************************

//********************************************************************
// constants
//********************************************************************

//********************************************************************
// static member initialization
//********************************************************************

//********************************************************************
// forward declerations
//********************************************************************


//********************************************************************
// default constructor:
//********************************************************************
axPoppedTimerProcessor::axPoppedTimerProcessor()
{
}


//********************************************************************
// destructor:
//********************************************************************
axPoppedTimerProcessor::~axPoppedTimerProcessor()
{
}


//********************************************************************
// data constructor:
//********************************************************************
// axPoppedTimerProcessor::axPoppedTimerProcessor()
// {
// }


//********************************************************************
// method:
//********************************************************************
AX_INT32
axPoppedTimerProcessor::run(void)
{
  AX_INT32 ret = 0;

  axPoppedTimerQ * timerQ = axPoppedTimerQ::getInstance();
  axAbstractTimerObject * o;
  
  while ((o=(axAbstractTimerObject *)timerQ->remove())) {
    /* process object */

    // printf("axPoppedTimerProcessor::run(): got item ...\n");

    o->timerCallback();

    delete o;
  }

  return (ret);
}


