
//********************************************************************
// Copyright (c) 2006 Premraj Nallasivmapillai. All rights reserved.
//********************************************************************

//********************************************************************
// include files
//********************************************************************
#include "axCALog.hpp"
#include "axDailySummaryTimer.hpp"
#include "axDailySummaryRC.hpp"

//********************************************************************
// definitions/macros
//********************************************************************

//********************************************************************
// constants
//********************************************************************

//********************************************************************
// static member initialization
//********************************************************************

//********************************************************************
// forward declerations
//********************************************************************


//********************************************************************
// default constructor:
//********************************************************************
axDailySummaryTimer::axDailySummaryTimer()
{
}


//********************************************************************
// destructor:
//********************************************************************
axDailySummaryTimer::~axDailySummaryTimer()
{
}


//********************************************************************
// data constructor:
//********************************************************************
axDailySummaryTimer::axDailySummaryTimer(time_t & popTime) :
  axAbstractTimerObject(popTime)
{
}


//********************************************************************
// method:
//********************************************************************
bool
axDailySummaryTimer::timerCallback(void)
{
  static const char * myName="dailySummaryTimerCb:";

  bool ret = false;

  ACE_DEBUG((LM_TIMER_DEBUG, "%s entry\n", myName));

  axDailySummaryRC * rc = axDailySummaryRC::getInstance();

  rc->scheduleRunnables();

  ret = true;

  ACE_DEBUG((LM_TIMER_DEBUG, "%s exit\n", myName));

  return (ret);
}


