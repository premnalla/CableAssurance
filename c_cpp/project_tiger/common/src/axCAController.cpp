
//********************************************************************
// Copyright (c) 2006 Premraj Nallasivmapillai. All rights reserved.
//********************************************************************

//********************************************************************
// include files
//********************************************************************
#include "axCAController.hpp"

//********************************************************************
// definitions/macros
//********************************************************************

//********************************************************************
// constants
//********************************************************************

//********************************************************************
// static member initialization
//********************************************************************
axCAController * axCAController::m_instance = NULL;

//********************************************************************
// forward declerations
//********************************************************************


//********************************************************************
// default constructor:
//********************************************************************
axCAController::axCAController() :
  m_isExit(false), m_isRereadConfig(false)
{
}


//********************************************************************
// destructor:
//********************************************************************
axCAController::~axCAController()
{
}


//********************************************************************
// data constructor:
//********************************************************************
// axCAController::axCAController()
// {
// }


//********************************************************************
// method:
//********************************************************************
axCAController *
axCAController::getInstance(void)
{
  if (!m_instance) {
    m_instance = new axCAController();
  }
  return (m_instance);
}


//********************************************************************
// method:
//********************************************************************
bool
axCAController::isExit(void)
{
  return (m_isExit);
}


//********************************************************************
// method:
//********************************************************************
void
axCAController::setExit(void)
{
  m_isExit = true;
}


//********************************************************************
// method:
//********************************************************************
bool
axCAController::isRereadConfig(void)
{
  return (m_isRereadConfig);
}


//********************************************************************
// method:
//********************************************************************
void
axCAController::setRereadConfig(bool v)
{
  m_isRereadConfig = v;
}


