//********************************************************************
// Copyright (c) 2006 by Prem Nallasivampillai. All rights reserved.
//********************************************************************

//********************************************************************
// include files
//********************************************************************
#include <stdio.h>
#include "axInt32.hpp"

//********************************************************************
// definitions/macros
//********************************************************************

//********************************************************************
// constants
//********************************************************************

//********************************************************************
// static member initialization
//********************************************************************

//********************************************************************
// forward declerations
//********************************************************************

//********************************************************************
// default constructor:
//********************************************************************
axInt32::axInt32() :
  m_data(0)
{
}

//********************************************************************
// destructor:
//********************************************************************
axInt32::~axInt32()
{
}


//********************************************************************
// data constructor:
//********************************************************************
axInt32::axInt32(AX_INT32 val) : 
  m_data(val)
{
}


//********************************************************************
// method: toString
//********************************************************************
auto_ptr<string>
axInt32::toString(void) 
{
  char tmpS[64];
  sprintf(tmpS, "%d", m_data);
  auto_ptr<string> ret(new string(tmpS));

  return (ret);
}


//********************************************************************
// method : hashInt32
//********************************************************************
AX_INT32
axInt32::hashInt32(void)
{
  return (m_data);
}


#if 0
//********************************************************************
// method : hashInt
//********************************************************************
AX_UINT32
axInt32::hashUInt32(void)
{
  return ((AX_UINT32)m_data);
}
#endif


//********************************************************************
// method : hashCode
//********************************************************************
AX_INT64
axInt32::hashCode(void)
{
  return ((AX_INT64) m_data);
}


//********************************************************************
// method : getValue
//********************************************************************
AX_INT32
axInt32::getValue(void)
{
  return (m_data);
}


