//********************************************************************
// Copyright (c) 2006 by Prem Nallasivampillai. All rights reserved.
//********************************************************************

//********************************************************************
// include files
//********************************************************************
#include <stdio.h>
#include "axAltString.hpp"

//********************************************************************
// definitions/macros
//********************************************************************

//********************************************************************
// constants
//********************************************************************

//********************************************************************
// static member initialization
//********************************************************************

//********************************************************************
// forward declerations
//********************************************************************

//********************************************************************
// default constructor:
//********************************************************************
axAltString::axAltString()
{
  auto_ptr<string> p(new string(""));
  m_data = p;
}

//********************************************************************
// destructor:
//********************************************************************
axAltString::~axAltString()
{
}


//********************************************************************
// data constructor:
//********************************************************************
axAltString::axAltString(const char * val) 
{
  auto_ptr<string> p(new string(val));
  m_data = p;
}


//********************************************************************
// method: toString
//********************************************************************
auto_ptr<string>
axAltString::toString(void) 
{
  auto_ptr<string> str(new string(m_data->c_str()));
  return (str);
}


//********************************************************************
// method : hashString
//********************************************************************
auto_ptr<string>
axAltString::hashString(void)
{
  auto_ptr<string> str( new string(m_data->c_str()) );
  return (str);
}


//********************************************************************
// method: isEqual
//********************************************************************
bool
axAltString::isEqual(axObject * o)
{
  bool ret = isKeyEqual(o);

  return (ret);
}


//********************************************************************
// method: isKeyEqual
//********************************************************************
bool
axAltString::isKeyEqual(axObject * o)
{
  bool ret = false;

  auto_ptr<string> str1 = hashString();
  auto_ptr<string> str2 = o->hashString();

  if (!strcmp(str1->c_str(), str2->c_str())) {
    ret = true;
  }

  return (ret);
}


