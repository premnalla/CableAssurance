//********************************************************************
// Copyright (c) 2006 by Prem Nallasivampillai. All rights reserved.
//********************************************************************

//********************************************************************
// include files
//********************************************************************
#include <stdio.h>
#include "axObject.hpp"

//********************************************************************
// definitions/macros
//********************************************************************

//********************************************************************
// constants
//********************************************************************

//********************************************************************
// static member initialization
//********************************************************************

//********************************************************************
// forward declerations
//********************************************************************

//********************************************************************
// default constructor:
//********************************************************************
axObject::axObject()
{
}

//********************************************************************
// destructor:
//********************************************************************
axObject::~axObject()
{
}


//********************************************************************
// data constructor:
//********************************************************************
// axObject::axObject()
// {
// }


//********************************************************************
// method: toString
//********************************************************************
auto_ptr<string>
axObject::toString(void) 
{
  auto_ptr<string> str(new string(""));
  return (str);
}


//********************************************************************
// method : hash
//********************************************************************
AX_INT64
axObject::hashCode(void)
{
  return ((AX_UINT64) this);
}


//********************************************************************
// method : hashInt32
//********************************************************************
AX_INT32
axObject::hashInt32(void)
{
  return ((AX_INT32) this);
}


//********************************************************************
// method : hashUInt32
//********************************************************************
AX_UINT32
axObject::hashUInt32(void)
{
  return ((AX_UINT32) this);
}


#if 0
//********************************************************************
// method : hashUInt32
//********************************************************************
AX_LONG
axObject::hashLong(void)
{
  return ((AX_LONG) this);
}


//********************************************************************
// method : hashInt64
//********************************************************************
AX_INT64
axObject::hashInt64(void)
{
  return ((AX_INT64) this);
}


//********************************************************************
// method : hashUInt64
//********************************************************************
AX_UINT64
axObject::hashUInt64(void)
{
  return ((AX_UINT64) this);
}
#endif


//********************************************************************
// method : hashString
//********************************************************************
auto_ptr<string>
axObject::hashString(void)
{
  auto_ptr<string> str(new string(""));
  return (str);
}


//********************************************************************
// method: isEqual
//********************************************************************
bool
axObject::isEqual(axObject * o)
{
  // bool ret = this->isKeyEqual(o);
  // bool ret = isKeyEqual(o);
  return (isKeyEqual(o));
}


//********************************************************************
// method: isKeyEqual
//********************************************************************
bool
axObject::isKeyEqual(axObject * o)
{
  // bool ret = (this->hashCode() == o->hashCode());
  // bool ret = (hashCode() == o->hashCode());
  return ((hashCode() == o->hashCode()));
}


//********************************************************************
// method: 
//********************************************************************
bool
axObject::operator<(const axObject * o)
{
  axObject * inO = const_cast<axObject *> (o);
  return ((hashCode() < inO->hashCode() ? true : false));
}


//********************************************************************
// method:
//********************************************************************
AX_INT32
axObject::keyCompare(axObject * o)
{
  AX_INT32 ret;

  if ( (hashCode() - o->hashCode()) > 0 ) {
    ret = 1;
  } else if ( (hashCode() - o->hashCode()) < 0 ) {
    ret = -1;
  } else {
    ret = 0;
  }

  return ( ret );
}


//********************************************************************
// method: public static compare function
//********************************************************************
int
axObject::CompareFunction(const void * a, const void * b, void * p)
{
  int ret;

  axObject * oa = (axObject *) a;
  axObject * ob = (axObject *) b;

  ret = oa->keyCompare(ob);

  return (ret);
}


//********************************************************************
// default constructor:
//********************************************************************
axObjectEqualsCompare::axObjectEqualsCompare()
{
}

//********************************************************************
// destructor:
//********************************************************************
axObjectEqualsCompare::~axObjectEqualsCompare()
{
}


//********************************************************************
// method: equality check for hash maps
//********************************************************************
bool
axObjectEqualsCompare::operator() (const AX_INT64 & hc1, const AX_INT64 & hc2)
{
  return ((hc1==hc2) ? true : false);
}


//********************************************************************
// method: equality check for hash maps
//********************************************************************
bool
axObjectEqualsCompare::operator() (const AX_INT32 & hc1, const AX_INT32 & hc2)
{
  return ((hc1==hc2) ? true : false);
}


//********************************************************************
// method: equality check for hash maps
//********************************************************************
bool
axObjectEqualsCompare::operator() (const AX_UINT32 & hc1, const AX_UINT32 & hc2)
{
  return ((hc1==hc2) ? true : false);
}


#if 0
//********************************************************************
// method: equality check for hash maps
//********************************************************************
bool
axObjectEqualsCompare::operator() (const AX_LONG & hc1, const AX_LONG & hc2)
{
  return ((hc1==hc2) ? true : false);
}
#endif


//********************************************************************
// method: equality check for hash maps
//********************************************************************
bool
axObjectEqualsCompare::operator() (const AX_INT8 * hc1, const AX_INT8 * hc2)
{
  return ((strcmp(hc1,hc2)==0) ? true : false);
}

