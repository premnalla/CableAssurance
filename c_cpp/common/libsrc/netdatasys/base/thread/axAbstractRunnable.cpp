
//********************************************************************
// Copyright (c) 2006 Premraj Nallasivmapillai. All rights reserved.
//********************************************************************

//********************************************************************
// include files
//********************************************************************
#include "axAbstractRunnable.hpp"
#include "axUInt32.hpp"

//********************************************************************
// definitions/macros
//********************************************************************

//********************************************************************
// constants
//********************************************************************

//********************************************************************
// static member initialization
//********************************************************************
AX_UINT32       axAbstractRunnable::m_uniqueId = 1;
pthread_mutex_t axAbstractRunnable::m_lock = PTHREAD_MUTEX_INITIALIZER;

//********************************************************************
// forward declerations
//********************************************************************


//********************************************************************
// default constructor:
//********************************************************************
axAbstractRunnable::axAbstractRunnable() :
  m_priority((AX_INT8)-1), m_deletable(0)
{
  m_id = getNextUniqueId();
}


//********************************************************************
// destructor:
//********************************************************************
axAbstractRunnable::~axAbstractRunnable()
{
  delete m_id;
}


//********************************************************************
// data constructor:
//********************************************************************
// axAbstractRunnable::axAbstractRunnable()
// {
// }


//********************************************************************
// method:
//********************************************************************
void
axAbstractRunnable::setPriority(AX_INT8 p)
{
  m_priority = p;
}


//********************************************************************
// method:
//********************************************************************
void
axAbstractRunnable::setDeletable(bool d)
{
  m_deletable = (d ? 1 : 0);
}


//********************************************************************
// method:
//********************************************************************
AX_INT8
axAbstractRunnable::getPriority(void)
{
  return (m_priority);
}


//********************************************************************
// method:
//********************************************************************
bool
axAbstractRunnable::isDeletable(void)
{
  return ((!m_deletable ? false : true));
}


//********************************************************************
// method:
//********************************************************************
axObject *
axAbstractRunnable::getNextUniqueId(void)
{
  axObject * ret;

  pthread_mutex_lock(&m_lock);
  ret = new axUInt32(m_uniqueId++);
  pthread_mutex_unlock(&m_lock);

  return (ret);
}


//********************************************************************
// method:
//********************************************************************
axObject *
axAbstractRunnable::getId(void)
{
  return (m_id);
}


#if 0
//********************************************************************
// method: isKeyEqual
//********************************************************************
bool
axAbstractRunnable::isKeyEqual(axObject * o)
{
  bool ret = ((this->getId())->hashCode() == (o->getId())->hashCode());
  return (ret);
}
#endif


//********************************************************************
// method : hashInt
//********************************************************************
AX_INT64
axAbstractRunnable::hashCode(void)
{
  return (m_id->hashCode());
}


//********************************************************************
// method : hashInt
//********************************************************************
AX_UINT32
axAbstractRunnable::hashUInt32(void)
{
  return (m_id->hashUInt32());
}


