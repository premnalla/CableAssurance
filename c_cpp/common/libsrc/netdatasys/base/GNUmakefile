# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.ACE
#
# gnu.mpd,v 1.134 2005/07/07 14:28:26 elliott_c Exp
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile
DEPENDENCY_FILE  = .depend.libaxcppbase

## LIB may be set to empty later on in this file
LIB_UNCHECKED    = libaxcppbase.a
LIB              = $(LIB_UNCHECKED)

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = libaxcppbase.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

FILES = \
  basic/axObject.cpp \
  basic/axInt32.cpp \
  basic/axUInt32.cpp \
  basic/axInt64.cpp \
  basic/axString.cpp \
  basic/axSingletonBase.cpp \
  basic/axAbstractException.cpp \
  basic/axAbstractKeyPart.cpp \
  basic/axAbstractNonkeyPart.cpp \
  basic/axAbstractObjectHolder.cpp \
  basic/axGenericIntegerHolder.cpp \
  collection/axAbstractCollection.cpp \
  collection/axWorkerCollection.cpp \
  collection/axListBase.cpp \
  collection/axListFree.cpp \
  collection/axList.cpp \
  collection/axSortedList.cpp \
  collection/axListExtLock.cpp \
  collection/axList_mts.cpp \
  collection/axIntHashMap.cpp \
  collection/axIntHashMap_mts.cpp \
  collection/axStrHashMap.cpp \
  collection/axStrHashMap_mts.cpp \
  collection/axStrHashMultiMap.cpp \
  collection/axConsumerSupplierQueue.cpp \
  collection/axVector.cpp \
  collection/axVector_mts.cpp \
  collection/axAbstractAvlTree.cpp \
  collection/axAvlTree.cpp \
  collection/axAvlTreeExtLock.cpp \
  collection/axAvlTreeLockingCapable.cpp \
  collection/axAvlTree_mts.cpp \
  collection/axAbstractAvlTreeEntry.cpp \
  collection/axAbstractIterator.cpp \
  collection/axIteratorHolder.cpp \
  collection/axAvlIterator.cpp \
  collection/axAbstractFactory.cpp \
  collection/axAbstractFactoryOperator.cpp \
  collection/axListIterator.cpp \
  collection/axMultiSet.cpp \
  proxy/axControllerProxy.cpp \
  thread/axWorker.cpp \
  thread/axAbstractLock.cpp \
  thread/axReaderWriterLock.cpp \
  thread/axMultipleReaderLock.cpp \
  thread/axAbstractLockOperator.cpp \
  thread/axReadLockOperator.cpp \
  thread/axWriteLockOperator.cpp \
  thread/axAbstractRunnable.cpp \
  thread/axLockableObject.cpp \
  sched/axAbstractScheduler.cpp \
  connection/axAbstractMultiStates.cpp \
  connection/axAbstractSession.cpp \
  connection/axAbstractConnection.cpp \
  connection/axAbstractSessionHelper.cpp \
  connection/axAbstractConnectionHelper.cpp \
  connection/axAbstractSocket.cpp \
  connection/axAbstractSocketHelper.cpp \
  operation/axAbstractSqlOperation.cpp \
  operation/axAbstractSqlOperReturn.cpp \
  operation/axSqlModifyOperation.cpp \
  operation/axSqlQueryOperation.cpp \
  operation/axSqlResult.cpp \
  operation/axSqlResultSet.cpp \
  systems/axAbstractSubSystem.cpp \
  systems/axAbstractMessage.cpp \
#  collection/axAvlCmMacEntry.cpp \
#  basic/axAltString.cpp \
#  basic/axInteger.cpp \
#  basic/axUnsignedInteger.cpp \
#  basic/axLong.cpp \
#  basic/axStrNVPair.cpp \
#  collection/axLongHashMap.cpp \
#  collection/axLongHashMap_mts.cpp \
#  collection/axIteratorHelper.cpp \
#  connection/axAbstractConnHandler.cpp \
#  thread/axTraceableWorker.cpp \
#

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS =

INSLIB ?= ../lib
ifeq ($(INSLIB),.)
  ifeq ($(PWD),)
    PWD=$(shell pwd)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(PROJECT_ROOT)/include/makeinclude/wrapper_macros.GNU
## We don't need the ACELIB setting from wrapper_macros.GNU
ACELIB =

ifneq ($(OUTPUT_DIRECTORY),)
all: $(OUTPUT_DIRECTORY)
$(OUTPUT_DIRECTORY):
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)"
endif

LIBCHECK = 1
ifneq ($(LIBCHECK), 1)
  LIB   =
  SHLIB =
  all: lib_warning
endif

LSRC   = $(FILES)

include $(PROJECT_ROOT)/include/makeinclude/macros.GNU
include $(PROJECT_ROOT)/include/makeinclude/rules.common.GNU
include $(PROJECT_ROOT)/include/makeinclude/rules.nonested.GNU
include $(PROJECT_ROOT)/include/makeinclude/rules.lib.GNU
include $(PROJECT_ROOT)/include/makeinclude/rules.local.GNU

LDFLAGS      += -L. -L../lib
CPPFLAGS     += -Iinclude -I$(PROJECT_ROOT)/include
CPPFLAGS     += -I$(PROJECT_ROOT)/common/c_cpp/libsrc/thirdparty/ds_and_algos/gnu_avl/include
CPPFLAGS     += -DACE_HAS_ACE_TOKEN -DACE_HAS_ACE_SVCCONF
ifeq ($(shared_libs),1)
  ifneq ($(SHLIB),)
    CPPFLAGS += -DACE_BUILD_DLL
  endif
endif
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo This project will not be built due to the following missing library:
	@echo $(LIBCHECK)

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

realclean: clean
	-$(RM) -rf .obj
	-$(RM) -rf .shobj
	-$(RM) $(LIB_UNCHECKED)
	-$(RM) $(SHLIB_UNCHECKED)
	-$(RM) lib*
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

