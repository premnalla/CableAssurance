//********************************************************************
// Copyright (c) 2006 by Prem Nallasivampillai. All rights reserved.
//********************************************************************

//********************************************************************
// include files
//********************************************************************
#include "axAvlTreeExtLock.hpp"
#include "axReaderWriterLock.hpp"

//********************************************************************
// definitions/macros
//********************************************************************

//********************************************************************
// constants
//********************************************************************

//********************************************************************
// static member initialization
//********************************************************************

//********************************************************************
// forward declerations
//********************************************************************


//********************************************************************
// default constructor:
//********************************************************************
axAvlTreeExtLock::axAvlTreeExtLock() :
  m_lock(new axReaderWriterLock())
{
}


//********************************************************************
// destructor:
//********************************************************************
axAvlTreeExtLock::~axAvlTreeExtLock()
{
  if (m_lock) {
    delete m_lock;
  }
}


//********************************************************************
// data constructor:
//********************************************************************
axAvlTreeExtLock::axAvlTreeExtLock(axAbstractLock * lock) :
  m_lock(lock)
{
}


//********************************************************************
// method:
//********************************************************************
axAbstractLock * 
axAvlTreeExtLock::getLock(void)
{
  return (m_lock);
}


