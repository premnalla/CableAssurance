
//********************************************************************
// Copyright (c) 2006 Premraj Nallasivmapillai. All rights reserved.
//********************************************************************

//********************************************************************
// include files
//********************************************************************
#include "axListIterator.hpp"

//********************************************************************
// definitions/macros
//********************************************************************

//********************************************************************
// constants
//********************************************************************

//********************************************************************
// static member initialization
//********************************************************************

//********************************************************************
// forward declerations
//********************************************************************


//********************************************************************
// default constructor:
//********************************************************************
axListIterator::axListIterator() :
  // m_start(NULL, m_curr(NULL), m_end(NULL), m_list(NULL)
  m_list(NULL)
{
}


//********************************************************************
// destructor:
//********************************************************************
axListIterator::~axListIterator()
{
}


//********************************************************************
// data constructor:
//********************************************************************
axListIterator::axListIterator(axListBase * list) :
  m_list(list)
{
  m_start = list->begin();
  m_curr = m_start;
  m_end = list->end();
}


//********************************************************************
// method: 
//********************************************************************
axObject *
axListIterator::getFirst(void)
{
  axObject * ret;

  m_curr = m_start;

  if (m_curr != m_end) {
    ret = *m_curr;
  } else {
    ret = NULL;
  }

  return (ret);
}


//********************************************************************
// method:
//********************************************************************
axObject *
axListIterator::getNext(void)
{
  axObject * ret;

  m_curr++;

  if (m_curr != m_end) {
    ret = *m_curr;
  } else {
    ret = NULL;
  }

  return (ret);
}

//********************************************************************
// method:
//********************************************************************
axObject *
axListIterator::getLast(void)
{
  axObject * ret;

  if (m_start != m_end) {
    m_curr = m_list->previous(m_end);
    ret = *m_curr;
  } else {
    ret = NULL;
  }

  return (ret);
}


//********************************************************************
// method:
//********************************************************************
axObject *
axListIterator::getPrevious(void)
{
  axObject * ret;

  if (m_curr != m_start) {
    m_curr = m_list->previous(m_curr);
    ret = *m_curr;
  } else {
    ret = NULL;
  }

  return (ret);
}


