//********************************************************************
// Copyright (c) 2006 by Prem Nallasivampillai. All rights reserved.
//********************************************************************

//********************************************************************
// include files
//********************************************************************
#include "axAvlTree_mts.hpp"

//********************************************************************
// definitions/macros
//********************************************************************

//********************************************************************
// constants
//********************************************************************

//********************************************************************
// static member initialization
//********************************************************************

//********************************************************************
// forward declerations
//********************************************************************

//********************************************************************
// default constructor:
//********************************************************************
axAvlTree_mts::axAvlTree_mts()
{
  pthread_mutex_init(&m_collectionLock, NULL);
}

//********************************************************************
// destructor:
//********************************************************************
axAvlTree_mts::~axAvlTree_mts()
{
  pthread_mutex_destroy(&m_collectionLock);
}

#if 0
//********************************************************************
// data constructor:
//********************************************************************
axAvlTree_mts::axAvlTree_mts(avl_comparison_func * f) :
  axAvlTreeLockingCapable(f)
{
}
#endif

//********************************************************************
// method: lock
//********************************************************************
void
axAvlTree_mts::lock(void)
{
  pthread_mutex_lock(&m_collectionLock);
}


//********************************************************************
// method: unlock
//********************************************************************
void
axAvlTree_mts::unlock(void)
{
  pthread_mutex_unlock(&m_collectionLock);
}


