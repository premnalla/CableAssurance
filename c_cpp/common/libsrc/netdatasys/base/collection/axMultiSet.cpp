//********************************************************************
// Copyright (c) 2006 by Prem Nallasivampillai. All rights reserved.
//********************************************************************

//********************************************************************
// include files
//********************************************************************
#include <stdio.h>
#include "axMultiSet.hpp"

//********************************************************************
// definitions/macros
//********************************************************************

//********************************************************************
// constants
//********************************************************************

//********************************************************************
// static member initialization
//********************************************************************

//********************************************************************
// forward declerations
//********************************************************************

//********************************************************************
// default constructor:
//********************************************************************
axMultiSet::axMultiSet()
{
}

//********************************************************************
// destructor:
//********************************************************************
axMultiSet::~axMultiSet()
{
  this->clear();
}

//********************************************************************
// data constructor:
//********************************************************************
// axMultiSet::axMultiSet()
// {
// }

//********************************************************************
// method: isEmpty
//********************************************************************
bool
axMultiSet::isEmpty(void)
{
  return (m_multiset.empty());
}


//********************************************************************
// method: add
//********************************************************************
axObject *
axMultiSet::add(axObject * o)
{
  return (o);
}


//********************************************************************
// method: find
//********************************************************************
axObject *
axMultiSet::find(axObject * o)
{
  axObject * ret = NULL;


  return (ret);
}


//********************************************************************
// method: remove
//********************************************************************
axObject *
axMultiSet::remove(axObject * o)
{
  axObject * ret = NULL;


  return (ret);
}


//********************************************************************
// method: remove
//********************************************************************
axObject *
axMultiSet::remove(void)
{
  axObject * ret = NULL;


  return (ret);
}


//********************************************************************
// method: clear
//********************************************************************
void
axMultiSet::clear(void)
{
  m_multiset.clear();
}


//********************************************************************
// method: clearAndFreeEntries
//********************************************************************
void
axMultiSet::clearAndFreeEntries(void)
{




  m_multiset.clear();
}


//********************************************************************
// method: size
//********************************************************************
size_t
axMultiSet::size(void)
{
  return (m_multiset.size());
}


//********************************************************************
// method: begin
//********************************************************************
axMultiSet::multisetType_t::iterator
axMultiSet::begin(void)
{
  return (m_multiset.begin());
}


//********************************************************************
// method: end
//********************************************************************
axMultiSet::multisetType_t::iterator
axMultiSet::end(void)
{
  return (m_multiset.end());
}


//********************************************************************
// method: createIterator
//********************************************************************
axAbstractIterator *
axMultiSet::createIterator(void)
{
  // return (new axListIterator(this));
  return (NULL);
}


//********************************************************************
// method: freeIterator
//********************************************************************
void
axMultiSet::freeIterator(axAbstractIterator * iter)
{
  delete iter;
}


