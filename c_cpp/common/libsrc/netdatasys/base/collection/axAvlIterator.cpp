
//********************************************************************
// Copyright (c) 2006 Premraj Nallasivmapillai. All rights reserved.
//********************************************************************

//********************************************************************
// include files
//********************************************************************
#include "axAvlIterator.hpp"

//********************************************************************
// definitions/macros
//********************************************************************

//********************************************************************
// constants
//********************************************************************

//********************************************************************
// static member initialization
//********************************************************************

//********************************************************************
// forward declerations
//********************************************************************


//********************************************************************
// default constructor:
//********************************************************************
axAvlIterator::axAvlIterator() :
  m_table(NULL), m_traverser(NULL)
{
}


//********************************************************************
// destructor:
//********************************************************************
axAvlIterator::~axAvlIterator()
{
  if (m_traverser) {
    delete m_traverser;
    m_traverser = NULL;
  }
}


//********************************************************************
// data constructor:
//********************************************************************
axAvlIterator::axAvlIterator(avl_table * table) :
  m_table(table)
{
  m_traverser = new avl_traverser();
  avl_t_init(m_traverser, m_table);
}


//********************************************************************
// method: 
//********************************************************************
axObject *
axAvlIterator::getFirst(void)
{
  axObject * ret = NULL;

  ret = (axObject *) avl_t_first(m_traverser, m_table);

  return (ret);
}


//********************************************************************
// method:
//********************************************************************
axObject *
axAvlIterator::getNext(void)
{
  axObject * ret = NULL;

  ret = (axObject *) avl_t_next(m_traverser);

  return (ret);
}


//********************************************************************
// method:
//********************************************************************
axObject *
axAvlIterator::getLast(void)
{
  axObject * ret = NULL;

  ret = (axObject *) avl_t_last(m_traverser, m_table);

  return (ret);
}


//********************************************************************
// method:
//********************************************************************
axObject *
axAvlIterator::getPrevious(void)
{
  axObject * ret = NULL;

  ret = (axObject *) avl_t_prev(m_traverser);

  return (ret);
}


