/* jDeviceStub.h
   Generated by gSOAP 2.7.9c from include/jDevice.h
   Copyright(C) 2000-2006, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef jDeviceStub_H
#define jDeviceStub_H
#include <vector>
#define WITH_NONAMESPACES
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_ns1__EndUserDeviceTypeT
#define SOAP_TYPE_ns1__EndUserDeviceTypeT (8)
/* ns1:EndUserDeviceTypeT */
enum ns1__EndUserDeviceTypeT {ns1__EndUserDeviceTypeT__CM = 0, ns1__EndUserDeviceTypeT__eMTA = 1};
#endif

/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/




#ifndef SOAP_TYPE_ns1__DeviceDetailsT
#define SOAP_TYPE_ns1__DeviceDetailsT (7)
/* ns1:DeviceDetailsT */
class SOAP_CMAC ns1__DeviceDetailsT
{
public:
	enum ns1__EndUserDeviceTypeT deviceType;	/* required element of type ns1:EndUserDeviceTypeT */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 7; } /* = unique id SOAP_TYPE_ns1__DeviceDetailsT */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DeviceDetailsT() : soap(NULL) { }
	virtual ~ns1__DeviceDetailsT() { }
};
#endif

#ifndef SOAP_TYPE_jDevice__getDeviceDetailsResponse
#define SOAP_TYPE_jDevice__getDeviceDetailsResponse (11)
/* jDevice:getDeviceDetailsResponse */
struct jDevice__getDeviceDetailsResponse
{
public:
	enum ns1__EndUserDeviceTypeT details;	/* RPC return element */	/* required element of type ns1:EndUserDeviceTypeT */
};
#endif

#if 0 /* volatile type: do not redeclare */

#endif

#ifndef SOAP_TYPE_jDevice__getDeviceDetails
#define SOAP_TYPE_jDevice__getDeviceDetails (15)
/* jDevice:getDeviceDetails */
struct jDevice__getDeviceDetails
{
public:
	std::string macAddress;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (18)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	void *dummy;	/* transient */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (19)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (21)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (22)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (23)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (4)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operations                                                         *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 jDevice__getDeviceDetails(struct soap*, std::string macAddress, struct jDevice__getDeviceDetailsResponse &_param_1);

/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_jDevice__getDeviceDetails(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string macAddress, struct jDevice__getDeviceDetailsResponse &_param_1);

/******************************************************************************\
 *                                                                            *
 * Skeletons                                                                  *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 jDevice_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 jDevice_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_jDevice__getDeviceDetails(struct soap*);

#endif

/* End of jDeviceStub.h */
