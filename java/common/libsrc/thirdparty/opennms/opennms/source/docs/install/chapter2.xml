<?xml version="1.0" encoding="UTF-8"?>
<chapter>
  <title>Preparing for install</title>

  <section>
    <title>Prerequisite Package: Java</title>

    <para>OpenNMS is written mainly in Java, although there are a few JNI
    calls to some C code in order to implement things such as ICMP. and so it
    follows that Java would need to be installed.</para>

    <para>As the current code has a small dependency on a Sun-only library
    ("com.sun.net.ssl.internal.www.protocol" in the HTTPS Monitor), it is
    recommended that Sun's SDK is used. It should be possible to use IBM's
    SDK, but you'll get an error in the logs when the poller starts.</para>

    <para>The instructions below are on using Sun's Java distribution, however
    a number of users have had success with the <ulink
    url="http://www.blackdown.org/">Blackdown</ulink> builds of Sun's
    Java.</para>

    <para>XXX Add something about 32-bit vs 64-bit for libjicmp and
    librrd.</para>

    <section>
      <title>Installing Java on Debian</title>

      <para>Add the following to /etc/apt/sources.list and update, (i.e.
      "apt-get update").</para>

      <para>For Woody, add:</para>

      <para><programlisting>deb http://debian.opennms.org/ debian/opennms stable</programlisting></para>

      <para>For Sid, add:</para>

      <para><programlisting>deb http://debian.opennms.org/ debian/opennms unstable</programlisting></para>

      <para>Next, obtain and install a suitable version of Java. Because of
      licensing issues, a suitable Java SDK cannot be distributed with OpenNMS
      so you will have to obtain and install one yourself prior to installing
      OpenNMS. You have two options here:</para>

      <orderedlist>
        <listitem>
          <para>Use the <code>sun-jdk1.4-installer</code> package and build
          script to download the j2sdk from Sun and build your own j2sdk1.4
          package (recommended).</para>

          <para>Building and installing a <code>j2sdk1.4</code>
          package:</para>

          <itemizedlist>
            <listitem>
              <para>The <code>java-common</code> package is a dependency for
              the <code>j2sdk1.4</code> package you will be creating, and
              since it will be installed by <filename>dpkg</filename>,
              <filename>apt</filename> will not be there to pull it in so
              install it first:</para>

              <para><programlisting><computeroutput># </computeroutput><command>apt-get install java-common</command></programlisting></para>
            </listitem>

            <listitem>
              <para>Next, install the <code>sun-jdk1.4-installer</code>
              package:</para>

              <para><programlisting><computeroutput># </computeroutput><command>apt-get install sun-jdk1.4-installer</command></programlisting></para>
            </listitem>

            <listitem>
              <para>Download the Java 1.4 SDK from Sun.  We suggest 1.4.2 or
              later.  Make sure that you get the non-RPM binary package (the
              "<filename>.bin</filename>" package).</para>
            </listitem>

            <listitem>
              <para>Then run the following command to build the
              package:</para>

              <para><programlisting><computeroutput># </computeroutput><command>build-sun-jdk14 ./j2sdk-1_4_2_05-linux-i586.bin</command></programlisting></para>

              <para>where <filename>j2sdk-1_4_2_05-linux-i586.bin</filename>
              is the binary file you downloaded from Sun.</para>
            </listitem>

            <listitem>
              <para>And finally install the package:</para>

              <para><programlisting><computeroutput># </computeroutput><command>dpkg -i j2sdk-1_4_2_05-linux-i586.deb</command></programlisting></para>

              <para>where <filename>j2sdk-1_4_2_05-linux-i586.deb</filename>
              is the Debian package that was just created by
              <filename>build-sun-jdk14</filename>.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>Obtain and install and your own version and meet the OpenNMS
          packages dependencies by installing the
          <filename>java-virtual-machine</filename> meta-package.</para>

          <para><programlisting><computeroutput># </computeroutput><command>apt-get install java-virtual-machine</command></programlisting></para>
        </listitem>
      </orderedlist>
    </section>

    <section>
      <title>Installing Java on Everything Else</title>

      <note>
        <para>It is important to install the SDK instead of the JRE, as Tomcat
        will need to compile Java code (which requires "javac" in the
        SDK).</para>
      </note>

      <para>You will need to use Sun's Java 2 Platform, Standard Edition,
      version 1.4 or later.  We suggest using 1.4.2 or later.  You can <ulink
      url="http://java.sun.com/j2se/1.4.2/download.html">download it</ulink>
      from Sun's <ulink url="http://java.sun.com/">Java</ulink> website. Step
      through the licensing process and then download the proper version of
      Java for your operating system. If you will be using an RPM-based Linux
      package of OpenNMS, you will need to download the RPM package of Java,
      otherwise, you will want the "<code>.bin</code>" file. Install Java
      according to the instructions from Sun.</para>
    </section>
  </section>

  <section>
    <title>Prerequisite Package: Tomcat4 (version 4.1 or greater)</title>

    <para><ulink
    url="http://jakarta.apache.org/tomcat/index.html">Tomcat</ulink> is part
    of the Jakarta project in Apache, and it is a Java servlet engine. What
    that means is that Tomcat is a web server that serves up HTML that is
    built from small Java programs called "servlets". Note that this is much
    different than Java "applets"--servlets are run on the server, not
    downloaded to the browser. Once a servlet is compiled, Tomcat will cache
    it, which means that the first visit to a particular page may be slow, but
    subsequent visits should be rather fast.</para>

    <para>The latest version of Tomcat is Tomcat5, however OpenNMS does not
    work with Tomcat5 due to using Tomcat4-specific authentication features.
    This will be changed in a future version, but for now, you need to use
    Tomcat4.</para>

    <section>
      <title>Modifying Tomcat4 on Debian Sid</title>

      <para>Recent versions of the Tomcat package in Sid, (unstable), use
      jikes as the compiler instead of the javac from your toolkit. Open up
      <filename>/etc/tomcat4/web.xml</filename> in your favorite editor and
      comment out the "<filename>compiler init param</filename>"
      section.</para>
    </section>

    <section>
      <title>Installing Appropriate Tomcat4 on Fedora Core 2 and 3</title>

      <para>The Tomcat4 package that ships with Fedora Core 2 does not appear
      to reliably run, even when the OpenNMS web app is not installed. For
      now, we suggest using the tomcat4 packages on the <ulink
      url="ftp://ftp.opennms.org/pub/dependencies/tomcat4/">OpenNMS FTP
      site</ulink>. You'll want to install both packages,
      <filename>tomcat4-4.1.18-full.1jpp.noarch.rpm</filename> and
      <filename>tomcat4-webapps-4.1.18-full.1jpp.noarch.rpm</filename>.</para>

      <para>There is a bug in some kernels that can cause Java processes, and
      even the entire kernel to hang. It is documented in <ulink
      url="https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=121902">Red
      Hat bug #121902</ulink>. You should make sure you are running at least a
      2.6.6-422 kernel.</para>
    </section>

    <section>
      <title>Installing Tomcat4 on SuSE Linux Pro 9</title>

      <para>SuSE 9 ships with Tomcat 5, which will not work with OpenNMS. You
      will need to de-install the Tomcat 5 packages if they are installed and
      install Tomcat 4 from an older release of SuSE. The Tomcat 4 packages
      for SuSE 8.1 seem to work just fine. They are available on <ulink
      url="ftp://ftp.suse.com/pub/projects/apache/jakarta-tomcat/8.1-i386/">SuSE's
      FTP site</ulink>.</para>
    </section>

    <section>
      <title>Customizing Tomcat4</title>

      <para>We need to make a few changes to Tomcat. Most of these should be
      done via the installer, but you will need to make a few changes by hand.
      These two changes will need to be made manually to Tomcat:</para>

      <orderedlist>
        <listitem>
          <para>Tomcat must be configured to use the same installation of Java
          that OpenNMS uses.</para>
        </listitem>

        <listitem>
          <para>Tomcat needs to be able to read and write the configuration
          files of OpenNMS. This can be done one of two ways. The first option
          is making Tomcat run as root and the second is making the OpenNMS
          configuration files readable and writable by the user Tomcat runs
          as. The first option, although not preferable from a security
          standpoint, is easier to setup and is the suggested method. Plans
          are in place to make OpenNMS so it easily runs as a non-root
          user--see enhancement bug 1150.</para>
        </listitem>
      </orderedlist>

      <para>Many Linux distributions have a <filename>tomcat4.conf</filename>
      configuration file where you can set configuration parameters. It is in
      <filename>/etc/tomcat4/</filename> on the Red Hat and Fedora series of
      Linux distributions. It looks like this:</para>

      <para><programlisting># tomcat /etc/rc.d script example configuration file
# Use with version 1.07 of the scripts or later

# Use Jpackage utils if present
if [ -x /usr/bin/java-functions ]; then
. /usr/bin/java-functions
set_jvm
fi

# Source Java system configuration if exist
if [ -r /etc/java/java.conf ]; then
. /etc/java/java.conf
fi

# you could also override JAVA_HOME here
# Where your java installation lives
# JAVA_HOME="/usr/java/jdk"
# JAVA_HOME="/opt/IBMJava2-131"

# You can pass some parameters to java
# here if you wish to
#JAVACMD="$JAVA_HOME/bin/java -Xminf0.1 -Xmaxf0.3"

# Where your tomcat installation lives
# That change from previous RPM where TOMCAT_HOME 
# used to be /var/tomcat.
# Now /var/tomcat will be the base for webapps only
CATALINA_HOME="/var/tomcat4"
JASPER_HOME="/var/tomcat4"
CATALINA_TMPDIR="/var/tomcat4/temp"

# What user should run tomcat
TOMCAT_USER="tomcat"

# You can change your tomcat locale here
#LANG=en_US

# If you wish to further customize your tomcat environment,
# put your own definitions here
# (i.e. LD_LIBRARY_PATH for some jdbc drivers)
# Just do not forget to export them </programlisting></para>

      <para>In this file, you can change the location of the Java environment
      and the user that Tomcat runs as by changing
      <varname>JAVA_HOME</varname> and <varname>TOMCAT_USER</varname>
      variables, respectively. You can add a line for
      <varname>JAVA_HOME</varname> that points to your installation of Java,
      for example:</para>

      <para><programlisting>JAVA_HOME="/usr/java/j2sdk1.4.2_04/"</programlisting></para>

      <para>To change the Tomcat user, you would set:</para>

      <para><programlisting>TOMCAT_USER="root"</programlisting></para>

      <para>If you are using a Linux distribution or another operating system
      (e.g.: Solaris, Mac OS X) that does not have a
      <filename>tomcat4.conf</filename> file, you will need to figure out how
      effect the same changes. Please feel free to post your details as an
      enhancement bug to the OpenNMS bug database or send an email to the
      opennms-install mailing list and we will add it to this
      documentation.</para>

      <para>If you choose not to set the user that runs Tomcat to
      <code>root</code>, you will need to make the following changes so that
      the Tomcat user can read and write the OpenNMS configuration files. This
      process adds the "<code>tomcat</code>" and "<code>root</code>" users to
      the "<code>tomcat4</code>" group, and then changes permissions so that
      the "<code>tomcat4</code>" group can write to the OpenNMS
      "<filename>etc</filename>" and "<filename>logs</filename>" directory.
      You have to do this <emphasis role="bold">after</emphasis> the OpenNMS
      software is installed.</para>

      <orderedlist>
        <listitem>
          <para>The "<code>tomcat</code>" user should have been created on
          installation of Tomcat--verify this by looking in
          <filename>/etc/passwd</filename>.</para>
        </listitem>

        <listitem>
          <para>Edit <filename>/etc/group</filename> and add
          "<code>tomcat</code>" and "<code>root</code>" as members of the
          "<code>tomcat4</code>" group. It should look something like:</para>

          <para><programlisting><code>tomcat4:x:91:tomcat,root</code></programlisting></para>
        </listitem>

        <listitem>
          <para>Locate the OpenNMS "<filename>etc</filename>" directory. It is
          usually in <filename>/opt/OpenNMS/etc</filename> or
          <filename>/etc/opennms</filename>. It will have a number of files
          with an "<filename>.xml</filename>" extension, such as
          <filename>capsd-configuration.xml</filename>. Run the
          commands:</para>

          <para><programlisting><computeroutput># </computeroutput><command>chgrp -R tomcat4 $OPENNMS_HOME/etc
</command><computeroutput># </computeroutput><command>chmod -R g+w $OPENNMS_HOME/etc</command></programlisting></para>

          <para>where <varname>$OPENNMS_HOME/etc</varname> is the OpenNMS
          "<filename>etc</filename>" directory.</para>
        </listitem>

        <listitem>
          <para>Locate the OpenNMS "<filename>logs</filename>" directory. This
          is usually <filename>/var/log/opennms</filename>, and can be found
          by looking in the <filename>log4j.properties</filename> file in the
          OpenNMS "<filename>etc</filename>" directory (find an instance of
          "File"). Run the commands:</para>

          <para><programlisting><computeroutput># </computeroutput><command>chgrp -R tomcat4 /var/log/opennms
</command><computeroutput># </computeroutput><command>chmod -R g+w /var/log/opennms</command></programlisting></para>

          <para>where <varname>/var/log/opennms</varname> is the OpenNMS logs
          directory.</para>
        </listitem>
      </orderedlist>

      <para>Tomcat will start with just the first change, but without the
      second change you'll start seeing errors in the OpenNMS logs, and
      administration commands run in the web UI will fail because Tomcat
      cannot change the configuration files.</para>
    </section>
  </section>

  <section>
    <title>Prerequisite Package: RRDtool</title>

    <para><ulink
    url="http://people.ee.ethz.ch/~oetiker/webtools/rrdtool/">RRDtool</ulink>
    is the genesis of probably the first widely used open-source network
    management tool, <ulink
    url="http://people.ee.ethz.ch/~oetiker/webtools/mrtg/">MRTG</ulink>.</para>

    <para>RRDtool provides a "round robin" database that stores time-series
    data quickly and in a small amount of space. OpenNMS stores its
    performance-related data in RRD files created using RRDtool.</para>

    <para>We require no special configuration for using RRDtool. As long as it
    was installed as a package, the OpenNMS package should be able to find it
    and configure itself to use the proper commands. We are known to work with
    any "1.0" version of RRDtool since 1.0.33.</para>

    <note>
      <para>OpenNMS can also use JRobin for storing and graphing of
      time-series data, however it is always built with RRDtool support.
      For the time being, you will still need to install RRDtool to build
      OpenNMS or to install an OpenNMS RPM package, even if you plan on
      using JRobin (see enhancement bug 1335).  You can read more about
      JRobin in the release notes.</para>
    </note>
  </section>

  <section>
    <title>Prerequisite Package: PostgreSQL</title>

    <para>XXX add a comment about 32-bit vs. 64-bit stuff for the iplike.so
    module</para>

    <para><ulink url="http://www.postgresql.org/">PostgreSQL</ulink> (or
    "Postgres") is a relational database that OpenNMS uses to store
    information about devices on the network, as well as information about
    events, notifications and outages.</para>

    <para>When installing OpenNMS, two things must happen. First, OpenNMS has
    to be able to contact the database over TCP/IP (even on localhost) and
    second, the installation process must be able to create the
    database.</para>

    <para>OpenNMS requires version 7.2 or later of PostgreSQL. If you are
    using a version of PostgreSQL prior to 7.4, the server error messages are
    required to be in English (the 'C' locale). In particular, the parameter
    <filename>lc_messages</filename> must be set to <filename>'C'</filename>.
    This is set in <filename>postgresql.conf</filename> in the PostgreSQL data
    directory and it requires the database be restarted if you change the
    setting. See the section below on <filename>pg_hba.conf</filename> for
    details on the location of the <filename>data</filename> directory.</para>

    <para>The minimum packages you will need to install should be:</para>

    <itemizedlist>
      <listitem>
        <para><filename>postgresql-server</filename></para>
      </listitem>
    </itemizedlist>

    <para>Note that Red Hat Enterprise Linux and CentOS call their PostgreSQL
    packages "rhdb" for the "Red Hat DataBase" and older releases of SuSE call
    their packages "postgres".</para>

    <para>If you are using later releases Mandrake, around 9 or later, you
    also need:</para>

    <itemizedlist>
      <listitem>
        <para><filename>postgresql-pl</filename></para>
      </listitem>
    </itemizedlist>

    <para>Once you have installed Postgres, you will need to make two changes
    to Postgres configuration files: <filename>postgresql.conf</filename> and
    <filename>pg_hba.conf</filename>. These files are only created once
    Postgres has been started, so if your installation method for Postgres did
    not start the database, do so before continuing. Usually, startup scripts
    will be placed in <filename>/etc/init.d</filename>.</para>

    <para>Locate the Postgres "data" directory. Often this is
    /var/lib/pgsql/data. You should then find the two files we need to modify
    in that directory.</para>

    <section>
      <title>Customizing the <filename>postgresql.conf</filename> file</title>

      <para>This file controls some basic parameters of Postgres. We need to
      change three of these parameters.</para>

      <orderedlist>
        <listitem>
          <para>Find the line in the file that contains
          <varname>tcpip_socket</varname>. It needs to read (this can be
          ignored on PostgreSQL 8.0 and later as this is the default):</para>

          <para><programlisting>tcpip_socket = true</programlisting></para>

          <para>Make sure that there is no comment character ("#") in front of
          that line (or the other two that you change). This will enable
          OpenNMS to talk to the database.</para>
        </listitem>

        <listitem>
          <para>Find the line in the file that contains
          <varname>max_connections</varname>. It needs to read:</para>

          <para><programlisting>max_connections = 256</programlisting></para>
        </listitem>

        <listitem>
          <para>Find the line that contains <varname>shared_buffers</varname>.
          It needs to read:</para>

          <para><programlisting>shared_buffers = 1024</programlisting></para>
        </listitem>
      </orderedlist>
    </section>

    <section>
      <title>Customizing the <filename>pg_hba.conf</filename> file</title>

      <para>The <filename>pg_hba.conf</filename> file controls which machines
      and users can access the database on a given machine via TCP/IP.</para>

      <para>Since that is how OpenNMS accesses the database (via
      <code>localhost</code>) it is necessary to modify this file to allow
      OpenNMS to work. The easiest thing to do is to just allow anyone from
      the localhost to access the database (do not add the last line if your
      system does not support IPv6):</para>

      <para><programlisting># TYPE DATABASE USER IP-ADDRESS IP-MASK METHOD
local all all trust
host all all 127.0.0.1 255.255.255.255 trust
host all all ::1 ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff trust</programlisting></para>

      <para>Make sure that no other lines are uncommented in this file.</para>

      <para>You will need to stop and restart Postgres after making these
      changes.</para>
    </section>

    <section>
      <title>Installing the PostgreSQL on Red Hat Linux 7</title>

      <para>You will need to install version 7.2 of Postgres (which was
      available in Red Hat Linux 7.3).</para>
    </section>

    <section>
      <title>Creating the PostgreSQL Database on Solaris</title>

      <para>You will need to create an <code>opennms</code> database.</para>

      <para>As the <code>postgres</code> user, go to the
      <filename>/usr/local/pgsql/bin</filename> directory, and run the
      following command:</para>

      <para><programlisting><computeroutput># </computeroutput><command>./initdb -D /usr/local/pgsql/data -E ""</command></programlisting></para>

      <para>This will create the database. Following the instructions in the
      section above, modify the <filename>pg_hba.conf</filename> and
      <filename>postgresql.conf</filename> files.</para>

      <para>Then you'll need to start the database:</para>

      <para><programlisting><computeroutput># </computeroutput><command>./pg_ctl -D /usr/local/pgsql/data start</command></programlisting></para>

      <para>Now you are finished as the <code>postgres</code> user.</para>
    </section>
  </section>

  <section>
    <title>Prerequisite Package: <filename>curl</filename></title>

    <para>The startup script uses <filename>curl</filename> to connect to the
    OpenNMS daemon to check that the various components are up and running
    ("<filename>opennms status</filename>").</para>
  </section>
</chapter>
