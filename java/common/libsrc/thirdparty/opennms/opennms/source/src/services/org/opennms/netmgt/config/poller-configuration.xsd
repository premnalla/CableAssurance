<?xml version="1.0"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://xmlns.opennms.org/xsd/config/poller">

	<element name="poller-configuration">
		<complexType>
			<sequence>
				<!-- Configuration of node-outage functionality -->
				<element ref="node-outage" minOccurs="1" maxOccurs="1"/>

				<!--- package encapsulating addresses, services to be polled for these addresses etc. -->
				<element ref="package" minOccurs="1" maxOccurs="unbounded"/>

				<!--- service monitors -->
				<element ref="monitor" minOccurs="1" maxOccurs="unbounded"/>
			</sequence>

			<!--- the max number of threads used for polling -->
			<attribute name="threads" type="int" use="required"/>
			
			<!--- sql for getting the next outage id -->
			<attribute name="nextOutageId" type="string" use="required"/>
			
			<!--- Enable/disable serviceUnresponsive behavior -->
			<attribute name="serviceUnresponsiveEnabled" type="string" use="required">
				<simpleType>
					<restriction base="string">
						<pattern value="(true|false)"/>
					</restriction>
				</simpleType>
			</attribute>

                        <!-- Flag which indicates if an external XMLRPC server has to be notified with
                             any event process errors
                        -->
                        <attribute name="xmlrpc" type="string" use="optional" default="false">
                                <simpleType>
                                        <restriction base="string">
                                                <pattern value="(true|false)"/>
                                        </restriction>
                                </simpleType>
                        </attribute>
		</complexType>
	</element>

	<!-- Configuration of node-outage functionality -->
	<element name="node-outage">
		<complexType>
			<!-- Critical service -->
			<sequence>
				<element ref="critical-service" minOccurs="0" maxOccurs="1"/>
			</sequence>
			<!-- Enable/disable node outage processing -->
			<attribute name="status" type="string" use="required">
				<simpleType>
					<restriction base="string">
						<pattern value="(on|off)"/>
					</restriction>
				</simpleType>
			</attribute>
			<!-- Defines behavior of node outage processing when a service
			     has changed status to DOWN and a critical svc is not defined.
			     If "true", all remaining services on the interface are polled.
			-->
			<attribute name="pollAllIfNoCriticalServiceDefined" type="string" use="required">
				<simpleType>
					<restriction base="string">
						<pattern value="(true|false)"/>
					</restriction>
				</simpleType>
			</attribute>
		</complexType>
	</element>
	
	<!-- critical service
	
		 Defining a critical service greatly reduces the traffic generated by the poller
		 when an interface is DOWN.  When an interface is DOWN only the critical service
		 is polled.  If and when the critical service comes back UP then the interface's
		 other services are polled to determine their status.  When an interface is UP all
		 services are polled as expected.  If the critical service goes DOWN, all services 
		 are considered to be DOWN and therefore the interface is also considered DOWN.
	-->
	<element name="critical-service">
		<complexType>
			<!-- name of the critical service (typically, "ICMP") -->
			<attribute name="name" type="string" use="required"/>
		</complexType>
	</element>
	
	<!--- monitor for a service -->
	<element name="monitor">
		<complexType>
			<!--- the parameters for polling this service -->
			<sequence>
				<element ref="parameter" minOccurs="0" maxOccurs="unbounded"/>
			</sequence>
			<!--- the service name -->
			<attribute name="service" type="string" use="required"/>

			<!--- the class used to monitor/poll the service -
			      must implement interface org.opennms.netmgt.poller.monitors.ServiceMonitor
			-->
			<attribute name="class-name" type="string" use="required"/>
		</complexType>
	</element>

	<!--- package encapsulating addresses, services to be polled for these addresses etc. -->
	<element name="package">
		<complexType>
			<sequence>
				<!--- a rule which adresses belonging to this package must pass - 
				      this package is applied only to addresses that pass this filter
				-->
				<element ref="filter" minOccurs="1" maxOccurs="1"/>

				<!--- adresseses in this package -->
				<element name="specific" type="string" minOccurs="0" maxOccurs="unbounded"/>

				<!--- range of adresses in this package -->
				<element ref="include-range" minOccurs="0" maxOccurs="unbounded"/>

				<!--- range of adresses to be excluded from this package -->
				<element ref="exclude-range" minOccurs="0" maxOccurs="unbounded"/>

				<!--- a file URL holding specific addresses to be polled. Each line in
				      the URL file can be one of-
					<IP><space>#<comments>
					or
					<IP>
					or
					#<comments>
				       Lines starting with a '#' are ignored and so are characters after
				       a '<space>#' in a line.
				-->
				<element name="include-url" type="string" minOccurs="0" maxOccurs="unbounded"/>

                                <!-- RRD parms for response time data -->
                                <element ref="rrd" minOccurs="1" maxOccurs="1"/>

				<!--- services to be polled for addresses belonging to this package -->
				<element ref="service" minOccurs="1" maxOccurs="unbounded"/>

				<!--- scheduled outages - if a service is found down during this period, it is not reported as down -->
				<element name="outage-calendar" type="string" minOccurs="0" maxOccurs="unbounded"/>

				<!--- downtime model that determines rate at which addresses are to be
				      polled when they remain down for extended periods
				-->
				<element ref="downtime" minOccurs="1" maxOccurs="unbounded"/>
			</sequence>

			<!--- the name or identifier for this package -->
			<attribute name="name" type="string" use="required"/>
		</complexType>
	</element>

	<!--- a rule which adresses belonging to this package must pass - 
	      this package is applied only to addresses that pass this filter
	-->
	<element name="filter">
		<complexType>
			<simpleContent>
				<extension base="string"/>
			</simpleContent>
		</complexType>
	</element>

	<!--- range of adresses to be included in this package -->
	<element name="include-range">
		<complexType>
			<!--- starting address of the range -->
			<attribute name="begin" type="string" use="required"/>

			<!--- ending address of the range -->
			<attribute name="end" type="string" use="required"/>
		</complexType>
	</element>

	<!--- range of adresses to be excluded from this package -->
	<element name="exclude-range">
		<complexType>
			<!--- starting address of the range -->
			<attribute name="begin" type="string" use="required"/>

			<!--- ending address of the range -->
			<attribute name="end" type="string" use="required"/>
		</complexType>
	</element>

	<!--- service to be polled for addresses in this package -->
	<element name="service">
		<complexType>
			<!--- parameters to be used for polling this service -->
			<sequence>
				<element ref="parameter" minOccurs="0" maxOccurs="unbounded"/>
			</sequence>

			<!--- the service name -->
			<attribute name="name" type="string" use="required"/>

			<!--- the interval at which the service is to be polled -->
			<attribute name="interval" type="long" use="required"/>

			<!--- marker to say if service is user defined, used specifically for UI purposes -->
			<attribute name="user-defined" type="string" use="optional">
				<simpleType>
					<restriction base="string">
						<pattern value="(true|false)"/>
					</restriction>
				</simpleType>
			</attribute>

			<!--- status of the service, service is polled only if on -->
			<attribute name="status" type="string" use="optional">
				<simpleType>
					<restriction base="string">
						<pattern value="(on|off)"/>
					</restriction>
				</simpleType>
			</attribute>
		</complexType>
	</element>

	<!--- downtime model that determines rates at which addresses are to be
	      polled when they remain down for extended periods - usually are
	      polled at lower rates when down until they reach a certain downtime
	      at which they are marked 'deleted'
	-->
	<element name="downtime">
		<complexType>
			<!--- start of the interval -->
			<attribute name="begin" type="long" use="required"/>

			<!--- end of the interval -->
			<attribute name="end" type="long" use="optional"/>

			<!--- attribute that determines if service is to be deleted when
			      down continously until the start time
			-->
			<attribute name="delete" type="string" use="optional">
				<simpleType>
					<restriction base="string">
						<pattern value="(yes|true)"/>
					</restriction>
				</simpleType>
			</attribute>

			<!--- interval at which service is to be polled between the specified
			      start and end when service has been continously down
			 -->
			<attribute name="interval" type="long" use="optional"/>
		</complexType>
	</element>

	<!--- parameters to be used for polling this service -  for eg. for polling HTTP,
	      the URL to hit is configurable via a parameter. Parameters are specfic to
	      the service monitor
	-->
	<element name="parameter">
		<complexType>
			<attribute name="key" type="string" use="required"/>
			<attribute name="value" type="string" use="required"/>
		</complexType>
	</element>

        <!-- RRD parms -->
        <element name="rrd">
                <complexType>
                        <sequence>
                                <!-- Round Robin Archive definitions -->
                                <element name="rra" type="string" minOccurs="1" maxOccurs="unbounded">
                                        <simpleType>
                                                <restriction base="string">
                                                        <pattern value="^RRA:(AVERAGE|MIN|MAX|LAST):.*$"/>
                                                </restriction>
                                        </simpleType>
                                </element>
                        </sequence>

                        <!-- step size for the RRD -->
                        <attribute name="step" type="integer" use="required"/>
                </complexType>
        </element>

</schema>

