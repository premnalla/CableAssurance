/* Generated by Together */

package com.nokia.oss.ossj.sa.client;

import java.beans.*;
import java.util.*;
import javax.ejb.CreateException;
import java.io.File;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.net.URL;
import java.net.MalformedURLException;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.naming.NameNotFoundException;
import java.rmi.RemoteException;
import javax.rmi.PortableRemoteObject;
import javax.oss.order.*;
import javax.oss.service.*;
import javax.oss.*;

import javax.swing.JFrame;
import javax.swing.JOptionPane;

public class GenericTextClient {
    
    private Logger myLog;
    private UserInteractUtil myUserUtil;
    private JFrame rootFrame;
    
    private Context context;
    
    private String[][] initialContextDefaults = {
	{"com.sun.appserv.naming.S1ASCtxFactory","com.sun.enterprise.naming.SerialInitContextFactory","weblogic.jndi.WLInitialContextFactory"},
	{"iiop://localhost:3700","rmi://127.0.0.1","t3://127.0.0.1:7001"}
    };
    private static final int CONTEXT_CLASS = 0;
    private static final int CONTEXT_URL = 1;
    

    private Map knownObjects;
    
    //private Map orderKeys;
    
    public GenericTextClient() {
	this(0, null);
    }
    
    public GenericTextClient(int logLevel, File logFile) {
	// Don't ask me why, but this is a workaround because otherwise,
	// i.e. with "null" as parentComponent for JOptionPanes, the Dialog
	// won't show up from time to time.
	rootFrame = new JFrame("Simple Client");
	rootFrame.setVisible(true);
	rootFrame.setVisible(false);
	javax.swing.JOptionPane.showMessageDialog(rootFrame,"Welcome to SimpleTextClient");
	//---
	
	// Create Logger
	myLog = new Logger(logLevel);
	if (logFile!=null) {
	    myLog.setOutputFile(logFile);
	} else {
	    myLog.setRootFrame(rootFrame);
	}
	
	// Create Interaction Utilitiy
	myUserUtil = new UserInteractUtil();
	myUserUtil.setRootFrame(rootFrame);
	myUserUtil.setLogger(myLog);
	
	// Register PropertyEditors
	try {
	    java.beans.PropertyEditorManager.registerEditor(Class.forName("java.util.Date"),Class.forName("com.nokia.oss.ossj.sa.client.DateEditor"));
	    java.beans.PropertyEditorManager.registerEditor(Class.forName("java.net.InetAddress"),Class.forName("com.nokia.oss.ossj.sa.client.InetAddressEditor"));
	} catch (ClassNotFoundException cnfe) {
	    myLog.log(Logger.EXCEPTION,cnfe.toString());
	}
	
	knownObjects = new HashMap();
    }
    
    protected void addToKnownObjects(Object obj, Class whatClass) {
	if (whatClass == null) {
	    addToKnownObjects(obj, obj.getClass());
	} else {

	    // is there already a list for this class?
	    if (!knownObjects.containsKey(whatClass.getName())) {
		knownObjects.put(whatClass.getName(), new java.util.ArrayList());
	    }
	    
	    // add obj with current whatClass to knownObjects
	    List objectList = (List)knownObjects.get(whatClass.getName());
	    objectList.add(obj);
	    
	    // add object to the superclass' list 
	    // (room for optimization here - this is not really necessary if the algorithm how known objects
	    // are retreived is optimized
	    Class superClass = whatClass.getSuperclass();
	    if (superClass!=null) {
		addToKnownObjects(obj, superClass);
	    }
	    
	    // add object to all implemented interfaces
	    Class[] interfaces = whatClass.getInterfaces();
	    for (int i=0 ; i<interfaces.length ; i++) {
		addToKnownObjects(obj, interfaces[i]);
	    }
	}
    }
    
    protected Object getKnownObject(Class whatClass) {
	List knownList = (List)knownObjects.get(whatClass.getName());
	if (knownList.size()==0) {
	    myUserUtil.info("I do not know of any object of kind "+whatClass.getName());
	    return null;
	} else if (knownList.size()==1) {
	    myUserUtil.info("There is only one available object:\n"+knownList.get(0).toString());
	    return knownList.get(0);
	}
	String[] keys = new String[knownList.size()];
	Map string2ObjMap = new HashMap();
	Iterator it = knownList.iterator();
	Object tempObj;
	int i=0;
	while (it.hasNext()) {
	    tempObj = it.next();
	    keys[i++] = tempObj.toString();
	    string2ObjMap.put(keys[i-1], tempObj);
	}
	return string2ObjMap.get(keys[myUserUtil.select("Please select object", keys)] );
    }
    
    public Context getContext() {
	while (context == null) {
	    
	    myLog.log("Getting initial context");
	    Properties props = new Properties();
	    
	    String emptyContext = System.getProperty("java.naming.noProps");
	    if ( "true".equals(emptyContext)) {
	    	myLog.log("Creation of InitalContext with no properties requested");
	    	try {
	    		return new InitialContext();
                } catch (NamingException ne) {
		    myLog.log("Could not create InitialContext!");
		    myLog.log(Logger.EXCEPTION, ne.toString());
	        }
            }
	
	    String factory = System.getProperty(Context.INITIAL_CONTEXT_FACTORY);
	    myLog.log("System property for "+Context.INITIAL_CONTEXT_FACTORY+" is: "+factory);
	    String provider = System.getProperty(Context.PROVIDER_URL);
	    boolean reCheckProvider = true;
	    if (provider!=null && provider.length()>0) {
		// if attribute was in environment, use that value for sure
		reCheckProvider = false;
	    }
	    myLog.log("System property for "+Context.PROVIDER_URL+" is: "+provider);
	    
	    if ( factory == null || factory.equals("") ) {
		int i=0;
		while (factory==null && i < initialContextDefaults[CONTEXT_CLASS].length) {
		    try {
			myLog.log("testing for context class availability: "+initialContextDefaults[CONTEXT_CLASS][i]);
			Class contextClass=Class.forName(initialContextDefaults[CONTEXT_CLASS][i]);
			// if no exception is thrown, save class name to factory variable
			myLog.log("test successful!");
			factory = initialContextDefaults[CONTEXT_CLASS][i];
			if (reCheckProvider) {
			    // make proposal to user
			    provider = initialContextDefaults[CONTEXT_URL][i];
			}
		    } catch (Exception ee) {
			// ignore all exceptions
		    }
		    i++;
		}
		if (factory==null) {
		    factory = myUserUtil.queryUserString("Please provide the factory for initial context ("+Context.INITIAL_CONTEXT_FACTORY+")",
		    "");
		}
	    }
	    my_assert(factory!=null, "Factory is still null");
	    myLog.log("Adding "+factory+" with key "+Context.INITIAL_CONTEXT_FACTORY+" to property");
	    props.put(Context.INITIAL_CONTEXT_FACTORY,factory);
	    
	    if ( reCheckProvider ) {
		// first try it with the default provider url!
		try {
		    props.put(Context.PROVIDER_URL, provider);
		    context = new InitialContext(props);
		} catch (NamingException ne) {
		    provider = myUserUtil.queryUserString("Please specify URL for providing host ("+Context.PROVIDER_URL+")",
		    provider);
		}
	    }

            my_assert(provider!=null, "Provider is still null");
	    
            myLog.log("Adding "+provider+" with key "+Context.PROVIDER_URL+" to property");
            props.put(Context.PROVIDER_URL, provider);
	    try {
	                
		context = new InitialContext(props);
     	    } catch (NamingException ne) {
		myLog.log("Could not create Context from these parameters!");
		myLog.log(Logger.EXCEPTION, ne.toString());
	    }
	}
	return context;
    }
    
    
    protected Context getApplicationComponentContext() throws NamingException {
	// find all relevant JNDI entries and let the user select one
	javax.naming.NamingEnumeration all = null;
	
	// first search for all available systems
	//VP Context aSystemContext = getContext().createSubcontext("System");
	Context aSystemContext = (Context) getContext().lookup("System");
	
	all = aSystemContext.list("");
	List systems = new ArrayList();
	while (all.hasMore()) {systems.add( ((javax.naming.NameClassPair)all.next()).getName() ); }
	
	String system = null;
	if (systems.size()==1) {
	    system = (String)systems.get(0);
	} else {
	    system = (String)systems.get(myUserUtil.select("Select System you would like to search for JVTActivationSessions", (String[])systems.toArray(new String[0])));
	}

	// search for available applications
	//VP Context anApplicationContext = aSystemContext.createSubcontext(system+"/ApplicationType/ServiceActivation/Application");
	Context anApplicationContext = (Context) aSystemContext.lookup(system+"/ApplicationType/ServiceActivation/Application");
	
	all = anApplicationContext.list("");
	List applications = new ArrayList();
	while (all.hasMore()) {applications.add( ((javax.naming.NameClassPair)all.next()).getName() );}
	
	String application = null;
	if (applications.size()==1) {
	    application = (String)applications.get(0);
	} else {
	    application = (String)applications.get(myUserUtil.select("Select System you would like to search for JVTActivationSessions", (String[])applications.toArray(new String[0])));
	}
	
	// get all components
	//VP Context aComponentContext = anApplicationContext.createSubcontext(application+"/Comp");
	Context aComponentContext = (Context) anApplicationContext.lookup(application+"/Comp");
	
	return aComponentContext;
    }
    
    protected JVTActivationSession getJVTActivationSession(Context applicationContext) {

	JVTActivationHome omHome;
	try {
	    omHome = (JVTActivationHome)
	    javax.rmi.PortableRemoteObject.narrow(applicationContext.lookup("JVTHome"), JVTActivationHome.class);
	} catch (NamingException ne) {
	    myUserUtil.info("Could not find JVTHome!");
	    myLog.log(ne);
	    return null;
	} catch (ClassCastException cce) {
	    myUserUtil.info("Could not create JVTActivationSession!");
	    myLog.log(cce);
	    return null;
	}

	JVTActivationSession om;
	try {
	    om = omHome.create();
	} catch (RemoteException re) {
	    myLog.log(Logger.EXCEPTION, re.toString());
	    return null;
	} catch (CreateException ce) {
	    myLog.log(Logger.EXCEPTION, ce.toString());
	    return null;
	}
	return om;
    }
    
    public void createEventListener(Context applicationContext, JVTActivationSession aJVTActivationSession) {
	javax.jms.TopicSubscriber jvtEventSubscriber = null;
	javax.jms.TopicSubscriber xvtEventSubscriber = null;
	javax.jms.TopicSession eventSession = null;
	javax.jms.TopicConnection eventConnection = null;
	javax.jms.TopicConnectionFactory tConnFactory = null;
	
	javax.oss.Event[] events = null;
	try {
	    String[] eventTypes = aJVTActivationSession.getEventTypes();
	    events = new javax.oss.Event[eventTypes.length];
	    for (int i=0 ; i<events.length ; i++) {
		events[i] = aJVTActivationSession.getEventDescriptor(eventTypes[i]).makeEvent();
		myLog.log("Received event: "+events[i].getClass().getName());
	    }
	} catch (RemoteException re) {
	    myLog.log(re);
	} catch (javax.oss.IllegalArgumentException ias) {
	    myLog.log(ias);
	}
	
	// Get Topic Connection
	while (eventSession == null) {
	    try {
		Object result = applicationContext.lookup("TopicConnectionFactory");
		tConnFactory = (javax.jms.TopicConnectionFactory)PortableRemoteObject.narrow(result, javax.jms.TopicConnectionFactory.class);
		eventConnection = tConnFactory.createTopicConnection();
		eventSession = eventConnection.createTopicSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE);
	    } catch (NamingException ne) {
		myLog.log(ne);
	    } catch (ClassCastException cce) {
		myLog.log(cce);
	    } catch (javax.jms.JMSException jmse) {
		myLog.log(jmse);
	    }
	}
	
	myLog.log("Created session: "+eventSession);
	
	// Get jvt Topic
	while (jvtEventSubscriber == null) {
	    try {
		Object result = applicationContext.lookup("JVTEventTopic");
		javax.jms.Topic eventTopic = (javax.jms.Topic)PortableRemoteObject.narrow(result, javax.jms.Topic.class);
		jvtEventSubscriber = eventSession.createSubscriber(eventTopic);
	    } catch (NamingException ne) {
		myLog.log(ne);
	    } catch (ClassCastException cce) {
		myLog.log(cce);
	    } catch (javax.jms.JMSException jmse) {
		myLog.log(jmse);
	    }
	}
	
	myLog.log("Created subscriber: "+jvtEventSubscriber);
	
	 // Get jvt Topic
	while (xvtEventSubscriber == null) {
	    try {
		Object result = applicationContext.lookup("XVTEventTopic");
		javax.jms.Topic eventTopic = (javax.jms.Topic)PortableRemoteObject.narrow(result, javax.jms.Topic.class);
		xvtEventSubscriber = eventSession.createSubscriber(eventTopic);
	    } catch (NamingException ne) {
		myLog.log(ne);
	    } catch (ClassCastException cce) {
		myLog.log(cce);
	    } catch (javax.jms.JMSException jmse) {
		myLog.log(jmse);
	    }
	}
	
	myLog.log("Created subscriber: "+xvtEventSubscriber);
	
       try {
	    OrderEventListener aListener = new OrderEventListener(myLog, events);
	    jvtEventSubscriber.setMessageListener(aListener);
	    aListener = new OrderEventListener(myLog, events);
	    xvtEventSubscriber.setMessageListener(aListener);
	    myLog.log("registered for order events");
	    eventConnection.start();
	    myLog.log("started Connection - receiving messages NOW");
	} catch (javax.jms.JMSException jmse) {
	    myLog.log(jmse);
	}
    }
    
    public String getServiceType(JVTActivationSession aJVTActivationSession) {
	// let the user select one of the offered process types
	String[] types;
	while (true) {
	    try {
		types = aJVTActivationSession.getServiceTypes();
		int typeNo = myUserUtil.select("Select service you want to manage",types);
		return types[typeNo];
	    } catch (RemoteException re) {
		myLog.log(Logger.EXCEPTION, re.toString());
	    }
	}
    }
    
    public String getOrderType(JVTActivationSession aJVTActivationSession) {
	// let the user select one of the offered process types
	String[] types;
	while (true) {
	    try {
		types = aJVTActivationSession.getOrderTypes();
		int typeNo = myUserUtil.select("Select the type of order",types);
		return types[typeNo];
	    } catch (RemoteException re) {
		myLog.log(Logger.EXCEPTION, re.toString());
	    }
	}
    }
    
    protected ServiceValue getServiceValue(JVTActivationSession aJVTActivationSession, String type) throws javax.oss.IllegalArgumentException, RemoteException {
	return aJVTActivationSession.makeServiceValue(type);
    }
    
    protected OrderValue getOrderValue(JVTActivationSession aJVTActivationSession, String type) throws javax.oss.IllegalArgumentException, RemoteException {
	return aJVTActivationSession.makeOrderValue(type);
    }
    
    protected void printAttributeNames(ManagedEntityValue mev) {
	String[] attributes = mev.getAttributeNames();
	// by definition this array should always be non-null and filled with
	// one attribute name (key) by minimum
	Arrays.sort(attributes);
	myLog.logAlways("Attributes of Value object:");
	StringBuffer buffer = new StringBuffer();
	for (int i=0; i<attributes.length-1; i++) {
	    buffer.append("->\t"+attributes[i]+"\n");
	}
	buffer.append("->\t"+attributes[attributes.length-1]+"\n");
	myLog.logAlways(buffer.toString());
    }
    
    protected static Class getAttributeType(ManagedEntityValue mev, String attribute) {
	try {
	    PropertyDescriptor[] props = Introspector.getBeanInfo(mev.getClass()).getPropertyDescriptors();
	    for (int i=0 ; i<props.length ; i++) {
		if (props[i].getName().equals(attribute)) {
		    return props[i].getPropertyType();
		}
	    }
	} catch (java.beans.IntrospectionException ie) {
	}
	return null;
    }
    
    protected void printAttributeContents(ManagedEntityValue mev) {
	printAttributeContents(mev, myLog);
    }

    public static void printAttributeContents(ManagedEntityValue mev, Logger myLog) {
	StringBuffer buffer = new StringBuffer();
	printAttributeContents(mev, buffer);
	myLog.logAlways(buffer.toString());
    }
    
    public static void printAttributeContents(ManagedEntityValue mev, StringBuffer buffer) {
	printAttributeContents("", mev, buffer);
    }

    public static void printAttributeContents(String prefix, ManagedEntityValue mev, StringBuffer buffer) {
	String newPrefix = "	 ";
	String[] attributes = mev.getAttributeNames();
	Arrays.sort(attributes);
	String[] populatedTemp = mev.getPopulatedAttributeNames();
	List populated = Arrays.asList(populatedTemp);
	buffer.append(prefix+"Content of Value object:\n");
	for (int i=0; i<attributes.length; i++) {
	    buffer.append(prefix+newPrefix+attributes[i]+" ("+getAttributeType(mev,attributes[i])+"): ");
	    if (populated.contains(attributes[i])) {
		try {
		    Object obj = mev.getAttributeValue(attributes[i]);
		    if (obj==null) {
			buffer.append("null\n");
		    } else {
			if (obj.getClass().isArray()) {
			    List aList = Arrays.asList((Object[])obj);
			    if (aList.size()==0) {
				buffer.append("empty array");
			    } else {
				Iterator objListIterator = aList.iterator();
				if (ManagedEntityValue.class.isAssignableFrom(obj.getClass().getComponentType())) {
				    while (objListIterator.hasNext()) {
					obj = objListIterator.next();
					buffer.append("\n");
					printAttributeContents(prefix+newPrefix+">  ", (ManagedEntityValue)obj, buffer);
				    }
				} else {
				    while (objListIterator.hasNext()) {
					obj = objListIterator.next();
					buffer.append(obj.toString());
				    }
				    buffer.append("\n");
				}
			    }
			} else {
			    if (obj instanceof ManagedEntityValue) {
				buffer.append("\n");
				printAttributeContents(prefix+newPrefix+">  ", (ManagedEntityValue)obj, buffer);
			    } else {
				buffer.append(obj.toString()+"\n");
			    }
			}
		    }
		} catch (java.lang.IllegalArgumentException ise) {
		    // should not happen since attribute names come from Value Object
		}
	    } else {
		buffer.append("not populated\n");
	    }
	}
    }
    
    protected String getCount(int i) {
	switch (i) {
	    case 1: return "1st";
	    case 2: return "2nd";
	    case 3: return "3rd";
	    default: return i+"th";
	}
    }
    
    protected Class wrapPrimitives(Class aClass) {
	if (aClass.isPrimitive()) {
	    if (aClass == Long.TYPE) {
		aClass = Long.class;
	    } else
		if (aClass == Integer.TYPE) {
		    aClass = Integer.class;
		} else
		    if (aClass == Byte.TYPE) {
			aClass = Byte.class;
		    } else
			if (aClass == Character.TYPE) {
			    aClass = Character.class;
			} else
			    if (aClass == Short.TYPE) {
				aClass = Short.class;
			    } else
				if (aClass == Boolean.TYPE) {
				    aClass = Boolean.class;
				} else
				    if (aClass == Double.TYPE) {
					aClass = Double.class;
				    } else
					if (aClass == Float.TYPE) {
					    aClass = Float.class;
					}
	}
	return aClass;
    }
    
    protected void modifyAttribute(ManagedEntityKey mek) {
	if (mek.getPrimaryKey()==null) {
	    mek.setPrimaryKey((String)myUserUtil.createProperty("New value for primaryKey",mek.getPrimaryKey().getClass()));
	} else {
	    mek.setPrimaryKey((String)myUserUtil.editProperty("New value for primaryKey",mek.getPrimaryKey()));
	}
	
	if (mek.getType()==null) {
	    mek.setType((String)myUserUtil.createProperty("New value for type",mek.getType().getClass()));
	} else {
	    mek.setType((String)myUserUtil.editProperty("New value for type",mek.getType()));
	}
    }
    
    protected Object[] modifyAttributeArray(JVTActivationSession aJVTActivationSession, ManagedEntityValue mev,
    String attributeName, Class attributeType, Object[] attributeValue) {
	Class arrayType = attributeType.getComponentType();
	String completeComponentName = arrayType.getName();
	String componentName = completeComponentName.substring(completeComponentName.lastIndexOf('.')+1);
	String componentsName = componentName+"s";
	String[] arrayOptions = {
	    "show "+componentsName, 
	    "add new "+componentName, 
	    "remove "+componentName, 
	    "edit "+componentName,
	    "back to previous ManagedEntity"
	};
	
	// work on a Vector intermediatly 
	Vector elements = new Vector();
	if (attributeValue!=null) {
	    elements.addAll(Arrays.asList(attributeValue));
	}
	boolean isMev = ManagedEntityValue.class.isAssignableFrom(arrayType);
	boolean isService = ServiceValue.class.isAssignableFrom(arrayType);
	boolean exit = false;
	while (!exit) {
	    int selection = myUserUtil.select("What do you want to do with the "+componentName+"-Array ?", arrayOptions);
	    switch (selection) {
		case 0: { // show
		    for (int i=0 ; i<elements.size() ; i++) {
			myLog.logAlways("Element "+i+":");
			if (isMev) {
			    printAttributeContents((ManagedEntityValue)elements.get(i));
			} else {
			    System.out.println(elements.get(i).toString());
			}
		    }
		    break;
		}
		case 1: { // add new
		    int position = 0;
		    if (elements.size()>0) {
			String[] positions = new String[elements.size()+1];
			positions[0] = "before "+getCount(1)+" element";
			positions[positions.length-1] = "after "+getCount(positions.length-1)+" element";
			for (int i=1 ; i<positions.length-1 ; i++) {
			    positions[i] = "between "+getCount(i-1)+" and "+getCount(i)+"element";
			}
			position = myUserUtil.select("Where should the new "+componentName+" be added?", positions);
		    }
		    Object newElement = null;
		    if (0==myUserUtil.select("Create new "+componentName+"?", new String[] {"yes", "no"})) {
			try {
			    if (isService) {
				try {
				    String serviceType = getServiceType(aJVTActivationSession);
				    myLog.log("received serviceType "+serviceType);
				    newElement = aJVTActivationSession.makeServiceValue(serviceType);
				} catch (javax.oss.IllegalArgumentException iae) {
				    myLog.log(Logger.EXCEPTION, iae.toString());
				} catch (java.rmi.RemoteException re) {
				    myLog.log(Logger.EXCEPTION, re.toString());
				}
			    } else {
				newElement = mev.getClass().getMethod("make"+componentName, new Class[0]).invoke(mev, new Object[0]);
			    }
			} catch (NoSuchMethodException nsme) {
			    myLog.logAlways("Don't know how to create new type of "+componentName);
			    myLog.log(nsme);
			} catch (IllegalAccessException iae) {
			    myLog.log(iae);
			} catch (java.lang.reflect.InvocationTargetException ite) {
			    myLog.log(ite);
			}
		    } else {
			newElement = getKnownObject(arrayType);
		    }
		    elements.insertElementAt(newElement, position);
		    if (isService) {
			manageServiceValue(aJVTActivationSession, (ServiceValue)newElement);
		    } else {
			editValue(aJVTActivationSession, newElement, componentName);
		    }
		    break;
		}
		case 2: { // remove
		    int position = 0;
		    if (elements.size()>0) {
			String[] positions = new String[elements.size()];
			for (int i=0 ; i<positions.length ; i++) {
			    positions[i] = getCount(i+1)+" element";
			}
			position = myUserUtil.select("Which "+componentName+" shall be removed?", positions);
			elements.remove(position);
			myUserUtil.info("Removed "+getCount(position+1)+" "+componentName);
		    } else {
			myUserUtil.info("No "+componentsName+" available");
		    }
		    break;
		}
		case 3: { // edit 
		    int position = 0;
		    if (elements.size()>0) {
			String[] positions = new String[elements.size()];
			for (int i=0 ; i<positions.length ; i++) {
			    positions[i] = getCount(i+1)+" element";
			}
			position = myUserUtil.select("Which "+componentName+" shall be edited?", positions);
			
			if (isService) {
			    manageServiceValue(aJVTActivationSession, (ServiceValue)elements.get(position));
			} else {
			    editValue(aJVTActivationSession, elements.get(position), componentName);
			}

		    } else {
			myUserUtil.info("No "+componentsName+" available");
		    }
		    break;
		}
		case 4: { // exit
		    exit = true;
		    break;
		}
	    }
	}
	try {
	    return elements.toArray((Object[])java.lang.reflect.Array.newInstance(arrayType, elements.size()));
	} catch (NegativeArraySizeException nase) {
	}
	return null;
    }
    
    protected void modifyAttribute(JVTActivationSession aJVTActivationSession, ManagedEntityValue mev) {
	String[] attributes = mev.getAttributeNames();
	Arrays.sort(attributes);
	int attribute = myUserUtil.select("Which attribute shall be changed?", attributes);
	String aName = attributes[attribute];
	
	// determine class and value of attribute
	Class attributeType = null;
	Object attributeValue = null;
	
	if (mev.isPopulated(aName)) {
	    // if attribute is populated, read value first, then class
	    attributeValue = mev.getAttributeValue(aName);
	}
	attributeType = getAttributeType(mev, aName);
	
	boolean ok=true;
	Object newValue = null;
	if (attributeType.isArray()) {
	    newValue = modifyAttributeArray(aJVTActivationSession, mev, aName, attributeType, (Object[])attributeValue);
	} else {
	    if (attributeValue==null) {
		// if attribute is not populated or value was null, read class and try to instanciate a new isntance
		try {
		    if (!attributeType.isPrimitive()) {
			attributeValue = attributeType.newInstance();
		    }
		} catch (InstantiationException ie) {
		    myLog.log(Logger.EXCEPTION, ie.toString());
		} catch (IllegalAccessException iae) {
		    myLog.log(Logger.EXCEPTION, iae.toString());
		}
	    }
	    if (attributeValue!=null) {
		try {
		    newValue = editValue(aJVTActivationSession, attributeValue, aName);
		} catch (java.lang.IllegalArgumentException iae) {
		    myLog.log(iae);
		    ok = false;
		}
	    } else {
		if (ServiceValue.class.isAssignableFrom(attributeType)) {
		    try {
			String serviceType = getServiceType(aJVTActivationSession);
			myLog.log("received serviceType "+serviceType);
			attributeValue = aJVTActivationSession.makeServiceValue(serviceType);
		    } catch (javax.oss.IllegalArgumentException iae) {
			myLog.log(Logger.EXCEPTION, iae.toString());
		    } catch (java.rmi.RemoteException re) {
			myLog.log(Logger.EXCEPTION, re.toString());
		    }
		    manageServiceValue(aJVTActivationSession, (ServiceValue)attributeValue);
		    newValue = attributeValue;
		} else {
		    try {
			newValue = myUserUtil.createProperty("New value for "+aName,attributeType);
		    } catch (java.lang.IllegalArgumentException iae) {
			myLog.log(iae);
			ok = false;
		    }
		}
	    }
	}
	if (ok) {
	    try {
		mev.setAttributeValue(aName,newValue);
	    } catch (java.lang.IllegalArgumentException iae) {
		myLog.log(iae);
	    }
	}
    }

    protected Object editValue(JVTActivationSession aJVTActivationSession, Object attributeValue, String attributeName) {
	Object newValue = null;
	// some special handling for special attribute types
	if (attributeValue instanceof ServiceValue) {
	    manageServiceValue(aJVTActivationSession, (ServiceValue)attributeValue);
	    newValue = attributeValue;
	} else if (attributeValue instanceof ManagedEntityValue) {
	    modifyAttribute(aJVTActivationSession, (ManagedEntityValue)attributeValue);
	    newValue = attributeValue;
	} else if (attributeValue instanceof ManagedEntityKey) {
	    modifyAttribute((ManagedEntityKey)attributeValue);
	    newValue = attributeValue;
	} else {
	    newValue = myUserUtil.editProperty("New value for "+attributeName,attributeValue);
	}
	return newValue;
    }
    
    
    protected void manageServiceValue(JVTActivationSession aJVTActivationSession, ServiceValue aServiceValue) {
	String[] menu = {
	    "view all attribute names",
	    "view all attribute contents",
	    "change an attribute",
	    "nothing more, I'm done."};
	    int action=0;
	    boolean exit = false;
	    while (!exit) {
		action = myUserUtil.select("What would you like to do with this serviceValue?",menu);
		switch (action) {
		    case 0:
			printAttributeNames(aServiceValue);
			break;
		    case 1:
			printAttributeContents(aServiceValue);
			break;
		    case 2:
			modifyAttribute(aJVTActivationSession, aServiceValue);
			break;
		    case 3:
			exit=true;
			break;
			default:
			    //nothing
			    break;
		}
	    }
	    
    }
    protected void manageOrderValue(JVTActivationSession aJVTActivationSession, OrderValue anOrderValue) {
	String[] menu = {
	    "view all attribute names",
	    "view all attribute contents",
	    "change an attribute",
	    "nothing more, I'm done."};
	    int action=0;
	    boolean exit = false;
	    while (!exit) {
		action = myUserUtil.select("What would you like to do with this orderValue?",menu);
		switch (action) {
		    case 0:
			printAttributeNames(anOrderValue);
			break;
		    case 1:
			printAttributeContents(anOrderValue);
			break;
		    case 2:
			modifyAttribute(aJVTActivationSession, anOrderValue);
			break;
		    case 3:
			exit=true;
			break;
			default:
			    //nothing
			    break;
		}
	    }
	    
    }
    
    protected void createOrderByValue(JVTActivationSession aJVTActivationSession) {
	// what services does this JVTActivationSession provide?
	// String service = getServiceType(aJVTActivationSession);
	
	// what kind of order?
	String orderType = getOrderType(aJVTActivationSession);
	OrderValue orderValue;
	try {
	    orderValue = getOrderValue(aJVTActivationSession, orderType);
	} catch (javax.oss.IllegalArgumentException iae) {
	    // should not happen, since orderType is read from JVTActivationSession
	    myLog.log(Logger.EXCEPTION, iae.toString());
	    return;
	} catch (RemoteException re) {
	    myUserUtil.info("Could not get an orderValue!");
	    myLog.log(Logger.EXCEPTION, re.toString());
	    return;
	}
	
	manageOrderValue(aJVTActivationSession, orderValue);
	
	try {
	    OrderKey anOrderKey = aJVTActivationSession.createOrderByValue(orderValue);
	    addToKnownObjects(anOrderKey, null);
	    myUserUtil.info("Order was created\n"+anOrderKey.toString());
	} catch (javax.oss.IllegalAttributeValueException iave) {
	    myLog.log(Logger.EXCEPTION, iave.toString());
	    myUserUtil.info("Order could not be created");
	} catch (javax.oss.IllegalArgumentException iae) {
	    myLog.log(Logger.EXCEPTION, iae.toString());
	    myUserUtil.info("Order could not be created");
	} catch (javax.ejb.CreateException ce) {
	    myLog.log(Logger.EXCEPTION, ce.toString());
	    myUserUtil.info("Order could not be created");
	} catch (java.rmi.RemoteException re) {
	    myLog.log(Logger.EXCEPTION, re.toString());
	    myUserUtil.info("Order could not be created");
	}
    }
    
    protected OrderKey selectOrderKey() {
	return (OrderKey)getKnownObject(OrderKey.class);
    }
    
    protected void startOrderByKey(JVTActivationSession aJVTActivationSession) {
	OrderKey anOrderKey = selectOrderKey();
	try {
	    aJVTActivationSession.startOrderByKey(anOrderKey);
	    myLog.log("Started order:\n"+anOrderKey.toString());
	} catch (javax.ejb.ObjectNotFoundException onfe) {
	    myLog.log(onfe);
	} catch (javax.oss.IllegalStateException ise) {
	    myLog.log(ise);
	} catch (javax.oss.IllegalArgumentException iae) {
	    myLog.log(iae);
	} catch (RemoteException re) {
	    myLog.log(re);
	}
	
    }
    
    protected void getOrderByKey(JVTActivationSession aJVTActivationSession) {
	OrderKey anOrderKey = selectOrderKey();
	try {
	    OrderValue anOrderValue = aJVTActivationSession.getOrderByKeyAllAttr(anOrderKey);
	    myLog.log("Retreived order:\n"+anOrderKey.toString());
	    myLog.log("ORDER:");
	    printAttributeContents(anOrderValue);
	} catch (javax.ejb.ObjectNotFoundException onfe) {
	    myLog.log(onfe);
	} catch (javax.oss.IllegalArgumentException iae) {
	    myLog.log(iae);
	} catch (RemoteException re) {
	    myLog.log(re);
	}
    }
    
    protected void getOrderByTemplate(JVTActivationSession aJVTActivationSession) {
	try {
	    OrderValue anOrderValue = getOrderValue(aJVTActivationSession, getOrderType(aJVTActivationSession));
	    anOrderValue.unpopulateAllAttributes();
	    manageOrderValue(aJVTActivationSession, anOrderValue);
	    OrderValueIterator anIterator = aJVTActivationSession.getOrdersByTemplates(new OrderValue[] {anOrderValue}, new String[0]);
	    OrderValue[] orderValues;
	    while (true) {
		orderValues = anIterator.getNextOrder(10);
		if (orderValues.length==0) {
		    break;
		}
		for (int i=0 ; i<orderValues.length ; i++) {
		    if (orderValues[i].isPopulated(OrderValue.KEY)) {
			OrderKey aKey = orderValues[i].getOrderKey();
			addToKnownObjects(aKey, null);
		    }
		    if (orderValues[i].isPopulated(OrderValue.SERVICES)) {
			ServiceValue[] services = orderValues[i].getServices();
			for (int j=0; j<services.length; j++) {
			    addToKnownObjects(services[j], null);
			}
		    }
		    printAttributeContents(orderValues[i]);
		}
	    }
	} catch (javax.oss.IllegalArgumentException iae) {
	    myLog.log(iae);
	} catch (RemoteException re) {
	    myLog.log(re);
	} catch (javax.oss.UnsupportedOperationException uoe) {
	    myLog.log(uoe);
	}
    }

    protected void getAllOrders(JVTActivationSession aJVTActivationSession) {
	try {
	    QueryValue queryValue = aJVTActivationSession.makeQueryValue(QueryAllOrdersValue.class.getName());
	    OrderValueIterator anIterator = aJVTActivationSession.queryOrders(queryValue, new String[0]);
	    OrderValue[] orderValues;
	    while (true) {
		orderValues = anIterator.getNextOrder(10);
		if (orderValues.length==0) {
		    break;
		}
		for (int i=0 ; i<orderValues.length ; i++) {
		    if (orderValues[i].isPopulated(OrderValue.KEY)) {
			OrderKey aKey = orderValues[i].getOrderKey();
			addToKnownObjects(aKey, null);
		    }
		    if (orderValues[i].isPopulated(OrderValue.SERVICES)) {
			ServiceValue[] services = orderValues[i].getServices();
			for (int j=0; j<services.length; j++) {
			    addToKnownObjects(services[j], null);
			}
		    }
		    printAttributeContents(orderValues[i]);
		}
	    }
	} catch (javax.oss.IllegalArgumentException iae) {
	    myLog.log(iae);
	} catch (RemoteException re) {
	    myLog.log(re);
	}
    }
    
    protected void getOrder(JVTActivationSession aJVTActivationSession) {
	String[] menu = {
	    "query with single existing key",
	    "query by template",
	    "query all orders",
	    "return to main menu"
	};
	
	int action = myUserUtil.select("What do you want to do?",menu);
	switch (action) {
	    case 0:
		getOrderByKey(aJVTActivationSession);
		break;
	    case 1:
		getOrderByTemplate(aJVTActivationSession);
		break;
	    case 2:
		getAllOrders(aJVTActivationSession);
		break;
	    default: //nothing
		break;
	}
    }
    
    protected void modifyOrder(JVTActivationSession aJVTActivationSession) {
	OrderKey anOrderKey = selectOrderKey();
	try {
	    OrderValue anOrderValue = aJVTActivationSession.getOrderByKeyAllAttr(anOrderKey);
	    myLog.log("Retreived order:\n"+anOrderKey.toString());
	    manageOrderValue(aJVTActivationSession, anOrderValue);
	    aJVTActivationSession.setOrderByValue(anOrderValue, true);
	} catch (javax.oss.IllegalAttributeValueException iave) {
	  myLog.log(iave);
	} catch (javax.oss.ResyncRequiredException rre) {
	    myLog.log(rre);
	} catch (javax.ejb.ObjectNotFoundException onfe) {
	    myLog.log(onfe);
	} catch (javax.oss.IllegalArgumentException iae) {
	    myLog.log(iae);
	} catch (RemoteException re) {
	    myLog.log(re);
	} catch (javax.oss.SetException se) {
	    myLog.log(se);
	} catch (javax.oss.IllegalStateException ise) {
	    myLog.log(ise);
	}
	
    }
    
    
    protected void run() {
	try {

	    Context applicationContext = getApplicationComponentContext();
	    
	    // select one of these JNDI-Names and turn it to an JVTActivationSession
	    JVTActivationSession aJVTActivationSession = null;
	    aJVTActivationSession = getJVTActivationSession(applicationContext);
	    if (aJVTActivationSession == null) {
		System.out.println("Creation of JVTActivationSession failed for some unknown reason");
		System.exit(1);
	    }
	    
	    createEventListener(applicationContext, aJVTActivationSession);
	    
	    String[] menu = {
		"create an order",
		"start an order",
		"get an order",
		"modify an order",
		"cancel an order",
		"quit this nice client"
	    };
	    boolean exit = false;
	    
	    while (!exit) {
		int action = myUserUtil.select("What do you want to do?",menu);
		switch (action) {
		    case 0: // CREATE AN ORDER
			createOrderByValue(aJVTActivationSession);
			break;
		    case 1: // START AN ORDER
			startOrderByKey(aJVTActivationSession);
			break;
		    case 2: // GET AN ORDER
			getOrder(aJVTActivationSession);
			break;
		    case 3: // MODIFY AN ORDER
			modifyOrder(aJVTActivationSession);
			break;
		    case 4: // REMOVE AN ORDER
			break;
		    case 5:exit=true;
		    break;
		    default: //nothing
			break;
		}
	    }
	    
	} catch (Exception e) {
	    System.out.println(e);
	    e.printStackTrace();
	    System.exit(1);
	}
    }
    
    public static void printHelp() {
	System.out.println(
	"Usage: java com.nokia.oss.client.GenericTextClient [ options ]\n\n"+
	"	-h\n"+
	"	    displays this help message\n\n"+
	"	-ln\n"+
	"	    adjusts logging level to n\n"+
	"	    n = -1 - no output\n"+
	"	    n = 0  - default output level\n"+
	"	    n = 1  - detailed output level\n"+
	"	    n = 2  - printing exceptions\n"+
	"	    ... higher number, more output\n\n"+
	"	-o<filename>\n"+
	"	    log into file\n\n"+
	"	-e<class>=<editorclass>\n"+
	"	    defines, that properties from type <class> can be edited\n"+
	"	    with PropertyEditor <editorclass>\n"+
	"	    see java.beans.PropertyEditor for details\n\n"
	);
	System.exit(0);
    }
    
    public static void main(String[] argv) {
	
	System.out.println("\nStarting Client...\n\tuse Parameter \"-h\" for more options");
	
	File logFile = null;
	int logLevel = -1; // do not log
	for (int i=0; i <= argv.length-1; i++) {
	    
	    if (argv[i].startsWith("-l")) {
		if (argv[i].length() == 2 ) {
		    logLevel = -1; // do not log
		} else {
		    try {
			logLevel = (new Integer(argv[i].substring(2,argv[i].length()))).intValue();
		    } catch ( NumberFormatException nfe) {
			printHelp();
		    }
		}
		
	    } else if (argv[i].equals("-h")) {
		printHelp();
	    } else if (argv[i].startsWith("-o")) {
		String filename = argv[i].substring(2,argv[i].length());
		logFile = new File(filename);
	    } else if (argv[i].startsWith("-e")) {
		 System.out.println("\ncompute -e option: "+argv[i]);
		StringTokenizer st = new StringTokenizer(argv[i].substring(2,argv[i].length()),"=");
		if (st.countTokens()!=2) {
		 	System.out.println("\n-e option is not in ths a=b format: "+argv[i]);
		    printHelp();
		}
		try {
		    Class type = Class.forName(st.nextToken());
		    Class typeEditor = Class.forName(st.nextToken());
		    java.beans.PropertyEditorManager.registerEditor(type, typeEditor);
		    System.out.println("Registered "+typeEditor+" as editor for "+type);
		} catch (ClassNotFoundException cnfe) {
		    System.out.println("Could not interpret "+argv[i]);
		    System.out.println(cnfe);
		    printHelp();
		}
	    }
	}
	
	GenericTextClient aClient = new GenericTextClient(logLevel, logFile);
	aClient.run();
	System.out.println("Thanks ... press Ctrl-C to exit");
	System.exit(0);
    }
    
    static void my_assert(boolean b, String id) {
	if (!b) {
	    throw new java.lang.IllegalArgumentException(id);
	}
    }
    
}
