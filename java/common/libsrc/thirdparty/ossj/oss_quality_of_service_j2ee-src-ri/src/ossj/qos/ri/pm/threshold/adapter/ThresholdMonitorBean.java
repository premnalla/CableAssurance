/*
 * Copyright © 2001 Ericsson Radio Systems AB. All rights reserved.
 * Use is subject to license terms.
 */
package ossj.qos.ri.pm.threshold.adapter;

import java.rmi.*;
import javax.ejb.*;
import javax.naming.*;
import javax.rmi.PortableRemoteObject;
import java.util.*;
import java.io.*;

import ossj.qos.util.Log;
import ossj.qos.util.Util;
import ossj.qos.ApplicationContextImpl;
import ossj.qos.pm.threshold.*;

import javax.oss.pm.util.ObservableObjectClassIterator;
import javax.oss.fm.monitor.*;
import javax.oss.pm.threshold.*;
import javax.oss.pm.measurement.*;
import javax.oss.pm.util.*;
import javax.oss.*;

/**
 * Threshold Monitor implementation. Implementation of the
 * {@link javax.oss.pm.threshold.JVTThresholdMonitorSession
 *  JVTThresholdMonitorSession} interface.
 *
 * <p>Monitors thresholds by setting up performance monitors using the
 * {@link javax.oss.pm.measurement.JVTPerformanceMonitorSession
 * JVTPerformanceMonitorSession} interface. Alarms are sent by using the
 * {@link javax.oss.fm.monitor.JVTAlarmMonitorSession JVTAlarmMonitorSession}
 * interface.
 *
 * <p>Uses a container-managed-persistent entity bean,
 * {@link ThresholdMonitorEntityBean ThresholdMonitorEntityBean} to store the
 * thresholds.
 *
 * <p>A message-driven bean, {@link ThresholdMonitorMessageBean ThresholdMonitorMessageBean},
 * is used for receiving Performance Monitor events and the process them against
 * the stored thresholds. If a threshold violation is found an alarm is sent.
 *
 * @author Henrik Lindstrom, Katarina Wahlström, Hooman Tahamtani
 */
public class ThresholdMonitorBean implements SessionBean, MessageConstants, EnvironmentConstants {

    /**
     * Compartor for PerformanceAttributeDescriptor instances.
     */
    private static Comparator PADComparator = new Comparator() {

        public int compare(Object o1, Object o2) {
            if ( o1 instanceof PerformanceAttributeDescriptor && o2 instanceof PerformanceAttributeDescriptor ) {
                PerformanceAttributeDescriptor pad1 = (PerformanceAttributeDescriptor)o1,
                    pad2 = (PerformanceAttributeDescriptor)o2;

                int result = pad1.getName().compareTo( pad2.getName() );
                if ( result == 0 ) {
                    result = pad1.getType() - pad2.getType(); // zero if equal

                    if ( result==0 ) {
                        result = pad1.getCollectionMethod().compareTo( pad2.getCollectionMethod() );

                        if ( result==0 ) {
                            if ( pad1.isArray() == pad2.isArray() ) {
                                result=0;
                            } else if ( pad1.isArray()==false && pad2.isArray()==true) {
                                result = -1;
                            } else {
                                result = 1;
                            }
                        }
                    }
                }
                return result;
            }
            throw new ClassCastException( "Not PerformanceAttributeDescriptor(s)" );
        }

        public boolean equals(Object obj) {
            if ( obj!= null && this.getClass().isInstance( obj ) ) {
                return true;
            }
            return false;
        }
    };

    //
    // Class member variables.
    //

    /**
     * If true then the application distinguished name is included in all alarm
     * events generated by the threshold monitor.
     */
    private boolean includeApplicationDNInEvent = true;

    /**
     * Holds the application context.
     */
    private ApplicationContext applicationContext = null;

    /**
     * The application distinguished name.
     */
    private String applicationDN = null;

    /**
     * Local interface for threshold monitor entity.
     */
    private ThresholdMonitorEntityLocalHome entityHome = null;

    /**
     * Interface for performance monitor session.
     */
    private JVTPerformanceMonitorSession performanceMonitorSession = null;

    /**
     * Interace towards the Alarm Monitor (Fault Monitor).
     */
    private JVTAlarmMonitorSession alarmMonitorSession = null;

    /**
     * The session context.
     */
    private SessionContext sessionContext;

    /**
     * The report foramt used when creating performance monitors. The report
     * format is initialized from the performance monitor the first time the
     * method <code>getReportFormat()</code> is called.
     *
     * <p>The report format used is specification "3G" and type "XML".
     *
     * @see #getReportFormat
     */
    private ReportFormat reportFormatXML3G = null;

    //
    // EJB specific methods.
    //

    /**
     * Initialize home interface for performance monitor bean and local home
     * interface for threshold monitor entity bean.
     */
    public void ejbCreate() {
        Log.write(this,Log.LOG_ALL,"ejbCreate()","called");
        // get reference to threshold monitor entity bean here
        //System.out.println("wrx--before initializeEntityBean");
        initializeEntityBean();
       //System.out.println("wrx--after initializeEntityBean");

        // get reference to performance monitor home
        //System.out.println("wrx--before get the pm home");
        JVTPerformanceMonitorHome pmHome = getPerformanceMonitorHome();
        // create performance monitor session
        try {
            performanceMonitorSession =  pmHome.create();
        } catch ( CreateException e ) {
            Log.write(this,Log.LOG_MAJOR,"ejbCreate()","exception="+e);
            Log.write( ERR_PERFORMANCE_MONITOR_SESSION_CREATE_FAILED );
            throw new RuntimeException( ERR_PERFORMANCE_MONITOR_SESSION_CREATE_FAILED );
        } catch ( RemoteException e ) {
            Log.write(this,Log.LOG_MAJOR,"ejbCreate()","exception="+e);
            Log.write( ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
            throw new RuntimeException( ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
        }
        //System.out.println("wrx--after get the pm home");
           

        // get reference to alarm monitor home
        //System.out.println("wrx--before tet am home");
        JVTAlarmMonitorHome amHome = getAlarmMonitorHome();
        // create alarm monitor session
        try {
            alarmMonitorSession = amHome.create();
        } catch ( CreateException e ) {
            Log.write(this,Log.LOG_MAJOR,"ejbCreate()","exception="+e);
            Log.write( ERR_ALARM_MONITOR_SESSION_CREATE_FAILED );
            throw new RuntimeException( ERR_ALARM_MONITOR_SESSION_CREATE_FAILED );
        } catch ( RemoteException e ) {
            Log.write(this,Log.LOG_MAJOR,"ejbCreate()","exception="+e);
            Log.write( ERR_REMOTE_INVOCATION_ON_ALARM_MONITOR );
            throw new RuntimeException( ERR_REMOTE_INVOCATION_ON_ALARM_MONITOR );
        }
        //System.out.println("wrx--after get am home");

        //System.out.println("wrx--before initializeApplicationContext()"); 
        initializeApplicationContext();
        //System.out.println("wrx--after initializeApplicationContext()");
    }

    /**
     * Free the resources. Resets the references to alarm monitor, performance
     * monitor and entity bean.
     */
    public void ejbRemove() throws RemoteException {
        Log.write(this,Log.LOG_ALL,"ejbRemove()","called");
        performanceMonitorSession = null;
        alarmMonitorSession = null;
        entityHome = null;
    }

    public void ejbActivate() throws RemoteException {
        Log.write(this,Log.LOG_ALL,"ejbActivate()","called");
    }

    public void ejbPassivate() throws RemoteException {
        Log.write(this,Log.LOG_ALL,"ejbPassivate()","called");
    }

    public void setSessionContext(SessionContext sessionContext) throws RemoteException {
        Log.write(this,Log.LOG_ALL,"setSessionContext()","called");
        this.sessionContext = sessionContext;
    }

    //
    // All methods in JVTThresholdMonitorSession (as well as JVTSession)
    //

    // METADATA OPERATIONS
    //********************

    /**
     * JVTThresholdMonitorSession.makeThresholdMonitorValue().
     * #getManagedEntityTypes()
     * @see javax.oss.pm.threshold.JVTThresholdMonitorSession#makeThresholdMonitorValue(String)
     */
    public ThresholdMonitorValue makeThresholdMonitorValue(String valuetype)
        throws javax.oss.IllegalArgumentException
    {
        Log.write(this,Log.LOG_ALL,"makeThresholdMonitorValue()","valuetype="+valuetype);

        // create appropriate ThresholdMonitorValue based on valuetype
        ThresholdMonitorValue returnValue = null;
        if ( valuetype == null ) {
            Log.write(this,Log.LOG_ALL,"makeThresholdMonitorValue()",ERR_VALUE_TYPE_NULL );
            throw new javax.oss.IllegalArgumentException( ERR_VALUE_TYPE_NULL);
        } else if ( SimpleThresholdMonitorValue.VALUE_TYPE.compareTo( valuetype ) == 0 ) {
            returnValue = new SimpleThresholdMonitorValueImpl();
        }
        else if ( TriggerOnAllThresholdMonitorValue.VALUE_TYPE.compareTo( valuetype ) == 0 ) {
            returnValue = new TriggerOnAllThresholdMonitorValueImpl();
        } else if ( TriggerOnAnyThresholdMonitorValue.VALUE_TYPE.compareTo( valuetype ) == 0 ) {
            returnValue = new TriggerOnAnyThresholdMonitorValueImpl();
        }
        else {
            Log.write(this,Log.LOG_ALL,"makeThresholdMonitorValue()",ERR_VALUE_TYPE_NOT_SUPPORTED);
            throw new javax.oss.IllegalArgumentException(ERR_VALUE_TYPE_NOT_SUPPORTED);
        }
        return returnValue;
    }

    /**
     * Returns an iterator over the threshold values mathing the query.
     *
     * <p>This implementation fetches all thresholds and then evaluates them one by
     * one aginst the query. The method would be more efficient if there was a
     * matching query in the ThresholdMonitorEntityBean that returned the result.
     *
     * @param query query for finding thresholds
     * @param attrNames attributes to return with the thresholds
     * @return iterator with threshold populated with the attributes specified
     * @see javax.oss.pm.threshold.JVTThresholdMonitorSession#queryThresholdMonitors(javax.oss.QueryValue,String[])
     */
    public ThresholdMonitorValueIterator queryThresholdMonitors( javax.oss.QueryValue query,
        String[] attrNames)
        throws javax.oss.IllegalArgumentException
    {
        Log.write(this,Log.LOG_ALL,"queryThresholdMonitors()","called");

        // error handling
        if ( query == null ) {
            Log.write(this,Log.LOG_ALL,"queryThresholdMonitors()", ERR_QUERY_TYPE_NULL );
            throw new javax.oss.IllegalArgumentException( ERR_QUERY_TYPE_NULL );
        } else if ( (query instanceof QueryBySimpleThresAttributesValue == false)
          && (query instanceof QueryByMonitorValue == false) ) {
            Log.write(this,Log.LOG_ALL,"queryThresholdMonitors()",ERR_QUERY_TYPE_NOT_SUPPORTED);
            throw new javax.oss.IllegalArgumentException( ERR_QUERY_TYPE_NOT_SUPPORTED );
        } else if ( attrNames == null ) {
            Log.write(this,Log.LOG_ALL,"queryThresholdMonitors()",ERR_ATTRIBUTE_NAME_ARRAY_IS_NULL);
            throw new javax.oss.IllegalArgumentException( ERR_ATTRIBUTE_NAME_ARRAY_IS_NULL );
        }

        for (int i=0;i<attrNames.length;i++) {
            if ( attrNames[i]==null ) {
                Log.write(this,Log.LOG_ALL,"queryThresholdMonitors()",ERR_ATTRIBUTE_NAME_ARRAY_IS_NULL);
                throw new javax.oss.IllegalArgumentException( ERR_ATTRIBUTE_NAME_ARRAY_IS_NULL );
            }
        }

        // check that attributes are valid
        /*
        String[] validAttributes = null;
        if ( query instanceof QueryBySimpleThresAttributesValue ) {
            String[] attr = { QueryBySimpleThresAttributesValue.ALARM_CONFIG,
                              QueryBySimpleThresAttributesValue.DEFINITIONS,
                              QueryBySimpleThresAttributesValue.GRANULARITY,
                              QueryBySimpleThresAttributesValue.NAME,
                              QueryBySimpleThresAttributesValue.OBSERVABLE_OBJECTS,
                              QueryBySimpleThresAttributesValue.QUERY_TYPE,
                              QueryBySimpleThresAttributesValue.STATE,
                              "managedEntityKey", // this is not a query attribute
                              QueryBySimpleThresAttributesValue.VALUE_TYPE };
            validAttributes = attr;
        } else { // QueryByMonitorValue query
            String[] attr = { QueryByMonitorValue.GRANULARITY,
                              QueryByMonitorValue.NAME,
                              QueryByMonitorValue.QUERY_TYPE,
                              "managedEntityKey", // this is not a query attribute
                              QueryByMonitorValue.STATE,
                              QueryByMonitorValue.VALUE_TYPE };
            validAttributes = attr;
        }
        // check against all valid attributes
        for (int i=0;i<attrNames.length;i++) {
            for ( int j=0;j<validAttributes.length;j++) {
                if ( validAttributes[j].equals( attrNames[i] ) ) {
                    break; // found a valid attribute, check next attrName
                }
                if ( attrNames[i]==null || j == validAttributes.length-1 ) {
                    // Current attribute has been checked against all valid
                    // attribute without any match => it is not valid!
                    String msg = ERR_QUERY_ATTRIBUTE_NOT_SUPPORTED
                        + " [" + attrNames[i] + "]";
                    Log.write(this,Log.LOG_MINOR,"queryThresholdMonitors()",msg);
                    throw new javax.oss.IllegalArgumentException( msg );
                }
            }
        }*/

        Collection thresholdKeys = null;
        try {
            thresholdKeys = entityHome.findAllThresholds();
        } catch ( FinderException e ) {
            Log.write(this,Log.LOG_ALL,"queryThresholdMonitors()","exception="+e);
            Log.write(ERR_NO_THRESHOLD_MONITORS_FOUND);
            // No thresholds found. Empty iterator returned.
            return new ThresholdMonitorValueIteratorImpl( new ThresholdMonitorValue[0] );
        }
        if ( thresholdKeys.size()==0 ) {
            Log.write(ERR_NO_THRESHOLD_MONITORS_FOUND);
            // No thresholds found. Empty iterator returned.
            return new ThresholdMonitorValueIteratorImpl( new ThresholdMonitorValue[0] );
        }

        // evaluate the thresholds to see if they match the query
        Iterator thresholdEntitiesIter = thresholdKeys.iterator();
        ThresholdMonitorEntityLocal thresholdEntity = null;
        ThresholdMonitorValue thresholdValue = null;
        ArrayList thresholdValueList = new ArrayList(); // holds all matching threshold values
        while ( thresholdEntitiesIter.hasNext() ) {
            thresholdEntity = (ThresholdMonitorEntityLocal)thresholdEntitiesIter.next();
            thresholdValue = thresholdEntity.getThresholdMonitorValue();

            // evaluate
            boolean result = false;
            if ( thresholdValue instanceof SimpleThresholdMonitorValue
              && query instanceof QueryBySimpleThresAttributesValue ) {
                result = isThresholdEqualWithQuery(
                                    (SimpleThresholdMonitorValue)thresholdValue,
                                    (QueryBySimpleThresAttributesValue)query );
            } else if ( thresholdValue instanceof TriggerOnAllThresholdMonitorValue
              && query instanceof QueryBySimpleThresAttributesValue ) {
                result = isThresholdEqualWithQuery(
                                    (TriggerOnAllThresholdMonitorValue)thresholdValue,
                                    (QueryBySimpleThresAttributesValue)query );
            } else if ( thresholdValue instanceof TriggerOnAnyThresholdMonitorValue
              && query instanceof QueryBySimpleThresAttributesValue ) {
                result = isThresholdEqualWithQuery(
                                    (TriggerOnAnyThresholdMonitorValue)thresholdValue,
                                    (QueryBySimpleThresAttributesValue)query );
            }else {
                result = isThresholdEqualWithQuery( thresholdValue,
                                                    (QueryByMonitorValue) query );
            }

            if ( result==true ) {

                if ( attrNames.length!=0 ) {
                    // Populate a value object only with the specified attributes,
                    // otherwise all attributes will be used (original value obj).
                    thresholdValue = makeThresholdMonitorValueWithAttributes(
                        thresholdValue,attrNames);
                }
                thresholdValueList.add( thresholdValue );
            }
        }

        // Create an iterator of the values and return it.
        ThresholdMonitorValue[] values = new ThresholdMonitorValue[thresholdValueList.size()];
        values = (ThresholdMonitorValue[]) thresholdValueList.toArray( values );
        ThresholdMonitorValueIterator valueIterator = new ThresholdMonitorValueIteratorImpl( values );
        return valueIterator;
    }

    /**
     * JVTThresholdMonitorSession.getObservableObjectClasses().
     * @see javax.oss.pm.threshold.JVTThresholdMonitorSession#getObservableObjectClasses()
     */
    public javax.oss.pm.util.ObservableObjectClassIterator getObservableObjectClasses()
    {
        Log.write(this,Log.LOG_ALL,"getObservableObjectClasses()","called");

        // get observable object classes from performance monitor
        try {
            return performanceMonitorSession.getObservableObjectClasses();
        } catch ( RemoteException e ) {
            Log.write(this,Log.LOG_MAJOR,"getObservableObjectClasses()","exception="+e);
            Log.write( ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
            throw new RuntimeException( ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
        }
    }

    /**
     * JVTThresholdMonitorSession.getObservableObjects()
     * @see javax.oss.pm.threshold.JVTThresholdMonitorSession#getObservableObjects(String,String)
     */
    public javax.oss.pm.util.ObservableObjectIterator getObservableObjects(
        String observableObjectClassName,String root )
        throws javax.oss.IllegalArgumentException
    {
        Log.write(this,Log.LOG_ALL,"getObservableObjects()","called");

        // forward call to Performance Monitor
        try {
            return performanceMonitorSession.getObservableObjects(
                observableObjectClassName, root );
        } catch ( RemoteException e ) {
            Log.write(this,Log.LOG_MAJOR,"getObservableObjects()","exception="+e);
            Log.write( ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
            throw new RuntimeException( ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
        }
    }

    /**
     * JVTThresholdMonitorSession.getSupportedObservableObjects().
     * @see javax.oss.pm.threshold.JVTThresholdMonitorSession#getSupportedObservableObjects(String[])
     */
    public String[] getSupportedObservableObjects( String[] dnList )
        throws javax.oss.IllegalArgumentException
    {
        Log.write(this,Log.LOG_ALL,"getSupportedObservableObjects()","called");

        // calling the performance monitor bean to return the supported observable objects
        try {
            return performanceMonitorSession.getSupportedObservableObjects( dnList );
        } catch ( RemoteException e ) {
            Log.write(this,Log.LOG_MAJOR,"getSupportedObservableObjects()","exception="+e);
            Log.write( ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
            throw new RuntimeException( ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
        }
    }

    /**
     * JVTThresholdMonitorSession.getObservableAttributes().
     * @see javax.oss.pm.threshold.JVTThresholdMonitorSession#getObservableAttributes(String)
     */
    public javax.oss.pm.measurement.PerformanceAttributeDescriptor[] getObservableAttributes(String observableObjectClassName )
    throws javax.oss.IllegalArgumentException
    {
        Log.write(this,Log.LOG_ALL,"getObservableAttributes()","called");

        // calling the performance monitor bean to return the observable attributes

        // checking the returned arrat so that no illegal types (STRING) are returned
        try {
            PerformanceAttributeDescriptor[] paDescriptors =
                performanceMonitorSession.getObservableAttributes( observableObjectClassName );
            PerformanceAttributeDescriptor paDescriptor = null;
            ArrayList arrayList = new ArrayList();
            for (int i=0;i<paDescriptors.length;i++) {
                paDescriptor = paDescriptors[i];
                if ( paDescriptor.getType() == PerformanceAttributeDescriptor.STRING ) {
                    Log.write(this,Log.LOG_ALL,"getObservableAttributes()",
                        "Excluding performance attribute descriptor of STRING type.");

                } else {
                    arrayList.add( paDescriptor );
                }
            }
            // convert into array
            paDescriptors = new PerformanceAttributeDescriptor[ arrayList.size() ];
            paDescriptors = (PerformanceAttributeDescriptor[]) arrayList.toArray( paDescriptors );
            return paDescriptors;

        } catch ( RemoteException e ) {
            Log.write(this,Log.LOG_MAJOR,"getObservableAttributes()","exception="+e);
            Log.write( ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
            throw new RuntimeException( ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
        }
    }

    /**
     * JVTThresholdMonitorSession.getSupportedGranularities().
     * @see javax.oss.pm.threshold.JVTThresholdMonitorSession#getSupportedGranularities(javax.oss.pm.threshold.ThresholdMonitorValue)
     */
    public int[] getSupportedGranularities( ThresholdMonitorValue value )
        throws javax.oss.IllegalArgumentException
    {
        Log.write(this,Log.LOG_ALL,"getSupportedGranularities()","value="+value);

        if ( value == null ) {
            Log.write(this,Log.LOG_MINOR,"getSupportedGranularities()",ERR_THRESHOLD_MONITOR_VALUE_NULL);
            throw new javax.oss.IllegalArgumentException( ERR_THRESHOLD_MONITOR_VALUE_NULL );
        }

        SimpleThresholdMonitorValue stmValue = null;
        TriggerOnAllThresholdMonitorValue tAllmValue = null;
        TriggerOnAnyThresholdMonitorValue tAnymValue = null;

        if ( value instanceof SimpleThresholdMonitorValue == true ) {
            stmValue = (SimpleThresholdMonitorValue) value;
        } else if ( value instanceof TriggerOnAllThresholdMonitorValue == true ) {
            tAllmValue = (TriggerOnAllThresholdMonitorValue) value;
        } else if ( value instanceof TriggerOnAnyThresholdMonitorValue == true ) {
            tAnymValue = (TriggerOnAnyThresholdMonitorValue) value;
        } else {
            Log.write(this,Log.LOG_MINOR,"getSupportedGranularities()",ERR_VALUE_TYPE_NOT_SUPPORTED);
            throw new javax.oss.IllegalArgumentException( ERR_VALUE_TYPE_NOT_SUPPORTED );
        }


        // validate threshold monitor value
        /*
        try {
            validateSimpleThresholdMonitorValue( tmValue );
        } catch ( javax.oss.IllegalArgumentException e ) {
            Log.write(this,Log.LOG_MINOR,"getSupportedGranularities()",
                "validation exception="+e);
        }*/

        // Should forward the request to Performance Monitor to see what supported
        // granularities there is.
        try {

            PerformanceMonitorByObjectsValue pmValue = (PerformanceMonitorByObjectsValue)
                performanceMonitorSession.makePerformanceMonitorValue(
                    PerformanceMonitorByObjectsValue.VALUE_TYPE );

            if ( value instanceof SimpleThresholdMonitorValue == true ) {
                pmValue = convertToPerformanceMonitorValue( stmValue );
            } else if ( value instanceof TriggerOnAllThresholdMonitorValue == true ) {
                pmValue = convertToPerformanceMonitorValue( tAllmValue );
            } else if ( value instanceof TriggerOnAnyThresholdMonitorValue == true ) {
                pmValue = convertToPerformanceMonitorValue( tAnymValue );
            } else {
                Log.write(this,Log.LOG_MINOR,"getSupportedGranularities()",ERR_VALUE_TYPE_NOT_SUPPORTED);
                throw new javax.oss.IllegalArgumentException( ERR_VALUE_TYPE_NOT_SUPPORTED );
            }

            // 2. Call performance monitor and ask about supported granularities.
            return performanceMonitorSession.getSupportedGranularities( pmValue );
        } catch ( RemoteException e ) {
            Log.write(this,Log.LOG_MAJOR,"getObservableAttributes()","exception="+e);
            Log.write( ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
            throw new RuntimeException( ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
        }
    }

    /**
     * JVTThresholdMonitorSession.getVersion().
     * @see javax.oss.pm.threshold.JVTThresholdMonitorSession#getVersion()
     */
    public String[] getVersion()
    {
        return new String[] { "JVTThresholdMonitorSession.OSS_QOS_VERSION_R1" };
    }


    // GET THRESHOLD MONITORING JOBS
    //******************************

    /**
     * JVTThresholdMonitorSession.getThresholdMonitorByKey().
     * @see javax.oss.pm.threshold.JVTThresholdMonitorSession#getThresholdMonitorByKey(javax.oss.pm.threshold.ThresholdMonitorKey,String[])
     */
    public ThresholdMonitorValue getThresholdMonitorByKey( ThresholdMonitorKey tmKey,
                                                           String[] attributes )
        throws javax.ejb.ObjectNotFoundException, javax.oss.IllegalArgumentException
    {
        Log.write(this,Log.LOG_ALL,"getThresholdMonitorByKey()","called");

        if ( tmKey==null ) {
            Log.write(this,Log.LOG_MINOR,"getThresholdMonitorByKey()",ERR_THRESHOLD_MONITOR_KEY_NULL );
            throw new javax.oss.IllegalArgumentException( ERR_THRESHOLD_MONITOR_KEY_NULL );
        } else if ( attributes==null ) {
            Log.write(this,Log.LOG_MINOR,"getThresholdMonitorByKey()",ERR_ATTRIBUTE_NAME_ARRAY_IS_NULL);
            throw new javax.oss.IllegalArgumentException( ERR_ATTRIBUTE_NAME_ARRAY_IS_NULL );
        }

        for (int i=0;i<attributes.length;i++) {
            if ( attributes[i]==null ) {
                Log.write(this,Log.LOG_ALL,"getThresholdMonitorByKey()",ERR_ATTRIBUTE_NAME_ARRAY_IS_NULL);
                throw new javax.oss.IllegalArgumentException( ERR_ATTRIBUTE_NAME_ARRAY_IS_NULL );
            }
        }

        // Look-up thresholdmonitor entity bean
        ThresholdMonitorValue entityValue = null;
        try {
            ThresholdMonitorEntityLocal entitySession =
                entityHome.findByPrimaryKey( tmKey.getThresholdMonitorPrimaryKey() );
            entityValue = entitySession.getThresholdMonitorValue();
        } catch  (FinderException e ) {
            Log.write(this,Log.LOG_ALL,"getThresholdMonitorByKey()","exception="+e);
            Log.write( ERR_THRESHOLD_MONITOR_NOT_FOUND );
            throw new ObjectNotFoundException( ERR_THRESHOLD_MONITOR_NOT_FOUND );
        }

        if ( attributes.length==0 ) { // return all attributes
            return entityValue;
        } else { // return only specified attributes
            return makeThresholdMonitorValueWithAttributes(entityValue,attributes);
        }
    }

    /**
     * JVTThresholdMonitorSession.getThresholdMonitorsByKeys().
     * @see javax.oss.pm.threshold.JVTThresholdMonitorSession#getThresholdMonitorsByKeys(javax.oss.pm.threshold.ThresholdMonitorKey[],String[])
     */
    public ThresholdMonitorValueIterator getThresholdMonitorsByKeys(
        ThresholdMonitorKey[] tmKeys, String[] attributes)
        throws javax.oss.IllegalArgumentException, javax.ejb.FinderException
    {
        Log.write(this,Log.LOG_ALL,"getThresholdMonitorsByKeys()","called");

        if ( tmKeys == null ) {
            throw new javax.oss.IllegalArgumentException( ERR_THRESHOLD_MONITOR_KEY_NULL );
        } else if ( attributes == null ) {
            throw new javax.oss.IllegalArgumentException( ERR_ATTRIBUTE_NAME_ARRAY_IS_NULL );
        }

        for (int i=0;i<attributes.length;i++) {
            if ( attributes[i]==null ) {
                Log.write(this,Log.LOG_ALL,"getThresholdMonitorsByKeys()",ERR_ATTRIBUTE_NAME_ARRAY_IS_NULL);
                throw new javax.oss.IllegalArgumentException( ERR_ATTRIBUTE_NAME_ARRAY_IS_NULL );
            }
        }

        ThresholdMonitorValue[] thresholdMonitorValues = null;
        if ( tmKeys.length==0 ) { // return all thresholds, get all keys
            Log.write(this,Log.LOG_ALL,"getThresholdMonitorsByKeys()","All thresholds requested.");
            Collection thresholdEntities = entityHome.findAllThresholds();
            Iterator thresholdIter = thresholdEntities.iterator();
            thresholdMonitorValues = new ThresholdMonitorValue[ thresholdEntities.size() ];
            int valueIndex = 0;
            ThresholdMonitorEntityLocal localEntity = null;
            ThresholdMonitorValue value = null;
            while ( thresholdIter.hasNext() ) {
                localEntity = (ThresholdMonitorEntityLocal) thresholdIter.next();
                value = localEntity.getThresholdMonitorValue();
                if ( attributes.length!=0 ) { // return only specified attributes
                    value = makeThresholdMonitorValueWithAttributes( value, attributes );
                }
                thresholdMonitorValues[valueIndex++] = value;
            }

        } else {
            Log.write(this,Log.LOG_ALL,"getThresholdMonitorsByKeys()","All thresholds requested.");
            // look-up thresholdmonitor entity beans matching criteria
            // then create a value object for each with the specified attributes
            thresholdMonitorValues = new ThresholdMonitorValue[tmKeys.length];
            ThresholdMonitorValue entityValue = null;
            ThresholdMonitorEntityLocal entitySession = null;
            try {
                for (int i=0;i<tmKeys.length;i++) {
                    entitySession = entityHome.findByPrimaryKey(
                        tmKeys[i].getThresholdMonitorPrimaryKey() );

                    entityValue = entitySession.getThresholdMonitorValue();

                    if ( attributes.length==0 ) { // return all attributes
                        thresholdMonitorValues[i] = entityValue;
                    } else { // return only specified attributes
                        thresholdMonitorValues[i] = makeThresholdMonitorValueWithAttributes(
                            entityValue, attributes );
                    }
                }
            } catch  (FinderException e ) {
                Log.write(this,Log.LOG_MINOR,"getThresholdMonitorsByKeys()","exception="+e);
                Log.write( ERR_THRESHOLD_MONITOR_NOT_FOUND );
                throw new FinderException( ERR_THRESHOLD_MONITOR_NOT_FOUND );
            }
        }
        // create iterator based on the array with threshold monitor values
        ThresholdMonitorValueIterator iterator = new ThresholdMonitorValueIteratorImpl(
            thresholdMonitorValues );
        return iterator;
    }

    // CREATE THRESHOLD MONITOR JOBS
    //*********************************

    /**
     * JVTThresholdMonitorSession.createThresholdMonitorByValue().
     *
     * If granularity is not defined the smallest (not zero) granularity period
     * returned from the performance monitor is used.
     *
     * @see javax.oss.pm.threshold.JVTThresholdMonitorSession#createThresholdMonitorByValue(javax.oss.pm.threshold.ThresholdMonitorValue)
     */
    public ThresholdMonitorKey createThresholdMonitorByValue(ThresholdMonitorValue value)
        throws javax.ejb.CreateException, javax.oss.IllegalArgumentException,
        javax.ejb.DuplicateKeyException
    {
        // System.out.println("------wrx,come in the createThreshold now----");
        Log.write(this,Log.LOG_ALL,"createThresholdMonitorByValue()","called");

        ThresholdMonitorValueImpl tmValue = null;
        // check argument
        if ( value == null ) {
            Log.write(this,Log.LOG_MINOR,"createThresholdMonitorByValue()",
                ERR_VALUE_TYPE_NULL );
            //System.out.println("wrx--value is null");
            throw new javax.oss.IllegalArgumentException( ERR_VALUE_TYPE_NULL );
        } else if ( value instanceof SimpleThresholdMonitorValueImpl == true ) {
            //System.out.println("wrx--value is simple");
            tmValue = (SimpleThresholdMonitorValueImpl)value;
        } else if ( value instanceof TriggerOnAllThresholdMonitorValueImpl == true ) {
            tmValue = (TriggerOnAllThresholdMonitorValueImpl)value;
        } else if ( value instanceof TriggerOnAnyThresholdMonitorValueImpl == true ) {
            tmValue = (TriggerOnAnyThresholdMonitorValueImpl)value;
        } else {
            Log.write(this,Log.LOG_MINOR,"createThresholdMonitorByValue()",
                ERR_VALUE_TYPE_NOT_SUPPORTED );
            throw new javax.oss.IllegalArgumentException( ERR_VALUE_TYPE_NOT_SUPPORTED );
        }

        // set default name, if not set
        if ( tmValue.isPopulated( ThresholdMonitorValue.NAME )==false ) {
            Log.write("Setting default name to \"\".");
            tmValue.setName("");
        }

        // validate the threshold value object
        try {
             if ( value instanceof SimpleThresholdMonitorValueImpl == true )
                 validateSimpleThresholdMonitorValue( (SimpleThresholdMonitorValueImpl)tmValue );
             if ( value instanceof TriggerOnAllThresholdMonitorValueImpl == true )
                 validateTriggerOnAllThresholdMonitorValue( (TriggerOnAllThresholdMonitorValueImpl)tmValue );
             if ( value instanceof TriggerOnAnyThresholdMonitorValueImpl == true )
                 validateTriggerOnAnyThresholdMonitorValue( (TriggerOnAnyThresholdMonitorValueImpl)tmValue );
        } catch ( javax.oss.IllegalArgumentException e ) {
            Log.write(this,Log.LOG_ALL,"createThresholdMonitorByValue()","exception="+e);
            Log.write(ERR_COULD_NOT_CREATE_THRESHOLD_MONITOR);
            throw e;
        }

        // populate not mandatory attributes
        // check alarm config
        /*
        if ( tmValue.isPopulated( SimpleThresholdMonitorValue.ALARM_CONFIG )==false ) {
            Log.write("Create default alarm config.");
            AlarmConfig ac = tmValue.makeAlarmConfig();
            ac.setPerceivedSeverity( PerceivedSeverity.MINOR );
            tmValue.setAlarmConfig( ac );
        }*/

        // check schedule
        if ( tmValue.isPopulated( SimpleThresholdMonitorValue.SCHEDULE )==false ) {
            Log.write("Create default schedule.");
            Schedule schedule = tmValue.makeSchedule();
            tmValue.setSchedule( schedule );
        }
        //System.out.println("wrx--before convertToPerformanceMonitorValue");
        // create performance monitor value from threshold monitor value
        PerformanceMonitorValue pmValue = null;
        try {
            pmValue = convertToPerformanceMonitorValue( tmValue );
        } catch ( javax.oss.IllegalArgumentException e ) {
            Log.write(this,Log.LOG_MAJOR,"createThresholdMonitorByValue()","exception="+e);
            throw e;
        }
        //System.out.println("wrx--" + pmValue);
        // Set default granularity if not defined in threshold monitor value set.
        if ( tmValue.isPopulated( SimpleThresholdMonitorValue.GRANULARITY ) == false ) {
            Log.write(this,Log.LOG_ALL,"createThresholdMonitorByValue()",
                "Set default granularity...");

            // get supported granularities from PM.
            try {
                int[] supportedGranularities = performanceMonitorSession.getSupportedGranularities( pmValue );

                if ( supportedGranularities.length != 0 ) {
                    // use smallest, non zero, granularity.
                    Arrays.sort(supportedGranularities);
                    int defaultGranularity = 0;
                    for (int i=0;i<supportedGranularities.length;i++) {
                        defaultGranularity = supportedGranularities[i];
                        if ( defaultGranularity != 0 ) {
                            break;
                        }
                    }

                    if ( defaultGranularity != 0 ) {
                        pmValue.setGranularityPeriod( defaultGranularity );
                        tmValue.setGranularityPeriod( defaultGranularity ); // store in threshold value also
                        Log.write("Default granularity set to " + defaultGranularity + " seconds." );
                    } else {
                        Log.write("No non zero granularity found.");
                    }
                } else {
                    Log.write("No granularities supported.");
                }
            } catch ( RemoteException e ) {
                Log.write(this,Log.LOG_MAJOR,"createThresholdMonitorByValue()","exception="+e);
                Log.write(ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR);
                throw new RuntimeException( ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR + " " + e.getMessage() );
            }
        }

        // create a performance monitor.
        Log.write("Create associated performance monitor...");
        PerformanceMonitorKey performanceMonitorKey = null;
       try {
            performanceMonitorKey = (PerformanceMonitorKey)(tmValue.getAttributeValue("perfkey"));
       } catch (Exception e) {

           System.out.println("perfkey isnot set.");

        } 

        if(performanceMonitorKey == null) {
        try {
            performanceMonitorKey = performanceMonitorSession.createPerformanceMonitorByValue( pmValue );
        } catch ( CreateException e ) {
            Log.write(this,Log.LOG_MINOR,"createThresholdMonitorByValue()","exception="+e);
            Log.write( ERR_COULD_NOT_CREATE_PERFORMANCE_MONITOR );
            throw new CreateException( ERR_COULD_NOT_CREATE_THRESHOLD_MONITOR
                + " " + ERR_COULD_NOT_CREATE_PERFORMANCE_MONITOR
                + " " + e.getMessage() );
        } catch ( RemoteException e ) {
            Log.write(this,Log.LOG_MAJOR,"createThresholdMonitorByValue()","exception="+e);
            Log.write( ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
            Log.write( ERR_COULD_NOT_CREATE_PERFORMANCE_MONITOR );
            Log.write( ERR_COULD_NOT_CREATE_THRESHOLD_MONITOR );
            throw new CreateException( ERR_COULD_NOT_CREATE_THRESHOLD_MONITOR
                + " " + ERR_COULD_NOT_CREATE_PERFORMANCE_MONITOR
                + " " + ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR
                + " " + e.getMessage() );
        } catch ( javax.oss.IllegalArgumentException e ) {
            Log.write(this,Log.LOG_MAJOR,"createThresholdMonitorByValue()","exception="+e);
            Log.write( ERR_COULD_NOT_CREATE_PERFORMANCE_MONITOR );
            Log.write( ERR_COULD_NOT_CREATE_THRESHOLD_MONITOR );
            throw new javax.oss.IllegalArgumentException( ERR_COULD_NOT_CREATE_THRESHOLD_MONITOR
                + " " + ERR_COULD_NOT_CREATE_PERFORMANCE_MONITOR
                + " " + e.getMessage() );
        }
        }

        // Set new state for threshold
        Log.write("Set state to ACTIVE_OFF_DUTY...");
        tmValue.setState( ThresholdMonitorState.ACTIVE_OFF_DUTY );

        // create threshold monitor key
        Log.write("Create threshold monitor key...");
        ThresholdMonitorKey thresholdMonitorKey = new ThresholdMonitorKeyImpl();
        String primaryKey = Util.makeGUID( thresholdMonitorKey );
        thresholdMonitorKey.setThresholdMonitorPrimaryKey( primaryKey );
        // set key in value object
        tmValue.setThresholdMonitorKey( thresholdMonitorKey );

        // set application context / distinguished name
        if ( includeApplicationDNInEvent==true ) {
            Log.write("Set application context...");
            thresholdMonitorKey.setApplicationContext( applicationContext );
            Log.write("Set application distinguished name...");
            thresholdMonitorKey.setApplicationDN( applicationDN );
        } else {
            Log.write("The bean is configured to not include application context and DN in key.");
        }

        // create the threshold monitor
        Log.write("Create threshold monitor entity...");
        try {
	    // System.out.println("-----wrx---entityHome");
	    // System.out.println(entityHome);
            //System.out.println("wrx:thresholdMonitorKey:" + thresholdMonitorKey);
            //System.out.println("wrx:tmValue" + tmValue);
            //System.out.println("wrx:perfKey" + performanceMonitorKey );
            entityHome.create( thresholdMonitorKey, tmValue, performanceMonitorKey );
            // System.out.println("----wrx--after entity create");
        } catch ( CreateException e ) {
            Log.write(this,Log.LOG_MINOR,"createThresholdMonitorByValue()","exception="+e);
            Log.write( ERR_COULD_NOT_CREATE_THRESHOLD_MONITOR );
            // System.out.println("-----wrx---entitycreateException---");
            System.out.println(e);
            throw new CreateException( ERR_COULD_NOT_CREATE_THRESHOLD_MONITOR
                + " " + e.getMessage() );
        }
        Log.write(this,Log.LOG_ALL,"createThresholdMonitorByValue()","ok!");
        return thresholdMonitorKey;
    }

    /**
     * JVTThresholdMonitorSession.tryCreateThresholdMonitorsByValues()
     * @see javax.oss.pm.threshold.JVTThresholdMonitorSession#tryCreateThresholdMonitorsByValues(javax.oss.pm.threshold.ThresholdMonitorValue[])
     */
    public ThresholdMonitorKeyResult[] tryCreateThresholdMonitorsByValues(
        ThresholdMonitorValue[] tmValues)
            throws javax.oss.UnsupportedOperationException,
            javax.oss.IllegalArgumentException
    {
        Log.write(this,Log.LOG_ALL,"tryCreateThresholdMonitorsByValues()","called");
        /*
        throw new javax.oss.UnsupportedOperationException(
            JVTThresholdMonitorSessionOptionalOpt.TRY_CREATE_THRESHOLD_MONITORS_BY_VALUES );
        */

        // Implementation proposal:
        if ( tmValues == null ) {
            Log.write(this,Log.LOG_MINOR,"tryCreateThresholdMonitorsByValues()",
                ERR_THRESHOLD_MONITOR_VALUE_NULL );
            throw new javax.oss.IllegalArgumentException(
                ERR_THRESHOLD_MONITOR_VALUE_NULL );
        }

        // create the thresholds in the array one by one
        // if one create fails, try next
        // store result of each operation in result array
        ThresholdMonitorKeyResult[] resultArray = new ThresholdMonitorKeyResult[ tmValues.length ];
        ThresholdMonitorKeyResult result = null;
        ThresholdMonitorKey key = null;
        for (int i=0;i<tmValues.length;i++) {
            try {
                result = new ThresholdMonitorKeyResultImpl();

                key = createThresholdMonitorByValue( tmValues[i] );
                result.setManagedEntityKey( key );
                result.setSuccess( true );
            } catch ( javax.ejb.DuplicateKeyException e ) {
                Log.write(this,Log.LOG_ALL,"tryCreateThresholdMonitorsByValues()",e.getMessage() );
                result.setException( e );
                result.setSuccess( false );
            } catch ( javax.ejb.CreateException e ) {
                Log.write(this,Log.LOG_ALL,"tryCreateThresholdMonitorsByValues()",e.getMessage() );
                result.setException( e );
                result.setSuccess( false );
            } catch ( javax.oss.IllegalArgumentException e ) {
                Log.write(this,Log.LOG_ALL,"tryCreateThresholdMonitorsByValues()",e.getMessage() );
                result.setException( e );
                result.setSuccess( false );
            }
            resultArray[i] = result;
        }
        return resultArray;
    }

    //REMOVE THRESHOLD MONITOR JOBS
    //********************************

    /**
     * JVTThresholdMonitorSession.removeThresholdMonitorByKey()
     * @see javax.oss.pm.threshold.JVTThresholdMonitorSession#removeThresholdMonitorByKey(javax.oss.pm.threshold.ThresholdMonitorKey)
     */
    public void removeThresholdMonitorByKey( ThresholdMonitorKey tmKey )
    throws javax.ejb.ObjectNotFoundException, javax.oss.IllegalArgumentException,
    javax.ejb.RemoveException
    {
        Log.write(this,Log.LOG_ALL,"removeThresholdMonitorByKey()","called");

        if ( tmKey == null ) {
            Log.write(this,Log.LOG_MINOR,"removeThresholdMonitorByKey()",ERR_THRESHOLD_MONITOR_KEY_NULL);
            throw new javax.oss.IllegalArgumentException( ERR_THRESHOLD_MONITOR_KEY_NULL );
        }

        try {
            // 1. get the threshold monitor
            ThresholdMonitorEntityLocal entitySession =
                entityHome.findByPrimaryKey( tmKey.getThresholdMonitorPrimaryKey() );

            // 2. remove associated performance monitor (if found)
            PerformanceMonitorKey pmKey = entitySession.getPerformanceMonitorKey();

            try {
                performanceMonitorSession.removePerformanceMonitorByKey( pmKey );
                Log.write(this,"removeThresholdMonitorByKey()",
                    "The associated performance monitor was successfully removed.");
            } catch ( Exception e ) {
                //System.out.println("wrx----donot find the job");
                Log.write(this,Log.LOG_MINOR,"removeThresholdMonitorByKey()","exception="+e);
                Log.write( ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
                Log.write( ERR_COULD_NOT_REMOVE_PERFORMANCE_MONITOR );
            }

            // 3. remove threshold monitor
            entitySession.remove();
            Log.write(this,Log.LOG_ALL,"removeThresholdMonitorByKey()",
                "The threshold monitor was successfully removed." );
        } catch ( FinderException e ) {
            Log.write(this,Log.LOG_MAJOR,"removeThresholdMonitorByKey()","exception="+e);
            Log.write( ERR_THRESHOLD_MONITOR_NOT_FOUND );
            throw new ObjectNotFoundException( ERR_THRESHOLD_MONITOR_NOT_FOUND );
        }
    }

    /**
     * JVTThresholdMonitorSession.tryRemoveThresholdMonitorsByKeys()
     * @see javax.oss.pm.threshold.JVTThresholdMonitorSession#tryRemoveThresholdMonitorsByKeys(javax.oss.pm.threshold.ThresholdMonitorKey[])
     */
    public ThresholdMonitorKeyResult[] tryRemoveThresholdMonitorsByKeys(ThresholdMonitorKey[] tmKeys)
        throws javax.oss.UnsupportedOperationException, javax.oss.IllegalArgumentException
    {
        Log.write(this,Log.LOG_ALL,"tryRemoveThresholdMonitorsByKeys()","called");

        if ( tmKeys == null ) {
            Log.write(this,Log.LOG_MINOR,"tryRemoveThresholdMonitorsByKeys()",
                ERR_THRESHOLD_MONITOR_KEY_ARRAY_IS_NULL );
            throw new javax.oss.IllegalArgumentException(
                ERR_THRESHOLD_MONITOR_KEY_ARRAY_IS_NULL );
        }
        // check all keys in array
        ThresholdMonitorKey key = null;
        for (int i=0;i<tmKeys.length;i++) {
            key = tmKeys[i];
            if ( key == null ) {
                Log.write(this,Log.LOG_ALL,"tryRemoveThresholdMonitorsByKeys()",
                    ERR_THRESHOLD_MONITOR_KEY_NULL + " (key == null)");
                throw new javax.oss.IllegalArgumentException( ERR_THRESHOLD_MONITOR_KEY_NULL );
            } else if ( key.getThresholdMonitorPrimaryKey() == null ) {
                Log.write(this,Log.LOG_ALL,"tryRemoveThresholdMonitorsByKeys()",
                    ERR_THRESHOLD_MONITOR_KEY_NULL + " (key.getThresholdMonitorPrimaryKey() == null)");
                throw new javax.oss.IllegalArgumentException( ERR_THRESHOLD_MONITOR_KEY_NULL );
            }
        }

        // remove one by one the thresholds in the array
        // if one remove fails, try next
        // store result of each operation in result array
        ThresholdMonitorKeyResult[] resultArray = new ThresholdMonitorKeyResult[ tmKeys.length ];
        ThresholdMonitorKeyResult result = null;

        for (int i=0;i<tmKeys.length;i++) {
            try {
                key = tmKeys[i];
                result = new ThresholdMonitorKeyResultImpl();
                result.setManagedEntityKey( key );

                removeThresholdMonitorByKey( key );
                result.setSuccess( true );
            } catch ( javax.ejb.ObjectNotFoundException e ) {
                Log.write(this,Log.LOG_ALL,"tryRemoveThresholdMonitorsByKeys()",e.getMessage() );
                result.setException( e );
                result.setSuccess( false );
            } catch ( javax.oss.IllegalArgumentException e ) {
                Log.write(this,Log.LOG_ALL,"tryRemoveThresholdMonitorsByKeys()",e.getMessage() );
                result.setException( e );
                result.setSuccess( false );
            } catch ( javax.ejb.RemoveException e ) {
                Log.write(this,Log.LOG_ALL,"tryRemoveThresholdMonitorsByKeys()",e.getMessage() );
                result.setException( e );
                result.setSuccess( false );
            }
            resultArray[i] = result;
        }
        return resultArray;
    }

    // BUSINESS OPERATIONS ON THRESHOLD MONITOR JOBS
    //**************************************

    /**
     * @see javax.oss.pm.threshold.JVTThresholdMonitorSession#suspendThresholdMonitorByKey(javax.oss.pm.threshold.ThresholdMonitorKey)
     */
    public void suspendThresholdMonitorByKey(ThresholdMonitorKey tmKey)
    throws javax.oss.UnsupportedOperationException,javax.ejb.ObjectNotFoundException,
    javax.oss.IllegalArgumentException
    {
        Log.write(this,Log.LOG_ALL,"suspendThresholdMonitorByKey()","called");

        // check if method is supported
        String[] supportedOperations = getSupportedOptionalOperations();
        Arrays.sort( supportedOperations );
        if ( Arrays.binarySearch(supportedOperations,
          JVTThresholdMonitorSessionOptionalOpt.SUSPEND_THRESHOLD_MONITOR_BY_KEY )<0 ) {
            Log.write(this,Log.LOG_ALL,"suspendThresholdMonitorByKey()","not supported");
            throw new javax.oss.UnsupportedOperationException(
                JVTThresholdMonitorSessionOptionalOpt.SUSPEND_THRESHOLD_MONITOR_BY_KEY );
        }

        if ( tmKey == null ) {
            Log.write(this,Log.LOG_MINOR,"suspendThresholdMonitorByKey()",ERR_THRESHOLD_MONITOR_KEY_NULL);
            throw new javax.oss.IllegalArgumentException( ERR_THRESHOLD_MONITOR_KEY_NULL );
        }

        // Look-up thresholdmonitor entity bean
        ThresholdMonitorValue entityValue = null;
        ThresholdMonitorEntityLocal entitySession = null;
        try {
            entitySession = entityHome.findByPrimaryKey( tmKey.getThresholdMonitorPrimaryKey() );
        } catch  (FinderException e ) {
            Log.write(this,Log.LOG_MINOR,"suspendThresholdMonitorByKey()","exception="+e);
            Log.write( ERR_THRESHOLD_MONITOR_NOT_FOUND );
            throw new ObjectNotFoundException( ERR_THRESHOLD_MONITOR_NOT_FOUND );
        }

        // suspend the associated performance monitor
        PerformanceMonitorKey pmKey = entitySession.getPerformanceMonitorKey();
        try {
            performanceMonitorSession.suspendPerformanceMonitorByKey( pmKey );
        } catch ( javax.oss.UnsupportedOperationException e) {
            Log.write(this,Log.LOG_MINOR,"suspendThresholdMonitorByKey()","exception="+e);
            Log.write( ERR_COULD_NOT_SUSPEND_THRESHOLD_MONITOR );
            throw new RuntimeException( ERR_COULD_NOT_SUSPEND_THRESHOLD_MONITOR + " " + e.getMessage());
        } catch ( javax.ejb.ObjectNotFoundException e ) {
            Log.write(this,Log.LOG_MINOR,"suspendThresholdMonitorByKey()","exception="+e);
            Log.write( ERR_COULD_NOT_SUSPEND_THRESHOLD_MONITOR );
            throw new RuntimeException( ERR_COULD_NOT_SUSPEND_THRESHOLD_MONITOR + " " + e.getMessage());
        } catch ( javax.oss.IllegalArgumentException e ) {
            Log.write(this,Log.LOG_MINOR,"suspendThresholdMonitorByKey()","exception="+e);
            Log.write( ERR_COULD_NOT_SUSPEND_THRESHOLD_MONITOR );
            throw new RuntimeException( ERR_COULD_NOT_SUSPEND_THRESHOLD_MONITOR + " " + e.getMessage() );
        } catch ( RemoteException e ) {
            Log.write(this,Log.LOG_MINOR,"suspendThresholdMonitorByKey()","exception="+e);
            Log.write( ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
            Log.write( ERR_COULD_NOT_SUSPEND_THRESHOLD_MONITOR );
            throw new RuntimeException( ERR_COULD_NOT_SUSPEND_THRESHOLD_MONITOR
                + " " + ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR + " " + e.getMessage() );

        }

        // change status for threshold monitor to suspended
        entityValue = entitySession.getThresholdMonitorValue();
        entityValue.setState( ThresholdMonitorState.SUSPENDED );
        entitySession.setThresholdMonitorValue( entityValue ); // store the value back to the database
    }

    /**
     * JVTThresholdMonitorSession.trySuspendThresholdMonitorsByKeys()
     * @see javax.oss.pm.threshold.JVTThresholdMonitorSession#trySuspendThresholdMonitorsByKeys(javax.oss.pm.threshold.ThresholdMonitorKey[])
     */
    public ThresholdMonitorKeyResult[] trySuspendThresholdMonitorsByKeys(ThresholdMonitorKey[] tmKeys)
        throws javax.oss.UnsupportedOperationException, javax.oss.IllegalArgumentException
    {
        Log.write(this,Log.LOG_ALL,"trySuspendThresholdMonitorsByKeys()","called");
        // check if method is supported
        String[] supportedOperations = getSupportedOptionalOperations();
        Arrays.sort( supportedOperations );
        if ( Arrays.binarySearch(supportedOperations,
          JVTThresholdMonitorSessionOptionalOpt.TRY_SUSPEND_THRESHOLD_MONITORS_BY_KEYS )<0 ) {
            Log.write(this,Log.LOG_ALL,"trySuspendThresholdMonitorsByKeys()","not supported");
            throw new javax.oss.UnsupportedOperationException(
                JVTThresholdMonitorSessionOptionalOpt.TRY_SUSPEND_THRESHOLD_MONITORS_BY_KEYS );
        }

        if ( tmKeys == null ) {
            Log.write(this,Log.LOG_MINOR,"trySuspendThresholdMonitorsByKeys()",
                ERR_THRESHOLD_MONITOR_KEY_ARRAY_IS_NULL );
            throw new javax.oss.IllegalArgumentException(
                ERR_THRESHOLD_MONITOR_KEY_ARRAY_IS_NULL );
        }
        // check all keys in array
        ThresholdMonitorKey key = null;
        for (int i=0;i<tmKeys.length;i++) {
            key = tmKeys[i];
            if ( key == null ) {
                Log.write(this,Log.LOG_ALL,"trySuspendThresholdMonitorsByKeys()",
                    ERR_THRESHOLD_MONITOR_KEY_NULL + " (key == null)");
                throw new javax.oss.IllegalArgumentException( ERR_THRESHOLD_MONITOR_KEY_NULL );
            } else if ( key.getThresholdMonitorPrimaryKey() == null ) {
                Log.write(this,Log.LOG_ALL,"trySuspendThresholdMonitorsByKeys()",
                    ERR_THRESHOLD_MONITOR_KEY_NULL + " (key.getThresholdMonitorPrimaryKey() == null)");
                throw new javax.oss.IllegalArgumentException( ERR_THRESHOLD_MONITOR_KEY_NULL );
            }
        }

        // suspend one by one the thresholds in the array
        // if one suspend fails, try next
        // store result of each operation in result array
        ThresholdMonitorKeyResult[] resultArray = new ThresholdMonitorKeyResult[ tmKeys.length ];
        ThresholdMonitorKeyResult result = null;

        for (int i=0;i<tmKeys.length;i++) {
            try {
                key = tmKeys[i];
                result = new ThresholdMonitorKeyResultImpl();
                result.setManagedEntityKey( key );

                suspendThresholdMonitorByKey( key );
                result.setSuccess( true );
            } catch ( javax.ejb.ObjectNotFoundException e ) {
                Log.write(this,Log.LOG_ALL,"trySuspendThresholdMonitorsByKeys()",e.getMessage() );
                result.setException( e );
                result.setSuccess( false );
            } catch ( javax.oss.IllegalArgumentException e ) {
                Log.write(this,Log.LOG_ALL,"trySuspendThresholdMonitorsByKeys()",e.getMessage() );
                result.setException( e );
                result.setSuccess( false );
            } catch ( javax.oss.UnsupportedOperationException e ) { // most unlikely
                Log.write(this,Log.LOG_MAJOR,"trySuspendThresholdMonitorsByKeys()",e.getMessage() );
                result.setException( e );
                result.setSuccess( false );
            }
            resultArray[i] = result;
        }
        return resultArray;
    }

    /**
     * JVTThresholdMonitorSession.resumeThresholdMonitorByKey()
     * @see javax.oss.pm.threshold.JVTThresholdMonitorSession#resumeThresholdMonitorByKey(javax.oss.pm.threshold.ThresholdMonitorKey)
     */
    public void resumeThresholdMonitorByKey(ThresholdMonitorKey tmKey)
    throws javax.oss.UnsupportedOperationException, javax.ejb.ObjectNotFoundException,
    javax.oss.IllegalArgumentException
    {
        Log.write(this,Log.LOG_ALL,"resumeThresholdMonitorByKey()","called");

        // check if method is supported
        String[] supportedOperations = getSupportedOptionalOperations();
        Arrays.sort( supportedOperations );
        if ( Arrays.binarySearch(supportedOperations,
          JVTThresholdMonitorSessionOptionalOpt.RESUME_THRESHOLD_MONITOR_BY_KEY )<0 ) {
            Log.write(this,Log.LOG_ALL,"resumeThresholdMonitorByKey()","not supported");
            throw new javax.oss.UnsupportedOperationException(
                JVTThresholdMonitorSessionOptionalOpt.RESUME_THRESHOLD_MONITOR_BY_KEY );
        }

        if ( tmKey == null ) {
            Log.write(this,Log.LOG_MINOR,"resumeThresholdMonitorByKey()",ERR_THRESHOLD_MONITOR_KEY_NULL);
            throw new javax.oss.IllegalArgumentException( ERR_THRESHOLD_MONITOR_KEY_NULL );
        }

        // Look-up thresholdmonitor entity bean
        ThresholdMonitorValue entityValue = null;
        ThresholdMonitorEntityLocal entitySession = null;
        try {
            entitySession = entityHome.findByPrimaryKey( tmKey.getThresholdMonitorPrimaryKey() );
        } catch  (FinderException e ) {
            Log.write(this,Log.LOG_MINOR,"resumeThresholdMonitorByKey()","exception="+e);
            Log.write( ERR_THRESHOLD_MONITOR_NOT_FOUND );
            throw new ObjectNotFoundException( ERR_THRESHOLD_MONITOR_NOT_FOUND );
        }

        // resume the associated performance monitor
        PerformanceMonitorKey pmKey = entitySession.getPerformanceMonitorKey();
        try {
            performanceMonitorSession.resumePerformanceMonitorByKey( pmKey );
        } catch ( javax.oss.UnsupportedOperationException e) {
            Log.write(this,Log.LOG_MINOR,"resumeThresholdMonitorByKey()","exception="+e);
            Log.write( ERR_COULD_NOT_RESUME_THRESHOLD_MONITOR );
            throw new RuntimeException( ERR_COULD_NOT_RESUME_THRESHOLD_MONITOR + " " + e.getMessage());
        } catch ( javax.ejb.ObjectNotFoundException e ) {
            Log.write(this,Log.LOG_MINOR,"resumeThresholdMonitorByKey()","exception="+e);
            Log.write( ERR_COULD_NOT_RESUME_THRESHOLD_MONITOR );
            throw new RuntimeException( ERR_COULD_NOT_RESUME_THRESHOLD_MONITOR + " " + e.getMessage());
        } catch ( javax.oss.IllegalArgumentException e ) {
            Log.write(this,Log.LOG_MINOR,"resumeThresholdMonitorByKey()","exception="+e);
            Log.write( ERR_COULD_NOT_RESUME_THRESHOLD_MONITOR );
            throw new RuntimeException( ERR_COULD_NOT_RESUME_THRESHOLD_MONITOR + " " + e.getMessage() );
        } catch ( RemoteException e ) {
            Log.write(this,Log.LOG_MINOR,"resumeThresholdMonitorByKey()","exception="+e);
            Log.write( ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
            Log.write( ERR_COULD_NOT_RESUME_THRESHOLD_MONITOR );
            throw new RuntimeException( ERR_COULD_NOT_RESUME_THRESHOLD_MONITOR
                + " " + ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR + " " + e.getMessage() );
        }

        // change status for threshold monitor to active
        entityValue = entitySession.getThresholdMonitorValue();
        entityValue.setState( ThresholdMonitorState.ACTIVE_ON_DUTY );
        entitySession.setThresholdMonitorValue( entityValue ); // store the value back to the database
    }

    /**
     * JVTThresholdMonitorSession.tryResumeThresholdMonitorsByKeys()
     * @see javax.oss.pm.threshold.JVTThresholdMonitorSession#tryResumeThresholdMonitorsByKeys(javax.oss.pm.threshold.ThresholdMonitorKey[])
     */
    public ThresholdMonitorKeyResult[] tryResumeThresholdMonitorsByKeys(ThresholdMonitorKey[] tmKeys)
        throws javax.oss.UnsupportedOperationException, javax.oss.IllegalArgumentException
    {
        Log.write(this,Log.LOG_ALL,"tryResumeThresholdMonitorsByKeys()","called");

        // check if method is supported
        String[] supportedOperations = getSupportedOptionalOperations();
        Arrays.sort( supportedOperations );
        if ( Arrays.binarySearch(supportedOperations,
          JVTThresholdMonitorSessionOptionalOpt.TRY_RESUME_THRESHOLD_MONITORS_BY_KEYS )<0 ) {
            Log.write(this,Log.LOG_ALL,"tryResumeThresholdMonitorsByKeys()","not supported");
            throw new javax.oss.UnsupportedOperationException(
                JVTThresholdMonitorSessionOptionalOpt.TRY_RESUME_THRESHOLD_MONITORS_BY_KEYS );
        }

        if ( tmKeys == null ) {
            Log.write(this,Log.LOG_MINOR,"tryResumeThresholdMonitorsByKeys()",
                ERR_THRESHOLD_MONITOR_KEY_ARRAY_IS_NULL );
            throw new javax.oss.IllegalArgumentException(
                ERR_THRESHOLD_MONITOR_KEY_ARRAY_IS_NULL );
        }
        // check all keys in array
        ThresholdMonitorKey key = null;
        for (int i=0;i<tmKeys.length;i++) {
            key = tmKeys[i];
            if ( key == null ) {
                Log.write(this,Log.LOG_ALL,"tryResumeThresholdMonitorsByKeys()",
                    ERR_THRESHOLD_MONITOR_KEY_NULL + " (key == null)");
                throw new javax.oss.IllegalArgumentException( ERR_THRESHOLD_MONITOR_KEY_NULL );
            } else if ( key.getThresholdMonitorPrimaryKey() == null ) {
                Log.write(this,Log.LOG_ALL,"tryResumeThresholdMonitorsByKeys()",
                    ERR_THRESHOLD_MONITOR_KEY_NULL + " (key.getThresholdMonitorPrimaryKey() == null)");
                throw new javax.oss.IllegalArgumentException( ERR_THRESHOLD_MONITOR_KEY_NULL );
            }
        }

        // resume one by one the thresholds in the array
        // if one resume fails, try next
        // store result of each operation in result array
        ThresholdMonitorKeyResult[] resultArray = new ThresholdMonitorKeyResult[ tmKeys.length ];
        ThresholdMonitorKeyResult result = null;

        for (int i=0;i<tmKeys.length;i++) {
            try {
                key = tmKeys[i];
                result = new ThresholdMonitorKeyResultImpl();
                result.setManagedEntityKey( key );

                resumeThresholdMonitorByKey( key );
                result.setSuccess( true );
            } catch ( javax.ejb.ObjectNotFoundException e ) {
                Log.write(this,Log.LOG_ALL,"tryResumeThresholdMonitorsByKeys()",e.getMessage() );
                result.setException( e );
                result.setSuccess( false );
            } catch ( javax.oss.IllegalArgumentException e ) {
                Log.write(this,Log.LOG_ALL,"tryResumeThresholdMonitorsByKeys()",e.getMessage() );
                result.setException( e );
                result.setSuccess( false );
            } catch ( javax.oss.UnsupportedOperationException e ) { // most unlikely
                Log.write(this,Log.LOG_MAJOR,"tryResumeThresholdMonitorsByKeys()",e.getMessage() );
                result.setException( e );
                result.setSuccess( false );
            }
            resultArray[i] = result;
        }
        return resultArray;
    }

    //
    // JVTSession methods:
    //

    /**
     * Returns the supported optional methods. Checks with the performance
     * monitor to see if it supports suspend/resume.
     * @return empty String array
     * @see javax.oss.JVTSession#getSupportedOptionalOperations()
     */
    public String[] getSupportedOptionalOperations( )
    {
        Log.write(this,Log.LOG_ALL,"getSupportedOptionalOperations()","called");

        ArrayList supportedOperations = new ArrayList();
        supportedOperations.add( JVTThresholdMonitorSessionOptionalOpt.TRY_CREATE_THRESHOLD_MONITORS_BY_VALUES );
        supportedOperations.add( JVTThresholdMonitorSessionOptionalOpt.TRY_REMOVE_THRESHOLD_MONITORS_BY_KEYS );

        // check if suspend and resume is supported by the performance monitor
        String[] pmSupportedOperations = null;
        try {
            pmSupportedOperations = performanceMonitorSession.getSupportedOptionalOperations();
        } catch ( RemoteException e ) {
            Log.write(this,Log.LOG_MINOR,"getSupportedOptionalOperations()","exception="+e);
            Log.write( ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
            throw new RuntimeException( ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
        }

        Arrays.sort( pmSupportedOperations );

        if ( Arrays.binarySearch( pmSupportedOperations,
          JVTPerformanceMonitorSessionOptionalOpt.SUSPEND_PERFORMANCE_MONITOR_BY_KEY ) >= 0 ) {
            Log.write(this,Log.LOG_ALL,"getSupportedOptionalOperations()","suspend is supported");
            supportedOperations.add( JVTThresholdMonitorSessionOptionalOpt.SUSPEND_THRESHOLD_MONITOR_BY_KEY );
            supportedOperations.add( JVTThresholdMonitorSessionOptionalOpt.TRY_SUSPEND_THRESHOLD_MONITORS_BY_KEYS );
        }

        if ( Arrays.binarySearch( pmSupportedOperations,
          JVTPerformanceMonitorSessionOptionalOpt.RESUME_PERFORMANCE_MONITOR_BY_KEY ) >= 0 ) {
            Log.write(this,Log.LOG_ALL,"getSupportedOptionalOperations()","resume is supported");
            supportedOperations.add( JVTThresholdMonitorSessionOptionalOpt.RESUME_THRESHOLD_MONITOR_BY_KEY );
            supportedOperations.add( JVTThresholdMonitorSessionOptionalOpt.TRY_RESUME_THRESHOLD_MONITORS_BY_KEYS );
        }

        // convert to String[]
        String[] supportedArray = new String[ supportedOperations.size() ];
        return (String[]) supportedOperations.toArray( supportedArray );
    }

    /**
     * Returns supported managed entity types. Currently this method only return
     * <code>SimpleThresholdMonitorValue.VALUE_TYPE</code>.
     * <code>TriggerOnAllThresholdMonitorValue.VALUE_TYPE</code>.
     * <code>TriggerOnAnyThresholdMonitorValue.VALUE_TYPE</code>.
     * @return String array of supported managed entity types.
     * @see javax.oss.JVTSession#getManagedEntityTypes()
     */
    public String[] getManagedEntityTypes()
    {
        Log.write(this,Log.LOG_ALL,"getManagedEntityTypes()","called");
        String managedEntityTypes[] = {
          SimpleThresholdMonitorValue.VALUE_TYPE,
          TriggerOnAllThresholdMonitorValue.VALUE_TYPE,
          TriggerOnAnyThresholdMonitorValue.VALUE_TYPE
         };
        return managedEntityTypes;
    }

    /**
     * Returns the supported query types. This method currently returns the
     * <code>QueryBySimpleThresAttributesValue.QUERY_TYPE</code>.
     * @return String array of supported query types.
     * @see javax.oss.JVTSession#getQueryTypes()
     */
    public String[] getQueryTypes()
    {
        Log.write(this,Log.LOG_ALL,"getQueryTypes()","called");
        String queryValue[] = { QueryByMonitorValue.QUERY_TYPE,
                                QueryBySimpleThresAttributesValue.QUERY_TYPE };
        return queryValue;
    }

    /**
     * Returns the used event property descriptors. This methods currently returns
     * an array containing <code>NotifyNewAlarmEventPropertyDescriptor.EVENT_TYPE_VALUE</code>
     * and <code>NotifyClearedAlarmEventPropertyDescriptor.EVENT_TYPE_VALUE</code>.
     * @return String array of supported event types.
     * @see javax.oss.JVTSession#getEventTypes()
     */
    public String[] getEventTypes()
    {
        Log.write(this,Log.LOG_ALL,"getEventTypes()","called");
        String eventTypes[] = { NotifyNewAlarmEventPropertyDescriptor.EVENT_TYPE_VALUE,
                                NotifyClearedAlarmEventPropertyDescriptor.EVENT_TYPE_VALUE
                              };

        return eventTypes;
    }

    /**
     * JVTSession.makeQueryValue().
     * @see #getQueryTypes()
     * @see javax.oss.JVTSession#makeQueryValue(String)
     */
    public QueryValue makeQueryValue(String type) throws javax.oss.IllegalArgumentException
    {
        Log.write(this,Log.LOG_ALL,"makeQueryValue()","type="+type);

        QueryValue returnValue = null;
        if ( type == null ) {
            Log.write(this,Log.LOG_ALL,"makeQueryValue()",ERR_QUERY_TYPE_NULL);
            throw new javax.oss.IllegalArgumentException( ERR_QUERY_TYPE_NULL );
        } else if ( QueryBySimpleThresAttributesValue.QUERY_TYPE.compareTo( type ) == 0 ) {
            returnValue =  new QueryBySimpleThresAttributesValueImpl();
        } else if ( QueryByMonitorValue.QUERY_TYPE.compareTo( type )== 0 ) {
            returnValue = new QueryByMonitorValueImpl();
        } else {
            Log.write(this,Log.LOG_ALL,"makeQueryValue()",ERR_QUERY_TYPE_NOT_SUPPORTED);
            throw new javax.oss.IllegalArgumentException( ERR_QUERY_TYPE_NOT_SUPPORTED ); // not supported type
        }
        return returnValue;
    }

    /**
     * JVTSession.getEventDescriptor().
     * @see #getEventTypes()
     * @see javax.oss.JVTSession#getEventDescriptor(String)
     */
    public EventPropertyDescriptor getEventDescriptor(String eventType)
        throws javax.oss.IllegalArgumentException
    {
        Log.write(this,Log.LOG_ALL,"getEventDescriptor()","eventType="+eventType);

        if ( eventType == null ) {
            Log.write(this,Log.LOG_ALL,"getEventDescriptor()",ERR_EVENT_TYPE_NULL);
            throw new javax.oss.IllegalArgumentException( ERR_EVENT_TYPE_NULL );
        }

        // check if it is a valid event type
        String[] eventTypes = getEventTypes();
        boolean validType = false;
        for (int i=0;i<eventTypes.length;i++) {
            if ( eventTypes[i].equals( eventType ) == true ) {
                validType = true;
                break;
            }
        }
        if ( validType == false ) {
            Log.write(this,Log.LOG_ALL,"getEventDescriptor()",ERR_EVENT_TYPE_NOT_SUPPORTED);
            throw new javax.oss.IllegalArgumentException( ERR_EVENT_TYPE_NOT_SUPPORTED );
        }

        try {
            return alarmMonitorSession.getEventDescriptor( eventType );
        } catch ( RemoteException e ) {
            Log.write(this,Log.LOG_MINOR,"getEventDescriptor()","exception="+e);
            Log.write( ERR_REMOTE_INVOCATION_ON_ALARM_MONITOR );
            throw new RuntimeException( ERR_REMOTE_INVOCATION_ON_ALARM_MONITOR );
        } catch ( javax.oss.IllegalArgumentException e ) {
            Log.write(this,Log.LOG_ALL,"getEventDescriptor()","exception="+e);
            e.fillInStackTrace();
            throw e;
        }
    }

    /**
     * JVTSession.makeManagedEntityValue().
     * @see #getManagedEntityTypes()
     * @see javax.oss.JVTSession#makeManagedEntityValue(String)
     */
    public ManagedEntityValue makeManagedEntityValue( String valueType)
        throws javax.oss.IllegalArgumentException
    {
        Log.write(this,Log.LOG_ALL,"makeManagedEntityValue","valueType="+valueType);
        return this.makeThresholdMonitorValue( valueType ); // forward...
    }

    /**
     * JVTSession.queryManagedEntities(). Calls the <code>queryThresholdMonitors()</code>
     * method which performs the actual operation.
     * @see #queryThresholdMonitors(javax.oss.QueryValue,String[])
     * @see javax.oss.JVTSession#queryManagedEntities(javax.oss.QueryValue,String[])
     */
    public ManagedEntityValueIterator
        queryManagedEntities( QueryValue query , String[] attrNames)
        throws javax.oss.IllegalArgumentException
    {
        Log.write(this,Log.LOG_ALL,"queryManagedEntities","called");
        return this.queryThresholdMonitors(query,attrNames); // forward to specific method
    }

    /**
     * Get reference to threshold monitor entity bean here.
     */
    private void initializeEntityBean() {
        Log.write(this,Log.LOG_ALL,"initializeEntityBean()","called");
        // get reference to threshold monitor entity bean here
        // set up connection to local threshold monitor entity bean...
        Log.write( "get initial context" );
        Context initCtx = null;
        try {
            initCtx = new InitialContext();
        } catch ( NamingException e ) {
            Log.write(this,Log.LOG_MAJOR,"ejbCreate()",
                "could not get initial context, exception="+e);
            //System.out.println("wrx--initializeEntityBean"+e);
            throw new RuntimeException( e.toString() );
        }

        Log.write( "lookup " + THRESHOLD_MONITOR_ENTITY_LOCAL_HOME );
        Object result = null;
        try {
            result = initCtx.lookup( THRESHOLD_MONITOR_ENTITY_LOCAL_HOME );
        } catch ( NamingException e ) {
            Log.write(this,Log.LOG_MAJOR,"ejbCreate()","could not lookup "
                +THRESHOLD_MONITOR_ENTITY_LOCAL_HOME+", exception="+e);
            //System.out.println("wrx--initializeEntityBean"+e);
            throw new RuntimeException( e.toString() );
        }

        Log.write( "narrow to local entity home");
        entityHome = (ThresholdMonitorEntityLocalHome) PortableRemoteObject.narrow(
            result, ThresholdMonitorEntityLocalHome.class);
        Log.write( "got local entity home!" );

    }

    /**
     * Compare a SimpleThresholdMonitorValue value against a
     * QueryByMonitorValue or an QueryBySimpleThresAttributesValue query.
     * @param value the threshold value
     * @param query the threshold query
     * @return true if the threshold value full fills the query
     */
    private boolean isThresholdEqualWithQuery( ThresholdMonitorValue value,
                                               QueryByMonitorValue query ) {
        Log.write(this,"isThresholdEqualWithQuery()","called");

        if ( query.isPopulated( QueryByMonitorValue.GRANULARITY ) ) {
            if ( value.isPopulated( ThresholdMonitorValue.GRANULARITY ) ) {
                if ( value.getGranularityPeriod()!=query.getGranularityPeriod() ) {
                    return false;
                }
            } else {
                return false;
            }
        }

        if ( query.isPopulated( QueryByMonitorValue.NAME ) ) {
            if ( value.isPopulated( ThresholdMonitorValue.NAME ) ) {
                if ( query.getName().equals( value.getName() )==false ) {
                    return false;
                }
            } else {
                return false;
            }
        }

        if ( query.isPopulated( QueryByMonitorValue.STATE ) ) {
            if ( value.isPopulated( ThresholdMonitorValue.STATE ) ) {
                if ( query.getState() != value.getState() ) {
                    return false;
                }
            } else {
                return false;
            }
        }

        if ( query.isPopulated( QueryByMonitorValue.VALUE_TYPE ) ) {
            String valueType = query.getValueType();

            if ( ( (value instanceof SimpleThresholdMonitorValue)
                && (valueType.equals( SimpleThresholdMonitorValue.VALUE_TYPE )==false) )
              || ( (value instanceof TriggerOnAllThresholdMonitorValue)
                && (valueType.equals( TriggerOnAllThresholdMonitorValue.VALUE_TYPE )==false) )
              || ( (value instanceof TriggerOnAnyThresholdMonitorValue)
                && (valueType.equals( TriggerOnAnyThresholdMonitorValue.VALUE_TYPE )==false) ) ) {
                    return false;
            }
        }

        // if all test passed
        return true;
    }

    /**
     * Compare a SimpleThresholdMonitorValue value against a
     * QueryByMonitorValue or an QueryBySimpleThresAttributesValue query.
     * @param value the threshold value
     * @param query the threshold query
     * @return true if the threshold value full fills the query
     */
    private boolean isThresholdEqualWithQuery( SimpleThresholdMonitorValue value,
                                               QueryBySimpleThresAttributesValue query ) {

        Log.write(this,"isThresholdEqualWithQuery(SimpleThresholdMonitorValue,QueryBySimpleThresAttributesValue)","called");

        // QueryBySimpleThresAttributesValue.MONITOR_TYPE;
        if ( query.isPopulated( QueryBySimpleThresAttributesValue.VALUE_TYPE ) ) {
            if ( query.getValueType().equals( value.VALUE_TYPE )==false ) {
                return false;
            }
        }

        // QueryBySimpleThresAttributesValue.NAME;
        if ( query.isPopulated(QueryBySimpleThresAttributesValue.NAME) ) {
            if ( value.isPopulated( SimpleThresholdMonitorValue.NAME ) ) {
                if ( query.getName().equals( value.getName() )==false ) {
                    return false;
                }
            } else {
                return false;
            }
        }

        // QueryBySimpleThresAttributesValue.ALARM_CONFIG;
        if ( query.isPopulated( QueryBySimpleThresAttributesValue.ALARM_CONFIG ) ) {
            if ( value.isPopulated( SimpleThresholdMonitorValue.ALARM_CONFIG ) ) {
                if ( value.getAlarmConfig().equals( query.getAlarmConfig() ) ) {
                    return false;
                }
            } else {
                return false;
            }
        }

        // QueryBySimpleThresAttributesValue.DEFINITIONS;
        if ( query.isPopulated( QueryBySimpleThresAttributesValue.DEFINITIONS ) ) {
            if ( value.isPopulated( SimpleThresholdMonitorValue.DEFINITION ) ) {
                ThresholdDefinition valueDefinition = value.getThresholdDefinition();
                ThresholdDefinition[] queryDefinitions = query.getThresholdDefinitions();
                boolean foundEqual = false;
                for (int i=0;i<queryDefinitions.length;i++) {
                    if ( valueDefinition.equals( queryDefinitions[i] )==true ) {
                        foundEqual=true;
                        break;
                    }
                }
                if ( foundEqual == false ) { // if no definition equals the queried definitions
                    return false;
                }
            } else {
                return false;
            }
        }

        // QueryBySimpleThresAttributesValue.GRANULARITY;
        if ( query.isPopulated( QueryBySimpleThresAttributesValue.GRANULARITY ) ) {
            if ( value.isPopulated( SimpleThresholdMonitorValue.GRANULARITY ) ) {
                if ( value.getGranularityPeriod()!=query.getGranularityPeriod() ) {
                    return false;
                }
            } else {
                return false;
            }
        }

        // QueryBySimpleThresAttributesValue.OBSERVABLE_OBJECTS;
        if ( query.isPopulated( QueryBySimpleThresAttributesValue.OBSERVABLE_OBJECTS ) ) {
            if ( value.isPopulated( SimpleThresholdMonitorValue.OBSERVABLE_OBJECT ) ) {
                String valueObservableObject = value.getObservableObject();
                String[] queryObservableObjects = query.getObservableObjects();
                boolean foundEqual = false;
                for (int i=0;i<queryObservableObjects.length;i++) {
                    if ( valueObservableObject.equals( queryObservableObjects[i] ) ) {
                        foundEqual = true;
                        break;
                    }
                }
                if ( foundEqual == false ) {
                    return false;
                }
            } else {
                return false;
            }
        }
        // QueryBySimpleThresAttributesValue.QUERY_TYPE;
        // -- not interesting to compare.
        // -- just what type of query it is.

        // QueryBySimpleThresAttributesValue.STATE
        if ( query.isPopulated( QueryBySimpleThresAttributesValue.STATE ) ) {
            if ( value.isPopulated( SimpleThresholdMonitorValue.STATE ) ) {
                // state is not an attribute that can be set (populated)
                // it is always defined for a threshold monitor value
                // this might affect this implementation...!
                if ( query.getState() != value.getState() ) {
                    return false;
                }
            } else {
                return false;
            }
        }

        // passed all tests return true!
        Log.write(this,Log.LOG_ALL,"isThresholdEqualWithQuery()","true");
        return true;
    }

    /**
     * Initialize the performance monitor home.
     * @return Performance Monitor home interface
     */
    private JVTPerformanceMonitorHome getPerformanceMonitorHome() {
        Log.write(this,Log.LOG_ALL,"getPerformanceMonitorHome()","called");

        Log.write( "get initial context" );
        Context initCtx = null;
        try {
            initCtx = new InitialContext();
        } catch ( NamingException e ) {
            Log.write(this,Log.LOG_MAJOR,"getPerformanceMonitorHome()",
                "could not get initial context, exception="+e);
            throw new RuntimeException( e.toString() );
        }

        Log.write( "lookup " + PERFORMANCE_MONITOR_HOME );
        Object result = null;
        try {
            result = initCtx.lookup( PERFORMANCE_MONITOR_HOME );
        } catch ( NamingException e ) {
            Log.write(this,Log.LOG_MAJOR,"getPerformanceMonitorHome()",
                "could not lookup "+PERFORMANCE_MONITOR_HOME+", exception="+e);
            throw new RuntimeException( e.toString() );
        }

        Log.write( "narrow to Performance Monitor Home");
        return (JVTPerformanceMonitorHome) PortableRemoteObject.narrow(
            result, JVTPerformanceMonitorHome.class);
    }

    /**
     * Get the alarm monitor home.
     * @return Alarm Monitor home interface
     */
    private JVTAlarmMonitorHome getAlarmMonitorHome() {
        Log.write(this,Log.LOG_ALL,"getAlarmMonitorHome()","called");

        Log.write( "get initial context" );
        Context initCtx = null;
        try {
            initCtx = new InitialContext();
        } catch ( NamingException e ) {
            Log.write(this,Log.LOG_MAJOR,"getAlarmMonitorHome()",
                "could not get initial context, exception="+e);
            throw new RuntimeException( e.toString() );
        }

        Log.write( "lookup " + ALARM_MONITOR_HOME );
        Object result = null;
        try {
            result = initCtx.lookup( ALARM_MONITOR_HOME );
        } catch ( NamingException e ) {
            Log.write(this,Log.LOG_MAJOR,"getAlarmMonitorHome()",
                "could not lookup "+ALARM_MONITOR_HOME+", exception="+e);
            throw new RuntimeException( e.toString() );
        }

        Log.write( "narrow to Alarm Monitor Home");
        return (JVTAlarmMonitorHome) PortableRemoteObject.narrow(
            result, JVTAlarmMonitorHome.class);
    }

    /**
     * Converts a threshold monitor value into a performance monitor value that
     * can be used for monitoring thresholds. Performance monitor key is not set.
     *
     * <p>A new performance monitor value is created (PerformanceMonitorByObjectsValue)
     * and populated with data from the threshold monitor value. The name of the
     * performance montior value is the same as for the threshold monitor value.
     *
     * <p>The performance monitor value will have the same schedule and granularity
     * as the threshold monitor value if they were defined.
     *
     * <p>There is no guarantee that the populated performance monitor value will
     * be accepted when a new performance monitor is created and the values checked.
     *
     * @param tmValue the threshold monitor value to convert
     * @return a performance monitor value based on threshold monitor value
     * @exception javax.oss.IllegalArgumentException if a performance monitor
     * value could not be created
     */

     private PerformanceMonitorByObjectsValue convertToPerformanceMonitorValue(
                                        ThresholdMonitorValue tmValue )
                                        throws javax.oss.IllegalArgumentException {
        Log.write(this,Log.LOG_ALL,"convertToPerformanceMonitorValue()","called");
        try {

            // Create an empty performance monitor value.
            Log.write("Make performance monitor value...");
            PerformanceMonitorByObjectsValue pmValue = (PerformanceMonitorByObjectsValue)
                performanceMonitorSession.makePerformanceMonitorValue( PerformanceMonitorByObjectsValue.VALUE_TYPE );

            // Set the populated values in threshold monitor value that are
            // possible to transfer to the performance monitor value.

            if ( tmValue.isPopulated( ThresholdMonitorValue.GRANULARITY ) ) {
                Log.write("Set granularity period...");
                pmValue.setGranularityPeriod( tmValue.getGranularityPeriod() );
            }

            if ( tmValue instanceof SimpleThresholdMonitorValue) {
              if ( tmValue.isPopulated( SimpleThresholdMonitorValue.DEFINITION ) ) {
                  Log.write("Set measurement attributes...");
                  // set the measurement attributes based on the threshold definition.
                  ThresholdDefinition thresholdDefinition = ((SimpleThresholdMonitorValue)tmValue).getThresholdDefinition();
                  PerformanceAttributeDescriptor[] paDescriptors = new PerformanceAttributeDescriptor[]
                      { thresholdDefinition.getAttributeDescriptor() };

                  pmValue.setMeasurementAttributes( paDescriptors );
              }
            }
            if ( tmValue instanceof TriggerOnAnyThresholdMonitorValueImpl) {
              if ( tmValue.isPopulated( TriggerOnAnyThresholdMonitorValueImpl.DEFINITIONS ) ) {
                  Log.write("Set measurement attributes...");
                  // set the measurement attributes based on the threshold definition.
                  ThresholdDefinition[] thresholdDefinition = ((TriggerOnAnyThresholdMonitorValueImpl)tmValue).getThresholdDefinitions();
                  PerformanceAttributeDescriptor[] paDescriptors = new PerformanceAttributeDescriptor[thresholdDefinition.length];
                  for ( int i=0; i<thresholdDefinition.length; i++ ) {
                      paDescriptors[i] = thresholdDefinition[i].getAttributeDescriptor();
                  }

                  pmValue.setMeasurementAttributes( paDescriptors );
              }
            }
            if ( tmValue instanceof TriggerOnAllThresholdMonitorValueImpl) {
              if ( tmValue.isPopulated( TriggerOnAllThresholdMonitorValueImpl.DEFINITIONS ) ) {
                  Log.write("Set measurement attributes...");
                  // set the measurement attributes based on the threshold definition.
                  ThresholdDefinition[] thresholdDefinition = ((TriggerOnAllThresholdMonitorValueImpl)tmValue).getThresholdDefinitions();
                  PerformanceAttributeDescriptor[] paDescriptors = new PerformanceAttributeDescriptor[thresholdDefinition.length];
                  for ( int i=0; i<thresholdDefinition.length; i++ ) {
                      paDescriptors[i] = thresholdDefinition[i].getAttributeDescriptor();
                  }

                  pmValue.setMeasurementAttributes( paDescriptors );
              }
            }

            if ( tmValue.isPopulated( ThresholdMonitorValue.NAME ) ){
                Log.write("Set name...");
                pmValue.setName( tmValue.getName() );
            }

            if ( tmValue instanceof SimpleThresholdMonitorValue) {
                if ( tmValue.isPopulated( SimpleThresholdMonitorValue.OBSERVABLE_OBJECT ) ){
                    Log.write("Set observed objects...");
                    pmValue.setObservedObjects( new String[] {((SimpleThresholdMonitorValue)tmValue).getObservableObject()});
                }
            }
            if ( tmValue instanceof TriggerOnAllThresholdMonitorValueImpl) {
                if ( tmValue.isPopulated( TriggerOnAllThresholdMonitorValueImpl.OBSERVABLE_OBJECTS ) ){
                    Log.write("Set observed objects...");
                    pmValue.setObservedObjects(((TriggerOnAllThresholdMonitorValueImpl)tmValue).getObservableObjects());
                }
            }
            if ( tmValue instanceof TriggerOnAnyThresholdMonitorValueImpl) {
                if ( tmValue.isPopulated( TriggerOnAnyThresholdMonitorValueImpl.OBSERVABLE_OBJECTS ) ){
                    Log.write("Set observed objects...");
                    pmValue.setObservedObjects(((TriggerOnAnyThresholdMonitorValueImpl)tmValue).getObservableObjects());
                }
            }

            if ( tmValue.isPopulated( ThresholdMonitorValue.SCHEDULE ) ) {
                Log.write("Set schedule...");
                pmValue.setSchedule( tmValue.getSchedule() );
            }

            Log.write("Set report by event...");
            pmValue.setReportByEvent( ReportMode.EVENT_SINGLE );

            //pmValue.setReportByFile(); // not set because only event is interesting

            Log.write("Set report formats...");
            try {
                ReportFormat reportFormat = getReportFormat();
                pmValue.setReportFormat( reportFormat );
            } catch ( ThresholdMonitorException e ) {
                Log.write(this,Log.LOG_MAJOR,"convertToPerformanceMonitorValue()",
                    "exception="+e);
                throw new RuntimeException( e.getMessage() ); // or ignore and let performance monitor select (current) format?
            }

            //pmValue.setReportPeriod(); // only interesting for file report mode

            Log.write("ok!");
            return pmValue;
        } catch ( RemoteException e ) {
            Log.write(this,Log.LOG_MAJOR,"convertToPerformanceMonitorValue()","exception="+e);
            Log.write( ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
            throw new RuntimeException( ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
        } catch ( javax.oss.IllegalArgumentException e ) {
            Log.write(this,Log.LOG_MAJOR,"convertToPerformanceMonitorValue()","exception="+e);
            Log.write( ERR_COULD_NOT_CREATE_PERFORMANCE_MONITOR_VALUE );
            throw e;
        } catch ( java.lang.IllegalArgumentException e ) {
            Log.write(this,Log.LOG_MAJOR,"convertToPerformanceMonitorValue()","exception="+e);
            Log.write( ERR_COULD_NOT_CREATE_PERFORMANCE_MONITOR_VALUE );
            throw new javax.oss.IllegalArgumentException(
                ERR_COULD_NOT_CREATE_PERFORMANCE_MONITOR_VALUE
                + " [" + e.getMessage() +"]");
        }
    }

    /**
     * Returns a ThresholdMonitorValue based on the original ThresholdMonitorValue
     * but with only the specified attributes.
     * @param originalValue original threshold monitor value
     * @param attributes attributes to transfer to the new threshold monitor value
     * @return ThresholdMonitorValue with the specified attributes
     * @exception javax.oss.IllegalArgumentException if a new threshold monitor
     * value could not be created
     */
    private ThresholdMonitorValue makeThresholdMonitorValueWithAttributes(
        ThresholdMonitorValue originalValue, String[] attributes )
        throws javax.oss.IllegalArgumentException {

        Log.write(this,Log.LOG_ALL,"makeThresholdMonitorValueWithAttributes()","called");

        if (( originalValue instanceof SimpleThresholdMonitorValue ) ||
            ( originalValue instanceof TriggerOnAnyThresholdMonitorValue ) ||
            ( originalValue instanceof TriggerOnAllThresholdMonitorValue ))
        {
           ThresholdMonitorValue newValue = null;
           if ( originalValue instanceof SimpleThresholdMonitorValue )
               newValue = makeThresholdMonitorValue( SimpleThresholdMonitorValue.VALUE_TYPE );
           if ( originalValue instanceof TriggerOnAnyThresholdMonitorValue )
               newValue = makeThresholdMonitorValue( TriggerOnAnyThresholdMonitorValue.VALUE_TYPE );
           if ( originalValue instanceof TriggerOnAllThresholdMonitorValue )
               newValue = makeThresholdMonitorValue( TriggerOnAllThresholdMonitorValue.VALUE_TYPE );

            newValue.setManagedEntityKey( originalValue.getManagedEntityKey() );

            // populate value object with specified attributes
            for (int i=0;i<attributes.length;i++) {
                try {
                    newValue.setAttributeValue( attributes[i],
                        originalValue.getAttributeValue( attributes[i] ) );

                } catch ( java.lang.IllegalStateException e ) {
                    Log.write(this,Log.LOG_ALL,
                        "makeThresholdMonitorValueWithAttributes()",
                        "Attribute not populated: " + attributes[i] );
                    continue; // ignore not populated attributes
                } catch ( java.lang.IllegalArgumentException e ) {
                    Log.write(this,Log.LOG_ALL,
                        "makeThresholdMonitorValueWithAttributes()",
                        "Attribute do not exist: " + attributes[i] );
                    continue; // ignore non existing attributes
                } catch ( UnsupportedAttributeException e ) {
                    Log.write(this,Log.LOG_MINOR,
                        "makeThresholdMonitorValueWithAttributes()",
                        "Attribute not supported: " + attributes[i] );
                    Log.write(this,Log.LOG_ALL,
                    "makeThresholdMonitorValueWithAttributes()",
                    "Unsupported attribute="+e.getAttributeName() );
                    continue; // ignore not supported attribute
                }
            }
            return newValue;
        } else {
            Log.write(this,Log.LOG_MINOR,
                "makeThresholdMonitorValueWithAttributes()",
                ERR_VALUE_TYPE_NOT_SUPPORTED);
            throw new javax.oss.IllegalArgumentException( ERR_VALUE_TYPE_NOT_SUPPORTED );
        }
    }

    /**
     * Initialize the applicationContext and applicationDN. The values are
     * fetched from the bean using JNDI (<code>env-entry</code>).
     * <pre>
     * applicationContext/PROVIDER_URL
     * applicationContext/INITIAL_CONTEXT_FACTORY
     * applicationContext/systemProperties/PROPERTY_1
     * applicationContext/systemProperties/PROPERTY_2
     * ...
     * applicationDistinguishedName
     * </pre>
     * All properties registered under <code>systemProperties</code> are added
     * as system properties in the ApplicationContext object.
     */
    private void initializeApplicationContext() {
        Log.write(this,Log.LOG_ALL,"initializeApplicationContext()","called");


        InitialContext initCtx = null;
        Object result = null;
        try {
            initCtx = new InitialContext();

            // initialize includeApplicationDNInEvent from environment property
            // INCLUDE_APPLICATION_DN_IN_EVENT_PROPERTY_NAME
            Log.write(this,Log.LOG_ALL,"initializeApplicationContext()",
                "get env. prop: " + INCLUDE_APPLICATION_DN_IN_EVENT_PROPERTY_NAME );

            result = initCtx.lookup( INCLUDE_APPLICATION_DN_IN_EVENT_PROPERTY_NAME );
            Boolean booleanValue = (Boolean) PortableRemoteObject.narrow(result,Boolean.class);
            includeApplicationDNInEvent = booleanValue.booleanValue();
            Log.write(INCLUDE_APPLICATION_DN_IN_EVENT_PROPERTY_NAME+"="+includeApplicationDNInEvent);
        } catch ( NamingException e ) {
            Log.write(this,Log.LOG_MINOR,"initializeApplicationContext()","Could not get "
                + INCLUDE_APPLICATION_DN_IN_EVENT_PROPERTY_NAME + " property.");
        }

        if ( includeApplicationDNInEvent==false ) {
            Log.write(this,Log.LOG_ALL,"initializeApplicationContext()","includeApplicationDNInEvent==false");
            return;
        }

        // initialize ApplicationContext from EJB properties
        applicationContext = new ApplicationContextImpl();

        try {
            Log.write("Initialize application context...");

            // Comment: The InitialContext.getEnvironment() method is not used
            // because it is depending on the implementation of the actual
            // InitialContext. So to always be sure that the PROVIDER_URL and
            // INITIAL_CONTEXT_FACTORY as well as any other needed system
            // properties are set the environment property <env-entry> in the
            // deployment descriptor for the bean is used instead.

            Log.write( "Lookup " + APPLICATION_CONTEXT_JNDI );
            Object ref = initCtx.lookup( APPLICATION_CONTEXT_JNDI );
            Context applicationCtx = (Context)PortableRemoteObject.narrow(ref,Context.class);

            // provider url
            Log.write( "Get " + APPLICATION_CONTEXT_PROPERTY_PROVIDER_URL );
            ref = applicationCtx.lookup( APPLICATION_CONTEXT_PROPERTY_PROVIDER_URL );
            if ( ref == null ) {
                Log.write("No " + APPLICATION_CONTEXT_PROPERTY_PROVIDER_URL + " property defined!");
            } else {
                String url = (String)PortableRemoteObject.narrow(ref,String.class);
                Log.write("url="+url);
                try {
                    applicationContext.setURL( url );
                } catch ( java.lang.IllegalArgumentException e ) {
                    Log.write(this,Log.LOG_MINOR,"initializeApplicationContext()",
                        "Could not set URL in application context.[" + e + "]");
                }
            }
            // initial context factory class
            Log.write( "Get " + APPLICATION_CONTEXT_PROPERTY_INITIAL_CONTEXT_FACTORY );
            ref = applicationCtx.lookup( APPLICATION_CONTEXT_PROPERTY_INITIAL_CONTEXT_FACTORY );
            if ( ref == null ) {
                Log.write("No " + APPLICATION_CONTEXT_PROPERTY_INITIAL_CONTEXT_FACTORY + " property defined!");
            } else {
                String initialContextFactory = (String) PortableRemoteObject.narrow(ref,String.class);
                Log.write("initialContextFactory="+initialContextFactory);
                try {
                    applicationContext.setFactoryClass( initialContextFactory );
                } catch ( java.lang.IllegalArgumentException e ) {
                    Log.write(this,Log.LOG_MINOR,"initializeApplicationContext()",
                        "Could not set FactoryClass in application context.[" + e + "]");
                }
            }
            // initialize system properties
            Log.write("Initialize system properties...");

            Log.write("Lookup " + APPLICATION_CONTEXT_SYSTEM_PROPERTIES_JNDI );
            ref = initCtx.lookup( APPLICATION_CONTEXT_SYSTEM_PROPERTIES_JNDI );
            if ( ref == null ) {
            	  Log.write( "No " + APPLICATION_CONTEXT_SYSTEM_PROPERTIES_JNDI + " properties defined!");
            } else {

		            Context systemPropertiesCtx = (Context)PortableRemoteObject.narrow(ref,Context.class);

		            // Put all found system properties in a hash map and add to
		            // application context.
		            HashMap systemProperties = new HashMap();

		            NamingEnumeration nameBindings = systemPropertiesCtx.listBindings("");
		            Binding binding = null;
		            String name = null;
		            Object obj = null;
		            while ( nameBindings.hasMore() ) {
		                obj = nameBindings.next();
		                binding = (Binding) PortableRemoteObject.narrow(obj,Binding.class);
		                name = binding.getName();
		                if ( binding.isRelative() == false ) {
		                    // if name is not relative extract only last part (property name)
		                    int lastSlash = name.lastIndexOf('/');
		                    if ( lastSlash != -1 && lastSlash < name.length() ) {
		                        name = name.substring( lastSlash+1 );
		                    }
		                }
		                obj = binding.getObject();
				System.out.println("**********debug2 ThresholdMonitorBean name="+name);
		                Log.write( "Property: " + name + "=" + obj );
		                systemProperties.put(name,obj); // add to system properties
		            }
		            try {
		                applicationContext.setSystemProperties( systemProperties );
		            } catch ( java.lang.IllegalArgumentException e ) {
		                Log.write(this,Log.LOG_MINOR,"initializeApplicationContext()",
		                    "Could not set system properties in application context.[" + e + "]");
		            }
						}
        } catch ( NamingException e ) {
            Log.write(this,Log.LOG_MAJOR,"initializeApplicationContext()","exception="+e);
            Log.write( ERR_COULD_NOT_INITIALIZE_APPLICATION_CONTEXT );
        } catch ( ClassCastException e ) {
            Log.write(this,Log.LOG_MAJOR,"initializeApplicationContext()","exception="+e);
            Log.write( ERR_COULD_NOT_INITIALIZE_APPLICATION_CONTEXT );
        }

        // initialize applicationDN from properties
        try {
            Log.write("Lookup " + APPLICATION_DN_PROPERTY );
            Object ref = initCtx.lookup( APPLICATION_DN_PROPERTY );
            if ( ref == null ) {
            	  Log.write( "No " + APPLICATION_DN_PROPERTY + " property defined!");
            } else {
                String appDN = (String)PortableRemoteObject.narrow(ref,String.class);
                Log.write("appDN="+appDN);
                applicationDN = appDN;
            }
        } catch ( NamingException e ) {
            Log.write(this,Log.LOG_MAJOR,"initializeApplicationContext()","exception="+e);
        }
    }

    /**
     * Returns the report format that should be used by performance monitors.
     * All supported report formats are retrieved from the performance monitor
     * and the report format that supports "3G" and "XML" is selected if found.
     *
     * @return report format
     * @exception if unable to get the report format
     */
    private ReportFormat getReportFormat() throws ThresholdMonitorException {
        Log.write(this,Log.LOG_ALL,"getReportFormat()","called");
        if ( reportFormatXML3G != null ) {
            return reportFormatXML3G;
        }

        Log.write("Get report formats from performance monitor...");
        ReportFormat[] reportFormats = null;
        try {
            reportFormats = performanceMonitorSession.getReportFormats();
        } catch ( RemoteException e ) {
            Log.write(this,Log.LOG_MAJOR,"getReportFormat()","exception="+e);
            Log.write( ERR_COULD_NOT_GET_REPORT_FORMAT );
            Log.write( ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
            throw new ThresholdMonitorException( ERR_COULD_NOT_GET_REPORT_FORMAT
                + " " + ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR + " "
                + e.getMessage() );
        }
        if ( reportFormats==null ) {
            Log.write("reportFormat==null");
            Log.write(this,Log.LOG_MAJOR,"getReportFormat()",ERR_COULD_NOT_GET_REPORT_FORMAT);
            throw new ThresholdMonitorException( ERR_COULD_NOT_GET_REPORT_FORMAT );
        }
        Log.write("Get 3G/XML report format...");
        ReportFormat aReportFormat = null;
        for (int i=0;i<reportFormats.length;i++) {
            aReportFormat = reportFormats[i];
            if ( "3G".equals( aReportFormat.getTechnology() )
              && aReportFormat.getType() == ReportFormat.XML ) { // or ASCII ?
                reportFormatXML3G = aReportFormat;
                break;
            }
        }

        if ( reportFormatXML3G == null ) {
            Log.write(this,Log.LOG_MAJOR,"getReportFormat()",ERR_COULD_NOT_GET_REPORT_FORMAT);
            throw new ThresholdMonitorException( ERR_COULD_NOT_GET_REPORT_FORMAT );
        }

        return reportFormatXML3G;
    }

    /**
     * Validate a simple threshold monitor value. The SimpleThresholdMonitorValue
     * is validated by this method before the threshold monitor is created.
     *
     * @exception javax.oss.IllegalArgumentException is thrown if the value is not valid
     */
    private void validateSimpleThresholdMonitorValue(
                                    SimpleThresholdMonitorValue smValue )
                                    throws javax.oss.IllegalArgumentException {
        Log.write(this,Log.LOG_ALL,"validateSimpleThresholdMonitorValue()","called" );


        // check for null
        Log.write("Check for null value...");
        if ( smValue == null ) {
            throw new javax.oss.IllegalArgumentException( ERR_THRESHOLD_MONITOR_VALUE_NULL );
        }

        // check implementation class
        Log.write("Check implementation class...");
        if ( smValue instanceof ossj.qos.pm.threshold.SimpleThresholdMonitorValueImpl == false ) {
            throw new javax.oss.IllegalArgumentException(
                ERR_NOT_VALID_SIMPLE_THRESHOLD_MONITOR_VALUE
                + " " + ERR_NOT_CORRECT_IMPLEMENTATION_CLASS );
        }

        Log.write("smValue{populated attributes}=" + smValue.getAllPopulatedAttributes() );

        // check threshold monitor key
        Log.write("Check that threshold monitor key is null...");
        try {
            Object key = smValue.getThresholdMonitorKey();
            if ( key != null ) {
                throw new javax.oss.IllegalArgumentException(
                    ERR_THRESHOLD_MONITOR_KEY_NOT_NULL );
            }
        } catch ( java.lang.IllegalStateException e ) {
            // ok, should not be populated
        }

        // check name
        Log.write("Check threshold monitor name...");
        if ( smValue.isPopulated( SimpleThresholdMonitorValue.NAME ) ) {
            String name = smValue.getName();
            String nameInDb = null;
            ThresholdMonitorValue tmValue = null;
            if ( name != null ) {
                // check if unique
                try {
                    ThresholdMonitorEntityLocal localEntity = null;
                    Collection entities = entityHome.findAllThresholds();
                    Iterator iter = entities.iterator();
                    while ( iter.hasNext() ) {
                        localEntity = (ThresholdMonitorEntityLocal) iter.next();
                        tmValue = localEntity.getThresholdMonitorValue();
			System.out.println("**********debug2 ThresholdMonitorBean tmValue="+tmValue);
			System.out.println("**********debug2 ThresholdMonitorValue.NAME="+ThresholdMonitorValue.NAME);
                        // first check that threshold in db has a name defined
                        // SH if ( tmValue.isPopulated( ThresholdMonitorValue.NAME )==true ) {
			if ( tmValue != null && tmValue.isPopulated( ThresholdMonitorValue.NAME )==true ) {
                            nameInDb = tmValue.getName();
                        } else {
                            nameInDb=null;
                        }
			System.out.println("**********debug2 ThresholdMonitorBean name="+name);
			System.out.println("**********debug2 ThresholdMonitorBean nameInDb="+nameInDb);
                        // compare with smValue´s name
                        // SH if ( name.equals( nameInDb ) ) {
                        if ( nameInDb != null && name.equals( nameInDb ) ) {
                            throw new javax.oss.IllegalArgumentException( ERR_THRESHOLD_MONITOR_NAME_ALREADY_USED );
                        }
                    }
                } catch ( FinderException e ) {
                    Log.write(this,Log.LOG_MINOR,
                        "validateSimpleThresholdMonitorValue()",
                        "exception="+e);
                    throw new RuntimeException( e.getMessage() );
                }
            }
        }

        // check threshold defintion
        Log.write("Check threshold definition...");
        if ( smValue.isPopulated( SimpleThresholdMonitorValue.DEFINITION )==false ) {
            throw new javax.oss.IllegalArgumentException( ERR_THRESHOLD_DEFINITION_IS_NULL );
        }

        ThresholdDefinition thresholdDefinition = smValue.getThresholdDefinition();

        if ( AttributeValidator.isValidThresholdDefinition( thresholdDefinition )==false ) {
            throw new javax.oss.IllegalArgumentException( ERR_THRESHOLD_DEFINITION_IS_NOT_VALID );
        } else if ( thresholdDefinition instanceof ossj.qos.pm.threshold.ThresholdDefinitionImpl == false ) {
            throw new javax.oss.IllegalArgumentException(
                ERR_NOT_CORRECT_IMPLEMENTATION_CLASS + " "
                + thresholdDefinition.getClass().getName() );
        }


        // check observable object
        Log.write("Check observable object... 1");
        if ( smValue.isPopulated( SimpleThresholdMonitorValue.OBSERVABLE_OBJECT )==false )  {
            throw new javax.oss.IllegalArgumentException( ERR_OBSERVABLE_OBJECT_IS_NULL );
        }
        String observableObject = smValue.getObservableObject();
        if ( observableObject == null ) {
            throw new javax.oss.IllegalArgumentException( ERR_OBSERVABLE_OBJECT_IS_NULL );
        } else {
            // performanceMonitorSession.getObservableObjects();

            // perhaps leave this check for the performance monitor instead?
        }

        // more tests, check that the attribute descriptor is actually valid
        Log.write("Validate attribute descriptor against observable objects attributes(PM)...");
        try {
            PerformanceAttributeDescriptor pad = thresholdDefinition.getAttributeDescriptor();


            // observableObject, how to get class from that...?
            String observableObjectClass = findClassFromObservableObject( observableObject );

            // get all attributes for observable object class
            PerformanceAttributeDescriptor[] padArray =
                performanceMonitorSession.getObservableAttributes( observableObjectClass );


            // find the supplied attribute in the list
            boolean found = false;
            for (int i=0;i<padArray.length;i++) {
                if ( PADComparator.compare( pad, padArray[i] )==0 ) {
                    found = true;
                    break;
                }
            }
            if ( found==false ) { // no match
                Log.write(this,Log.LOG_MINOR,"validateSimpleThresholdMonitorValue()",
                    ERR_PERFORMANCE_ATTRIBUTE_DESCRIPTOR_NOT_VALID);
                throw new javax.oss.IllegalArgumentException(
                    ERR_PERFORMANCE_ATTRIBUTE_DESCRIPTOR_NOT_VALID );
            }

        } catch ( RemoteException e ) {
            Log.write(this,Log.LOG_MINOR,"validateSimpleThresholdMonitorValue()",
                "exception="+e);
            Log.write(this,Log.LOG_MINOR,"validateSimpleThresholdMonitorValue()",
                ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
            throw new RuntimeException( ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
        } catch ( javax.oss.IllegalArgumentException e ) {
            Log.write(this,Log.LOG_MINOR,"validateSimpleThresholdMonitorValue()",
                "exception="+e);
            throw e;
        }

        Log.write("Check alarm config...");
        if ( smValue.isPopulated( SimpleThresholdMonitorValue.ALARM_CONFIG ) )  {
            AlarmConfig alarmConfig = smValue.getAlarmConfig();
            if ( alarmConfig==null ) {
                throw new javax.oss.IllegalArgumentException(
                    ERR_ALARM_CONFIG_IS_NULL );
            } else if (alarmConfig instanceof ossj.qos.pm.threshold.AlarmConfigImpl==false ) {
                throw new javax.oss.IllegalArgumentException(
                    ERR_NOT_CORRECT_IMPLEMENTATION_CLASS + " "
                    + alarmConfig.getClass().getName() );
            }

            if ( AttributeValidator.isValidAlarmConfig( alarmConfig )==false ) {
                 throw new javax.oss.IllegalArgumentException( ERR_ALARM_CONFIG_IS_NOT_VALID );
            }
        } else {
            Log.write("Alarm config not populated..." + ERR_ALARM_CONFIG_IS_NULL );
            throw new javax.oss.IllegalArgumentException( ERR_ALARM_CONFIG_IS_NULL );
        }

        Log.write("Check granularity...");
        if ( smValue.isPopulated( SimpleThresholdMonitorValue.GRANULARITY ) ) {
            int granularity = smValue.getGranularityPeriod();
            if ( AttributeValidator.isValidGranularity( granularity )==false ) {
                 throw new javax.oss.IllegalArgumentException( ERR_GRANULARITY_IS_NOT_VALID );
            }

            int[] supportedGranularities = getSupportedGranularities(smValue);
            Arrays.sort( supportedGranularities );
            if ( Arrays.binarySearch(supportedGranularities,granularity)<0 ){
                throw new javax.oss.IllegalArgumentException(
                    ERR_GRANULARITY_IS_NOT_SUPPORTED );
            }
        } else {
            Log.write("Granularity period not populated!");
            throw new javax.oss.IllegalArgumentException( ERR_GRANULARITY_IS_NOT_SET );
        }

        // check schedule
        Log.write("Check schedule...");
        if ( smValue.isPopulated( SimpleThresholdMonitorValue.SCHEDULE ) )  {
            Schedule schedule = smValue.getSchedule();
            if ( schedule == null ) {
                throw new javax.oss.IllegalArgumentException( ERR_SCHEDULE_IS_NULL );
            }

            if ( AttributeValidator.isValidSchedule( schedule )==false ) {
                throw new javax.oss.IllegalArgumentException( ERR_SCHEDULE_NOT_VALID );
            }
        } else {
            Log.write("Schedule is not populated.");
        }

        // check state (unnecessary test)
        if ( smValue.isPopulated( SimpleThresholdMonitorValue.STATE )==true )  {
            throw new javax.oss.IllegalArgumentException( "state is populated" );
        }

        Log.write("Ok, passed all validation!");
    }

        /**
     * Validate a trigger on all threshold monitor value. The TriggerOnAllThresholdMonitorValue
     * is validated by this method before the threshold monitor is created.
     *
     * @exception javax.oss.IllegalArgumentException is thrown if the value is not valid
     */
    private void validateTriggerOnAllThresholdMonitorValue(
                                    TriggerOnAllThresholdMonitorValue toamValue )
                                    throws javax.oss.IllegalArgumentException {
        Log.write(this,Log.LOG_ALL,"validateTriggerOnAllThresholdMonitorValue()","called" );

        // check for null
        Log.write("Check for null value...");
        if ( toamValue == null ) {
            throw new javax.oss.IllegalArgumentException( ERR_THRESHOLD_MONITOR_VALUE_NULL );
        }

        // check implementation class
        Log.write("Check implementation class...");
        if ( toamValue instanceof ossj.qos.pm.threshold.TriggerOnAllThresholdMonitorValueImpl == false ) {
            throw new javax.oss.IllegalArgumentException(
                ERR_NOT_VALID_TRIGGER_ON_ALL_THRESHOLD_MONITOR_VALUE
                + " " + ERR_NOT_CORRECT_IMPLEMENTATION_CLASS );
        }

        Log.write("toamValue{populated attributes}=" + toamValue.getAllPopulatedAttributes() );

        // check threshold monitor key
        Log.write("Check that threshold monitor key is null...");
        try {
            Object key = toamValue.getThresholdMonitorKey();
            if ( key != null ) {
                throw new javax.oss.IllegalArgumentException(
                    ERR_THRESHOLD_MONITOR_KEY_NOT_NULL );
            }
        } catch ( java.lang.IllegalStateException e ) {
            // ok, should not be populated
        }

        // check name
        Log.write("Check threshold monitor name...");
        if ( toamValue.isPopulated( TriggerOnAllThresholdMonitorValue.NAME ) ) {
            String name = toamValue.getName();
            String nameInDb = null;
            ThresholdMonitorValue tmValue = null;
            if ( name != null ) {
                // check if unique
                try {
                    ThresholdMonitorEntityLocal localEntity = null;
                    Collection entities = entityHome.findAllThresholds();
                    Iterator iter = entities.iterator();
                    while ( iter.hasNext() ) {
                        localEntity = (ThresholdMonitorEntityLocal) iter.next();
                        tmValue = localEntity.getThresholdMonitorValue();
                        // first check that threshold in db has a name defined
                        if ( tmValue.isPopulated( ThresholdMonitorValue.NAME )==true ) {
                            nameInDb = tmValue.getName();
                        } else {
                            nameInDb=null;
                        }
                        // compare with toamValue´s name
                        if ( name.equals( nameInDb ) ) {
                            throw new javax.oss.IllegalArgumentException( ERR_THRESHOLD_MONITOR_NAME_ALREADY_USED );
                        }
                    }
                } catch ( FinderException e ) {
                    Log.write(this,Log.LOG_MINOR,
                        "validateTriggerOnAllThresholdMonitorValue()",
                        "exception="+e);
                    throw new RuntimeException( e.getMessage() );
                }
            }
        }

        // check threshold defintion
        Log.write("Check threshold definition...");
        if ( toamValue.isPopulated( TriggerOnAllThresholdMonitorValue.DEFINITIONS )==false ) {
            throw new javax.oss.IllegalArgumentException( ERR_THRESHOLD_DEFINITION_IS_NULL );
        }

        ThresholdDefinition[] thresholdDefinition = toamValue.getThresholdDefinitions();

        for ( int i=0; i<thresholdDefinition.length; i++) {
            if ( AttributeValidator.isValidThresholdDefinition( thresholdDefinition[i] )==false ) {
                throw new javax.oss.IllegalArgumentException( ERR_THRESHOLD_DEFINITION_IS_NOT_VALID );
            } else if ( thresholdDefinition[i] instanceof ossj.qos.pm.threshold.ThresholdDefinitionImpl == false ) {
                throw new javax.oss.IllegalArgumentException(
                    ERR_NOT_CORRECT_IMPLEMENTATION_CLASS + " "
                    + thresholdDefinition[i].getClass().getName() );
            }
        }


        // check observable object
        Log.write("Check observable object... 2");
        if ( toamValue.isPopulated( TriggerOnAllThresholdMonitorValue.OBSERVABLE_OBJECTS )==false )  {
            throw new javax.oss.IllegalArgumentException( ERR_OBSERVABLE_OBJECT_IS_NULL );
        }
        String[] observableObjects = toamValue.getObservableObjects();
        if ( observableObjects == null ) {
            throw new javax.oss.IllegalArgumentException( ERR_OBSERVABLE_OBJECT_IS_NULL );
        } else {
            // performanceMonitorSession.getObservableObjects();

            // perhaps leave this check for the performance monitor instead?
        }

        // more tests, check that the attribute descriptor is actually valid
        Log.write("Validate attribute descriptor against observable objects attributes(PM)...");
        try {
            for ( int i=0; i<thresholdDefinition.length; i++) {
                PerformanceAttributeDescriptor pad = thresholdDefinition[i].getAttributeDescriptor();

                for ( int j=0; j<observableObjects.length; j++) {
                    if ( observableObjects[j] == null )
                        throw new javax.oss.IllegalArgumentException( ERR_OBSERVABLE_OBJECT_IS_NULL );

                    // observableObject, how to get class from that...?
                    String observableObjectClass = findClassFromObservableObject( observableObjects[j] );

                    // get all attributes for observable object class
                    PerformanceAttributeDescriptor[] padArray =
                        performanceMonitorSession.getObservableAttributes( observableObjectClass );

                    // find the supplied attribute in the list
                    boolean found = false;
                    for (int k=0;k<padArray.length;k++) {
                        if ( PADComparator.compare( pad, padArray[k] )==0 ) {
                            found = true;
                            break;
                        }
                    }
                    if ( found==false ) { // no match
                        Log.write(this,Log.LOG_MINOR,"validateTriggerOnAllThresholdMonitorValue()",
                            ERR_PERFORMANCE_ATTRIBUTE_DESCRIPTOR_NOT_VALID);
                        throw new javax.oss.IllegalArgumentException(
                            ERR_PERFORMANCE_ATTRIBUTE_DESCRIPTOR_NOT_VALID );
                    }
                }
            }

        } catch ( RemoteException e ) {
            Log.write(this,Log.LOG_MINOR,"validateTriggerOnAllThresholdMonitorValue()",
                "exception="+e);
            Log.write(this,Log.LOG_MINOR,"validateTriggerOnAllThresholdMonitorValue()",
                ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
            throw new RuntimeException( ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
        } catch ( javax.oss.IllegalArgumentException e ) {
            Log.write(this,Log.LOG_MINOR,"validateTriggerOnAllThresholdMonitorValue()",
                "exception="+e);
            throw e;
        }

        Log.write("Check alarm config...");
        if ( toamValue.isPopulated( TriggerOnAllThresholdMonitorValue.ALARM_CONFIG ) )  {
            AlarmConfig alarmConfig = toamValue.getAlarmConfig();
            if ( alarmConfig==null ) {
                throw new javax.oss.IllegalArgumentException(
                    ERR_ALARM_CONFIG_IS_NULL );
            } else if (alarmConfig instanceof ossj.qos.pm.threshold.AlarmConfigImpl==false ) {
                throw new javax.oss.IllegalArgumentException(
                    ERR_NOT_CORRECT_IMPLEMENTATION_CLASS + " "
                    + alarmConfig.getClass().getName() );
            }

            if ( AttributeValidator.isValidAlarmConfig( alarmConfig )==false ) {
                 throw new javax.oss.IllegalArgumentException( ERR_ALARM_CONFIG_IS_NOT_VALID );
            }
        } else {
            Log.write("Alarm config not populated..." + ERR_ALARM_CONFIG_IS_NULL );
            throw new javax.oss.IllegalArgumentException( ERR_ALARM_CONFIG_IS_NULL );
        }

        Log.write("Check granularity...");
        if ( toamValue.isPopulated( TriggerOnAllThresholdMonitorValue.GRANULARITY ) ) {
            int granularity = toamValue.getGranularityPeriod();
            if ( AttributeValidator.isValidGranularity( granularity )==false ) {
                 throw new javax.oss.IllegalArgumentException( ERR_GRANULARITY_IS_NOT_VALID );
            }

            int[] supportedGranularities = getSupportedGranularities(toamValue);
            Arrays.sort( supportedGranularities );
            if ( Arrays.binarySearch(supportedGranularities,granularity)<0 ){
                throw new javax.oss.IllegalArgumentException(
                    ERR_GRANULARITY_IS_NOT_SUPPORTED );
            }
        } else {
            Log.write("Granularity period not populated!");
            throw new javax.oss.IllegalArgumentException( ERR_GRANULARITY_IS_NOT_SET );
        }

        // check schedule
        Log.write("Check schedule...");
        if ( toamValue.isPopulated( TriggerOnAllThresholdMonitorValue.SCHEDULE ) )  {
            Schedule schedule = toamValue.getSchedule();
            if ( schedule == null ) {
                throw new javax.oss.IllegalArgumentException( ERR_SCHEDULE_IS_NULL );
            }

            if ( AttributeValidator.isValidSchedule( schedule )==false ) {
                throw new javax.oss.IllegalArgumentException( ERR_SCHEDULE_NOT_VALID );
            }
        } else {
            Log.write("Schedule is not populated.");
        }

        // check state (unnecessary test)
        if ( toamValue.isPopulated( TriggerOnAllThresholdMonitorValue.STATE )==true )  {
            throw new javax.oss.IllegalArgumentException( "state is populated" );
        }

        Log.write("Ok, passed all validation!");
    }


            /**
     * Validate a trigger on all threshold monitor value. The TriggerOnAnyThresholdMonitorValue
     * is validated by this method before the threshold monitor is created.
     *
     * @exception javax.oss.IllegalArgumentException is thrown if the value is not valid
     */
    private void validateTriggerOnAnyThresholdMonitorValue(
                                    TriggerOnAnyThresholdMonitorValue toamValue )
                                    throws javax.oss.IllegalArgumentException {
        Log.write(this,Log.LOG_ALL,"validateTriggerOnAnyThresholdMonitorValue()","called" );

        // check for null
        Log.write("Check for null value...");
        if ( toamValue == null ) {
            throw new javax.oss.IllegalArgumentException( ERR_THRESHOLD_MONITOR_VALUE_NULL );
        }

        // check implementation class
        Log.write("Check implementation class...");
        if ( toamValue instanceof ossj.qos.pm.threshold.TriggerOnAnyThresholdMonitorValueImpl == false ) {
            throw new javax.oss.IllegalArgumentException(
                ERR_NOT_VALID_TRIGGER_ON_ANY_THRESHOLD_MONITOR_VALUE
                + " " + ERR_NOT_CORRECT_IMPLEMENTATION_CLASS );
        }

        Log.write("toamValue{populated attributes}=" + toamValue.getAllPopulatedAttributes() );

        // check threshold monitor key
        Log.write("Check that threshold monitor key is null...");
        try {
            Object key = toamValue.getThresholdMonitorKey();
            if ( key != null ) {
                throw new javax.oss.IllegalArgumentException(
                    ERR_THRESHOLD_MONITOR_KEY_NOT_NULL );
            }
        } catch ( java.lang.IllegalStateException e ) {
            // ok, should not be populated
        }

        // check name
        Log.write("Check threshold monitor name...");
        if ( toamValue.isPopulated( TriggerOnAnyThresholdMonitorValue.NAME ) ) {
            String name = toamValue.getName();
            String nameInDb = null;
            ThresholdMonitorValue tmValue = null;
            if ( name != null ) {
                // check if unique
                try {
                    ThresholdMonitorEntityLocal localEntity = null;
                    Collection entities = entityHome.findAllThresholds();
                    Iterator iter = entities.iterator();
                    while ( iter.hasNext() ) {
                        localEntity = (ThresholdMonitorEntityLocal) iter.next();
                        tmValue = localEntity.getThresholdMonitorValue();
                        // first check that threshold in db has a name defined
                        if ( tmValue.isPopulated( ThresholdMonitorValue.NAME )==true ) {
                            nameInDb = tmValue.getName();
                        } else {
                            nameInDb=null;
                        }
                        // compare with toamValue´s name
                        if ( name.equals( nameInDb ) ) {
                            throw new javax.oss.IllegalArgumentException( ERR_THRESHOLD_MONITOR_NAME_ALREADY_USED );
                        }
                    }
                } catch ( FinderException e ) {
                    Log.write(this,Log.LOG_MINOR,
                        "validateTriggerOnAnyThresholdMonitorValue()",
                        "exception="+e);
                    throw new RuntimeException( e.getMessage() );
                }
            }
        }

        // check threshold defintion
        Log.write("Check threshold definition...");
        if ( toamValue.isPopulated( TriggerOnAnyThresholdMonitorValue.DEFINITIONS )==false ) {
            throw new javax.oss.IllegalArgumentException( ERR_THRESHOLD_DEFINITION_IS_NULL );
        }

        ThresholdDefinition[] thresholdDefinition = toamValue.getThresholdDefinitions();

        for ( int i=0; i<thresholdDefinition.length; i++) {
            if ( AttributeValidator.isValidThresholdDefinition( thresholdDefinition[i] )==false ) {
                throw new javax.oss.IllegalArgumentException( ERR_THRESHOLD_DEFINITION_IS_NOT_VALID );
            } else if ( thresholdDefinition[i] instanceof ossj.qos.pm.threshold.ThresholdDefinitionImpl == false ) {
                throw new javax.oss.IllegalArgumentException(
                    ERR_NOT_CORRECT_IMPLEMENTATION_CLASS + " "
                    + thresholdDefinition[i].getClass().getName() );
            }
        }


        // check observable object
        Log.write("Check observable object... 3");
        if ( toamValue.isPopulated( TriggerOnAnyThresholdMonitorValue.OBSERVABLE_OBJECTS )==false )  {
            throw new javax.oss.IllegalArgumentException( ERR_OBSERVABLE_OBJECT_IS_NULL );
        }
        String[] observableObjects = toamValue.getObservableObjects();
        if ( observableObjects == null ) {
            throw new javax.oss.IllegalArgumentException( ERR_OBSERVABLE_OBJECT_IS_NULL );
        } else {
            // performanceMonitorSession.getObservableObjects();

            // perhaps leave this check for the performance monitor instead?
        }

        // more tests, check that the attribute descriptor is actually valid
        Log.write("Validate attribute descriptor against observable objects attributes(PM)...");
        try {
            for ( int i=0; i<thresholdDefinition.length; i++) {
                PerformanceAttributeDescriptor pad = thresholdDefinition[i].getAttributeDescriptor();

                for ( int j=0; j<observableObjects.length; j++) {
                    if ( observableObjects[j] == null )
                        throw new javax.oss.IllegalArgumentException( ERR_OBSERVABLE_OBJECT_IS_NULL );

                    // observableObject, how to get class from that...?
                    String observableObjectClass = findClassFromObservableObject( observableObjects[j] );

                    // get all attributes for observable object class
                    PerformanceAttributeDescriptor[] padArray =
                        performanceMonitorSession.getObservableAttributes( observableObjectClass );

                    // find the supplied attribute in the list
                    boolean found = false;
                    for (int k=0;k<padArray.length;k++) {
                        if ( PADComparator.compare( pad, padArray[k] )==0 ) {
                            found = true;
                            break;
                        }
                    }
                    if ( found==false ) { // no match
                        Log.write(this,Log.LOG_MINOR,"validateTriggerOnAnyThresholdMonitorValue()",
                            ERR_PERFORMANCE_ATTRIBUTE_DESCRIPTOR_NOT_VALID);
                        throw new javax.oss.IllegalArgumentException(
                            ERR_PERFORMANCE_ATTRIBUTE_DESCRIPTOR_NOT_VALID );
                    }
                }
            }

        } catch ( RemoteException e ) {
            Log.write(this,Log.LOG_MINOR,"validateTriggerOnAnyThresholdMonitorValue()",
                "exception="+e);
            Log.write(this,Log.LOG_MINOR,"validateTriggerOnAnyThresholdMonitorValue()",
                ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
            throw new RuntimeException( ERR_REMOTE_INVOCATION_ON_PERFORMANCE_MONITOR );
        } catch ( javax.oss.IllegalArgumentException e ) {
            Log.write(this,Log.LOG_MINOR,"validateTriggerOnAnyThresholdMonitorValue()",
                "exception="+e);
            throw e;
        }

        Log.write("Check alarm config...");
        if ( toamValue.isPopulated( TriggerOnAnyThresholdMonitorValue.ALARM_CONFIG ) )  {
            AlarmConfig alarmConfig = toamValue.getAlarmConfig();
            if ( alarmConfig==null ) {
                throw new javax.oss.IllegalArgumentException(
                    ERR_ALARM_CONFIG_IS_NULL );
            } else if (alarmConfig instanceof ossj.qos.pm.threshold.AlarmConfigImpl==false ) {
                throw new javax.oss.IllegalArgumentException(
                    ERR_NOT_CORRECT_IMPLEMENTATION_CLASS + " "
                    + alarmConfig.getClass().getName() );
            }

            if ( AttributeValidator.isValidAlarmConfig( alarmConfig )==false ) {
                 throw new javax.oss.IllegalArgumentException( ERR_ALARM_CONFIG_IS_NOT_VALID );
            }
        } else {
            Log.write("Alarm config not populated..." + ERR_ALARM_CONFIG_IS_NULL );
            throw new javax.oss.IllegalArgumentException( ERR_ALARM_CONFIG_IS_NULL );
        }

        Log.write("Check granularity...");
        if ( toamValue.isPopulated( TriggerOnAnyThresholdMonitorValue.GRANULARITY ) ) {
            int granularity = toamValue.getGranularityPeriod();
            if ( AttributeValidator.isValidGranularity( granularity )==false ) {
                 throw new javax.oss.IllegalArgumentException( ERR_GRANULARITY_IS_NOT_VALID );
            }

            int[] supportedGranularities = getSupportedGranularities(toamValue);
            Arrays.sort( supportedGranularities );
            if ( Arrays.binarySearch(supportedGranularities,granularity)<0 ){
                throw new javax.oss.IllegalArgumentException(
                    ERR_GRANULARITY_IS_NOT_SUPPORTED );
            }
        } else {
            Log.write("Granularity period not populated!");
            throw new javax.oss.IllegalArgumentException( ERR_GRANULARITY_IS_NOT_SET );
        }

        // check schedule
        Log.write("Check schedule...");
        if ( toamValue.isPopulated( TriggerOnAnyThresholdMonitorValue.SCHEDULE ) )  {
            Schedule schedule = toamValue.getSchedule();
            if ( schedule == null ) {
                throw new javax.oss.IllegalArgumentException( ERR_SCHEDULE_IS_NULL );
            }

            if ( AttributeValidator.isValidSchedule( schedule )==false ) {
                throw new javax.oss.IllegalArgumentException( ERR_SCHEDULE_NOT_VALID );
            }
        } else {
            Log.write("Schedule is not populated.");
        }

        // check state (unnecessary test)
        if ( toamValue.isPopulated( TriggerOnAnyThresholdMonitorValue.STATE )==true )  {
            throw new javax.oss.IllegalArgumentException( "state is populated" );
        }

        Log.write("Ok, passed all validation!");
    }

    /**
     * Returns the observable object class for an observable object. Uses the
     * ObservableObjectClassIterator to find the classes. The
     * ObservableObjectIterator is then used to find the objects for each class,
     * which are compared with the <code>observableObject</code> argument.
     *
     * @param observableObject the observable object
     * @return observable object class or null if not found
     */
    private String findClassFromObservableObject( String observableObject )
                            throws javax.oss.IllegalArgumentException {
               ObservableObjectClassIterator classIter = getObservableObjectClasses();
        ObservableObjectIterator objIter = null;
        String className = null, observObject=null;

        try {
            for (String[] classes=classIter.getNext(20);classes.length!=0;classes=classIter.getNext(20)) {
                for (int i=0;i<classes.length;i++) {
                    className = classes[i];
                    if ( className==null ) {
                        return null; // not found!
                    }
                    objIter = getObservableObjects( className, "" );
                    for (String[] observObjects=objIter.getNext(20);observObjects.length!=0;observObjects=objIter.getNext(20)) {
                        for (int j=0;j<observObjects.length;j++) {
                            observObject = observObjects[j];
                            if ( observObject==null ) {
                                break;
                            }
                            if ( observableObject.equals( observObject ) ) {
                                return className;
                            }
                        }
                    }
                    try {   // remove current iterator
                        objIter.remove();
                        objIter = null;
                    } catch ( Exception e ) {
                        Log.write(this,Log.LOG_MINOR,"findClassFromObservableObject()",
                            "objIter.remove();exception="+e);
                    }
                }
            }
            try {   // remove current class iterator
                classIter.remove();
                classIter = null;
            } catch ( Exception e ) {
                Log.write(this,Log.LOG_MINOR,"findClassFromObservableObject()",
                    "classIter.remove();exception="+e);
            }
        } catch ( RemoteException e ) {
            Log.write(this,Log.LOG_MINOR,"findClassFromObservableObject()",
                "exception="+e);
            throw new RuntimeException( e.getMessage() );
        } catch ( javax.oss.IllegalArgumentException e ) {
            Log.write(this,Log.LOG_MAJOR,"findClassFromObservableObject()",
                "exception="+e);
            throw e;
        } finally { // clean up iterators, if necessary
            if ( objIter != null ) {
                try {
                    objIter.remove();
                } catch ( Exception e ) {
                    Log.write(this,Log.LOG_MINOR,"findClassFromObservableObject()",
                        "objIter.remove();exception="+e);
                }
            }
            if ( classIter != null ) {
                try {
                    classIter.remove();
                } catch ( Exception e ) {
                    Log.write(this,Log.LOG_MINOR,"findClassFromObservableObject()",
                        "classIter.remove();exception="+e);
                }
            }
        }
        return null;
    }
}//ThresholdMonitorBean
