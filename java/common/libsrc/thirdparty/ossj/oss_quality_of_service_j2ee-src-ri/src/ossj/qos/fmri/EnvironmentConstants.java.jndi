package com.motorola.oss.fmri;

/**
 * EnvironmentConstants
 * 
 * Environment constants used for the threshold monitor EJBs. Note that all EJB
 * references or environment might not be defined for all EJBs, that is the
 * specified constant might be present in the ejb-jar.xml file for some EJBs but
 * not all.
 *
 * <p>To not cause any missunderstandings. The constants defined here are not the
 * actual values for the constants. Instead they refer to the <code>java:comp/env</code>
 * namespace environment property names defined in the deployment descriptor file
 * <code>ejb-jar.xml</code>. In the deployment descriptor these property names
 * have the actual value assigned to them. That means that a constant here
 * should not be changed unless the property <b>name</b> has been changed in
 * the deployment descriptor!
 *
 * <p>The property values are retrieved from the EJB (application server) using
 * JNDI.
 *
 * <p>The constants APPLICATION_CONTEXT_PROPERTY_PROVIDER_URL and
 * APPLICATION_CONTEXT_PROPERTY_INITIAL_CONTEXT_FACTORY are the only exception.
 * They do not refer to a "java:comp/env" property directly, but relatively
 * beneath the APPLICATION_CONTEXT_JNDI namespace.
 *
 * @author Henrik Lindstrom
 *
 * Adapted for the FMRI
 * Not all environment constants used in the current implementation
 */
public interface EnvironmentConstants {
    
    /**
     * The message topic that is used to send events. Defined by the Alarm
     * Monitor.
     */
    public static final String ALARM_MONITOR_EXTERNAL_EVENT_MESSAGE_TOPIC =
        //VP "java:comp/env/jms/AlarmMonitorExternalEventMessageTopic";
        "jms/AlarmMonitorExternalEventMessageTopic";

    /**
     * The topic connection factory used for sending alarm events. Defined by
     * the Alarm Monitor.
     */
    public static final String ALARM_MONITOR_TOPIC_CONNECTION_FACTORY =
        //VP "java:comp/env/jms/AlarmMonitorTopicConnectionFactory";
        "jms/AlarmMonitorTopicConnectionFactory";

    /**
     * The property <code>includeApplicationInfo</code> is used as a flag to determine
     * if the application distinguished name shall be included in the
     * generated events and if the alarm key application context should be populated.
     */
    public static final String INCLUDE_APPLICATION_INFO_PROPERTY_NAME =
        "java:comp/env/includeApplicationInfo";

    /**
     * Property name for provider URL property in application context.
     */
    public static final String APPLICATION_CONTEXT_PROPERTY_PROVIDER_URL =
        "java:comp/env/applicationContextProviderURL";
    /**
     * Property name for initial context factory property in application context.
     */
    public static final String APPLICATION_CONTEXT_PROPERTY_INITIAL_CONTEXT_FACTORY =
        "java:comp/env/applicationContextInitialContextFactory";

    /**
     * Property name for application distinguished name property.
     */
    public static final String APPLICATION_DN_PROPERTY =
        "java:comp/env/applicationDistinguishedName";
    
    /**
     * Property name indicating whether debug logging is enabled or disabled.
     */
    public static final String TURN_ON_DEBUG_LOGGING =
        "java:comp/env/debugLogEnabled";
}
